/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query vocabularyConcept($language: String, $vocabulary: ID!, $concept: ID!) {\n    concept: vocabularyConcept(vocabulary: $vocabulary, concept: $concept) {\n      uiLabel(language: $language)\n      uiDefinition(language: $language)\n      parents {\n        uiLabel(language: $language)\n      }\n    }\n  }\n": types.VocabularyConceptDocument,
    "\nquery globe($lat: Float!, $lon: Float!){\n  globe(cLat: $lat, cLon: $lon) {\n    svg\n  }\n}\n": types.GlobeDocument,
    "\n  query HelpText($identifier: String!, $locale: String) {\n    help(identifier: $identifier, locale: $locale) {\n      id\n      identifier\n      title\n      body\n    }\n  }\n": types.HelpTextDocument,
    "\n  query HelpTitle($identifier: String!, $locale: String) {\n    help(identifier: $identifier, locale: $locale) {\n      id\n      identifier\n      title\n    }\n  }\n": types.HelpTitleDocument,
    "\n  query ParticipantSelect($type: NodeType, $participationStatus: ParticipationStatus, $limit: Int) {\n    participantSearch(type: $type, participationStatus: $participationStatus, limit: $limit) {\n      endOfRecords\n      count\n      results {\n        id\n        name\n      }\n    }\n  }\n": types.ParticipantSelectDocument,
    "\n  query Header {\n    gbifHome {\n      title\n      summary\n      children {\n        id\n        externalLink\n        link\n        title\n        children {\n          id\n          externalLink\n          link\n          title\n          children {\n            id\n            externalLink\n            link\n            title\n          }\n        }\n      }\n    }\n  }\n": types.HeaderDocument,
    "\n  fragment CollectionResult on CollectionSearchEntity {\n    key\n    name\n    excerpt\n    numberSpecimens\n    institutionName\n    institutionKey\n    featuredImageUrl: thumbor(width: 300, height: 200)\n    featuredImageLicense\n  }\n": types.CollectionResultFragmentDoc,
    "\n  query Collection($key: ID!) {\n    collection(key: $key) {\n      key\n      active\n      code\n      name\n      description\n      taxonomicCoverage\n      geographicCoverage\n      temporalCoverage\n      notes\n      homepage\n\n      numberSpecimens\n      incorporatedCollections\n\n      contentTypes\n\n      personalCollection\n      email\n      phone\n\n      catalogUrls\n      apiUrls\n      preservationTypes\n      accessionStatus\n\n      featuredImageUrl: thumbor(width: 1000, height: 667)\n      featuredImageLicense\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile\n\n      created\n      deleted\n      modified\n      modifiedBy\n      replacedByCollection {\n        name\n        key\n      }\n\n      institutionKey\n      identifiers {\n        key\n        type\n        identifier\n      }\n      contactPersons {\n        key\n        firstName\n        lastName\n        phone\n        email\n        taxonomicExpertise\n        primary\n        position\n        userIds {\n          type\n          id\n        }\n      }\n      alternativeCodes {\n        code\n        description\n      }\n      institution {\n        code\n        name\n        key\n      }\n\n      mailingAddress {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      address {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n    }\n  }\n": types.CollectionDocument,
    "\n  query CollectionSummaryMetrics(\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n      cardinality {\n        recordedBy\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n": types.CollectionSummaryMetricsDocument,
    "\n  query CollectionSearch($query: CollectionSearchInput) {\n    collectionSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...CollectionResult\n      }\n    }\n  }\n": types.CollectionSearchDocument,
    "\n  query BecomeAPublisherPage {\n    resource(alias: \"/become-a-publisher\") {\n      __typename\n      ... on Article {\n        id\n        title\n        summary\n        excerpt\n        body\n        primaryImage {\n          ...ArticleBanner\n        }\n        secondaryLinks {\n          label\n          url\n        }\n        documents {\n          ...DocumentPreview\n        }\n        topics\n        purposes\n        audiences\n        citation\n        createdAt\n      }\n    }\n  }\n": types.BecomeAPublisherPageDocument,
    "\n  fragment DatasetStubResult on DatasetSearchStub {\n    key\n    title\n    excerpt\n    type\n    publishingOrganizationTitle\n  }\n": types.DatasetStubResultFragmentDoc,
    "\n  fragment DatasetResult on Dataset {\n    key\n    title\n    excerpt\n    type\n    publishingOrganizationTitle\n  }\n": types.DatasetResultFragmentDoc,
    "\n  query DatasetInsights(\n    $datasetPredicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $taxonPredicate: Predicate\n    $yearPredicate: Predicate\n    $eventPredicate: Predicate\n    $sitePredicate: Predicate\n  ) {\n    siteOccurrences: occurrenceSearch(predicate: $sitePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    unfiltered: occurrenceSearch(predicate: $datasetPredicate) {\n      documents(size: 0) {\n        total\n      }\n      cardinality {\n        eventId\n      }\n      facet {\n        dwcaExtension {\n          key\n          count\n        }\n      }\n    }\n    images: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 10) {\n        total\n        results {\n          key\n          stillImages {\n            identifier: thumbor(height: 400)\n          }\n        }\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withTaxonMatch: occurrenceSearch(predicate: $taxonPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withYear: occurrenceSearch(predicate: $yearPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withEventId: occurrenceSearch(predicate: $eventPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n  }\n": types.DatasetInsightsDocument,
    "\n  query Dataset($key: ID!) {\n    literatureSearch(gbifDatasetKey: [$key]) {\n      documents {\n        total\n      }\n    }\n    totalTaxa: taxonSearch(datasetKey: [$key], origin: [SOURCE]) {\n      count\n    }\n    accepted: taxonSearch(datasetKey: [$key], origin: [SOURCE], status: [ACCEPTED]) {\n      count\n    }\n    synonyms: taxonSearch(\n      datasetKey: [$key]\n      origin: [SOURCE]\n      status: [SYNONYM, HETEROTYPIC_SYNONYM, PROPARTE_SYNONYM, HOMOTYPIC_SYNONYM]\n    ) {\n      count\n    }\n    dataset(key: $key) {\n      key\n      checklistBankDataset {\n        key\n      }\n      type\n      title\n      created\n      modified\n      deleted\n      duplicateOfDataset {\n        key\n        title\n      }\n      metrics {\n        colCoveragePct\n        nubCoveragePct\n        nubMatchingCount\n        colMatchingCount\n      }\n      pubDate\n      description\n      purpose\n      temporalCoverages\n      logoUrl\n      publishingOrganizationKey\n      publishingOrganizationTitle\n      homepage\n      additionalInfo\n      installation {\n        key\n        title\n        organization {\n          key\n          title\n        }\n      }\n      volatileContributors {\n        key\n        firstName\n        lastName\n        position\n        organization\n        address\n        userId\n        email\n        phone\n        type\n        _highlighted\n        roles\n      }\n      contactsCitation {\n        key\n        abbreviatedName\n        firstName\n        lastName\n        userId\n        roles\n      }\n      geographicCoverages {\n        description\n        boundingBox {\n          minLatitude\n          maxLatitude\n          minLongitude\n          maxLongitude\n          globalCoverage\n        }\n      }\n      taxonomicCoverages {\n        description\n        coverages {\n          scientificName\n          commonName\n          rank {\n            interpreted\n          }\n        }\n      }\n      bibliographicCitations {\n        identifier\n        text\n      }\n      samplingDescription {\n        studyExtent\n        sampling\n        qualityControl\n        methodSteps\n      }\n      dataDescriptions {\n        charset\n        name\n        format\n        formatVersion\n        url\n      }\n      citation {\n        text\n      }\n      license\n      project {\n        title\n        abstract\n        studyAreaDescription\n        designDescription\n        funding\n        contacts {\n          firstName\n          lastName\n\n          organization\n          position\n          roles\n          type\n\n          address\n          city\n          postalCode\n          province\n          country\n\n          homepage\n          email\n          phone\n          userId\n        }\n        identifier\n      }\n      endpoints {\n        key\n        type\n        url\n      }\n      identifiers {\n        key\n        type\n        identifier\n      }\n      doi\n      machineTags {\n        namespace\n        name\n        value\n      }\n      gridded {\n        percent\n      }\n    }\n  }\n": types.DatasetDocument,
    "\n  query DatasetSearch($query: DatasetSearchInput) {\n    datasetSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n  }\n": types.DatasetSearchDocument,
    "\n    query DatasetHostingFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: hostingOrg {\n            name\n            count\n            item: organization {\n              title\n            }\n          }\n        }\n      }\n    }\n  ": types.DatasetHostingFacetDocument,
    "\n    query DatasetProjectFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: projectId {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.DatasetProjectFacetDocument,
    "\n    query DatasetPublishingCountryFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: publishingCountry {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.DatasetPublishingCountryFacetDocument,
    "\n    query DatasetLicenceFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: license {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.DatasetLicenceFacetDocument,
    "\n    query DatasetTypeFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: type {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.DatasetTypeFacetDocument,
    "\n  query HomePage {\n    gbifHome {\n      title\n      summary\n      primaryImage {\n        file {\n          url\n          thumbor\n        }\n        title\n        description\n      }\n      occurrenceIcon {\n        file {\n          url\n          thumbor\n        }\n      }\n      datasetIcon {\n        file {\n          url\n          thumbor\n        }\n      }\n      publisherIcon {\n        file {\n          url\n          thumbor\n        }\n      }\n      literatureIcon {\n        file {\n          url\n          thumbor\n        }\n      }\n      blocks {\n        ...BlockItemDetails\n      }\n    }\n  }\n": types.HomePageDocument,
    "\n  query InstallationDatasets($installation: ID!, $limit: Int!, $offset: Int!) {\n    installation(key: $installation) {\n      dataset(limit: $limit, offset: $offset) {\n        limit\n        offset\n        count\n        endOfRecords\n        results {\n          ...DatasetResult\n        }\n      }\n    }\n  }\n": types.InstallationDatasetsDocument,
    "\n  query Installation($key: ID!) {\n    installation(key: $key) {\n      key\n      title\n      description\n      deleted\n      created\n      homepage\n      type\n      endpoints {\n        type\n        url\n      }\n      organization {\n        key\n        title\n      }\n      contacts {\n        key\n        type\n        firstName\n        lastName\n        email\n        phone\n        homepage\n        organization\n        roles\n        userId\n      }\n\n      dataset(limit: 0) {\n        count\n      }\n    }\n  }\n": types.InstallationDocument,
    "\n  query Institution($key: ID!) {\n    institution(key: $key) {\n      key\n      code\n      name\n      description\n      active\n      email\n      phone\n      homepage\n      catalogUrls\n      alternativeCodes {\n        code\n        description\n      }\n      types\n      apiUrls\n      institutionalGovernances\n      disciplines\n      latitude\n      longitude\n      additionalNames\n      foundingDate\n      numberSpecimens\n      logoUrl\n\n      featuredImageUrl: thumbor(width: 1000, height: 667)\n      featuredImageLicense\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile\n\n      masterSourceMetadata {\n        key\n        source\n        sourceId\n      }\n\n      created\n      deleted\n      modified\n      modifiedBy\n      replacedByInstitution {\n        name\n        key\n      }\n\n      identifiers {\n        identifier\n        type\n      }\n      contactPersons {\n        key\n        firstName\n        lastName\n        phone\n        email\n        taxonomicExpertise\n        primary\n        position\n        userIds {\n          type\n          id\n        }\n      }\n      numberSpecimens\n\n      mailingAddress {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      address {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      collections(limit: 200) {\n        key\n        excerpt\n        code\n        name\n        active\n        numberSpecimens\n        richness\n      }\n    }\n  }\n": types.InstitutionDocument,
    "\n  query InstitutionSummaryMetrics(\n    $key: ID!\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    institution(key: $key) {\n      key\n      collections(limit: 200) {\n        key\n        occurrenceCount\n        richness\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n": types.InstitutionSummaryMetricsDocument,
    "\n  query InstitutionSearch($offset: Int) {\n    list: institutionSearch(\n      offset: $offset\n      limit: 100\n      sortBy: NUMBER_SPECIMENS\n      sortOrder: DESC\n    ) {\n      results {\n        title: name\n        key\n      }\n    }\n  }\n": types.InstitutionSearchDocument,
    "\n  fragment LiteratureResult on Literature {\n    id\n    title\n    literatureType\n    year\n    relevance\n    topics\n    excerpt\n  }\n": types.LiteratureResultFragmentDoc,
    "\n    query LiteratureRelevanceFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: relevance(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.LiteratureRelevanceFacetDocument,
    "\n    query LiteratureTopicsFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: topics(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.LiteratureTopicsFacetDocument,
    "\n    query LiteratureCoverageCountryFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: countriesOfCoverage {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.LiteratureCoverageCountryFacetDocument,
    "\n  query LiteratureSearch($predicate: Predicate, $size: Int, $from: Int) {\n    literatureSearch(predicate: $predicate, size: $size, from: $from) {\n      documents {\n        size\n        from\n        total\n        results {\n          title\n          excerpt\n          countriesOfResearcher\n          countriesOfCoverage\n          year\n          identifiers {\n            doi\n          }\n        }\n      }\n    }\n  }\n": types.LiteratureSearchDocument,
    "\n  fragment NetworkAboutTab on NetworkProse {\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n  }\n": types.NetworkAboutTabFragmentDoc,
    "\n  query NetworkDatasets($network: ID!, $limit: Int!, $offset: Int!) {\n    network(key: $network) {\n      constituents(limit: $limit, offset: $offset) {\n        limit\n        offset\n        count\n        endOfRecords\n        results {\n          ...DatasetResult\n        }\n      }\n    }\n  }\n": types.NetworkDatasetsDocument,
    "\n  query Network($key: ID!, $predicate: Predicate) {\n    network(key: $key) {\n      title\n      deleted\n      created\n      homepage\n      prose {\n        ...NetworkAboutTab\n      }\n      numConstituents\n    }\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    literatureSearch(gbifNetworkKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n": types.NetworkDocument,
    "\n  query NetworkPublishers($network: ID!, $limit: Int!, $offset: Int!) {\n    network(key: $network) {\n      organizations(limit: $limit, offset: $offset) {\n        limit\n        count\n        offset\n        results {\n          key\n          title\n          created\n          country\n          logoUrl\n          excerpt\n        }\n      }\n    }\n  }\n": types.NetworkPublishersDocument,
    "\n  query OccurrenceCluster($key: ID!) {\n    occurrence(key: $key) {\n      related {\n        count\n        currentOccurrence {\n          stub {\n            ...RelatedOccurrenceStub\n          }\n          occurrence {\n            ...RelatedOccurrenceDetails\n          }\n        }\n        relatedOccurrences {\n          reasons\n          stub {\n            ...RelatedOccurrenceStub\n          }\n          occurrence {\n            ...RelatedOccurrenceDetails\n          }\n        }\n      }\n    }\n  }\n": types.OccurrenceClusterDocument,
    "\n  fragment RelatedOccurrenceStub on RelatedOccurrenceStub {\n    gbifId\n    occurrenceID\n    catalogNumber\n    publishingOrgKey\n    publishingOrgName\n    datasetKey\n    scientificName\n  }\n": types.RelatedOccurrenceStubFragmentDoc,
    "\n  fragment RelatedOccurrenceDetails on Occurrence {\n    key\n    basisOfRecord\n    datasetTitle\n    publisherTitle\n    coordinates\n    typeStatus\n    soundCount\n    stillImageCount\n    movingImageCount\n    formattedCoordinates\n    eventDate\n    primaryImage {\n      identifier\n    }\n    gbifClassification {\n      usage {\n        formattedName\n      }\n    }\n    volatile {\n      features {\n        isSequenced\n        isSamplingEvent\n        isTreament\n      }\n    }\n  }\n": types.RelatedOccurrenceDetailsFragmentDoc,
    "\n  query OccurrenceExists($key: ID!) {\n    occurrence(key: $key) {\n      key\n    }\n  }\n": types.OccurrenceExistsDocument,
    "\n  query Occurrence($key: ID!, $language: String!) {\n    occurrence(key: $key) {\n      key\n      coordinates\n      organismName\n      lastCrawled\n      countryCode\n      stateProvince\n      locality\n      eventDate\n      typeStatus\n      references\n      issues\n      basisOfRecord\n      institution {\n        name\n        key\n      }\n      collection {\n        name\n        key\n      }\n      related {\n        count\n      }\n      volatile {\n        globe(sphere: false, land: false, graticule: false) {\n          svg\n          lat\n          lon\n        }\n        features {\n          isSpecimen\n          isTreament\n          isSequenced\n          isClustered\n          isSamplingEvent\n        }\n      }\n      datasetKey\n      datasetTitle\n      publishingOrgKey\n      publisherTitle\n      dataset {\n        citation {\n          text\n        }\n      }\n      institutionCode\n      recordedByIDs {\n        value\n        person(expand: true) {\n          name\n          birthDate\n          deathDate\n          image\n        }\n      }\n      identifiedByIDs {\n        value\n        person(expand: true) {\n          name\n          birthDate\n          deathDate\n          image\n        }\n      }\n\n      extensions {\n        audubon\n        amplification\n        germplasmAccession\n        germplasmMeasurementScore\n        germplasmMeasurementTrait\n        germplasmMeasurementTrial\n        identification\n        identifier\n        image\n        measurementOrFact\n        multimedia\n        reference\n        eolReference\n        resourceRelationship\n        cloning\n        gelImage\n        loan\n        materialSample\n        permit\n        preparation\n        preservation\n        extendedMeasurementOrFact\n        chronometricAge\n        dnaDerivedData\n      }\n\n      gadm\n\n      stillImageCount\n      movingImageCount\n      soundCount\n      stillImages {\n        ...OccurrenceMediaDetails\n      }\n      sounds {\n        ...OccurrenceMediaDetails\n      }\n      movingImages {\n        ...OccurrenceMediaDetails\n      }\n\n      gbifClassification {\n        kingdom\n        kingdomKey\n        phylum\n        phylumKey\n        class\n        classKey\n        order\n        orderKey\n        family\n        familyKey\n        genus\n        genusKey\n        species\n        speciesKey\n        synonym\n        classification {\n          key\n          rank\n          name\n        }\n        usage {\n          rank\n          formattedName\n          key\n        }\n        acceptedUsage {\n          formattedName\n          key\n        }\n      }\n\n      primaryImage {\n        identifier\n      }\n\n      terms {\n        ...OccurrenceTerm\n      }\n\n      scientificName\n      dataset {\n        key\n        title\n      }\n\n      acceptedTaxon {\n        vernacularNames(limit: 1, language: $language) {\n          results {\n            vernacularName\n            source\n          }\n        }\n      }\n    }\n    literatureSearch(gbifOccurrenceKey: [$key]) {\n      documents(size: 100) {\n        results {\n          title\n          abstract\n          authors {\n            firstName\n            lastName\n          }\n          literatureType\n          year\n          identifiers {\n            doi\n          }\n          websites\n        }\n      }\n    }\n  }\n": types.OccurrenceDocument,
    "\n  fragment OccurrenceMediaDetails on MultimediaItem {\n    title\n    type\n    format\n    identifier\n    created\n    creator\n    license\n    publisher\n    references\n    rightsHolder\n    description\n    thumbor(height: 800)\n  }\n": types.OccurrenceMediaDetailsFragmentDoc,
    "\n  fragment OccurrenceTerm on Term {\n    simpleName\n    verbatim\n    value\n    htmlValue\n    remarks\n    issues\n  }\n": types.OccurrenceTermFragmentDoc,
    "\n  query OccurrenceSearch($from: Int, $size: Int, $predicate: Predicate) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          key\n          taxonKey\n          hasTaxonIssues\n          gbifClassification {\n            verbatimScientificName\n            usage {\n              rank\n              formattedName\n              key\n            }\n          }\n          eventDate\n          coordinates\n          formattedCoordinates\n          country\n          countryCode\n          basisOfRecord\n          datasetTitle\n          datasetKey\n          publishingOrgKey\n          publisherTitle\n          catalogNumber\n          recordedBy\n          identifiedBy\n          recordNumber\n          typeStatus\n          preparations\n          collectionCode\n          institution {\n            code\n            name\n            key\n          }\n          collection {\n            code\n            name\n            key\n          }\n          locality\n          higherGeography\n          stateProvince\n          establishmentMeans\n          iucnRedListCategory\n          datasetName\n          stillImageCount\n          movingImageCount\n          soundCount\n          issues\n          volatile {\n            features {\n              isSequenced\n              isTreament\n              isClustered\n              isSamplingEvent\n            }\n          }\n        }\n      }\n    }\n  }\n": types.OccurrenceSearchDocument,
    "\n  query PublisherCounts($key: ID!, $jsonKey: JSON!) {\n    occurrenceSearch(predicate: { type: equals, key: \"publishingOrg\", value: $jsonKey }) {\n      documents(size: 0) {\n        total\n      }\n    }\n    hostedDatasets: datasetSearch(hostingOrg: [$key]) {\n      count\n    }\n    literatureSearch(publishingOrganizationKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n": types.PublisherCountsDocument,
    "\n  query Publisher($key: ID!, $jsonKey: JSON!) {\n    publisher: organization(key: $key) {\n      key\n      title\n      description\n      deleted\n      created\n      homepage\n      numPublishedDatasets\n      logoUrl: thumborLogoUrl(height: 500, width: 500, fitIn: true)\n\n      latitude\n      longitude\n      address\n      city\n      country\n      email\n      phone\n      postalCode\n      province\n\n      endorsingNode {\n        title\n        participant {\n          id\n          name\n          type\n          countryCode\n        }\n      }\n      endorsingNodeKey\n      endorsementApproved\n\n      installation {\n        count\n        results {\n          key\n          title\n        }\n      }\n\n      contacts {\n        key\n        type\n        firstName\n        lastName\n        email\n        phone\n        homepage\n        organization\n        roles\n        userId\n      }\n    }\n    occurrenceSearch(predicate: { type: equals, key: \"publishingOrg\", value: $jsonKey }) {\n      documents(size: 0) {\n        total\n      }\n    }\n    hostedDatasets: datasetSearch(hostingOrg: [$key]) {\n      count\n    }\n    literatureSearch(publishingOrganizationKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n": types.PublisherDocument,
    "\n  fragment PublisherResult on Organization {\n    key\n    title\n    created\n    country\n    logoUrl\n    excerpt\n  }\n": types.PublisherResultFragmentDoc,
    "\n  query PublisherSearch(\n    $country: Country\n    $q: String\n    $isEndorsed: Boolean\n    $limit: Int\n    $offset: Int\n  ) {\n    list: organizationSearch(\n      isEndorsed: $isEndorsed\n      country: $country\n      q: $q\n      offset: $offset\n      limit: $limit\n    ) {\n      limit\n      count\n      offset\n      results {\n        key\n        title\n        created\n        country\n        logoUrl\n        excerpt\n      }\n    }\n  }\n": types.PublisherSearchDocument,
    "\n  query AliasHandling($alias: String!) {\n    resource(alias: $alias) {\n      ...ResourceRedirectDetails\n    }\n  }\n": types.AliasHandlingDocument,
    "\n  fragment ArticlePage on Article {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    documents {\n      ...DocumentPreview\n    }\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n": types.ArticlePageFragmentDoc,
    "\n  fragment ArticleBanner on AssetImage {\n    description\n    title\n    file {\n      url\n      details {\n        image {\n          width\n          height\n        }\n      }\n      normal: thumbor(width: 1200, height: 500)\n      mobile: thumbor(width: 800, height: 400)\n    }\n  }\n": types.ArticleBannerFragmentDoc,
    "\n  fragment DocumentPreview on DocumentAsset {\n    title\n    file {\n      url\n      fileName\n      contentType\n      volatile_documentType\n      details {\n        size\n      }\n    }\n  }\n": types.DocumentPreviewFragmentDoc,
    "\n  fragment FundingOrganisationDetails on FundingOrganisation {\n    id\n    title\n    url\n    logo {\n      title\n      file {\n        url\n      }\n    }\n  }\n": types.FundingOrganisationDetailsFragmentDoc,
    "\n  fragment ProgrammeFundingBanner on Programme {\n    __typename\n    fundingOrganisations {\n      ...FundingOrganisationDetails\n    }\n  }\n": types.ProgrammeFundingBannerFragmentDoc,
    "\n  fragment ProjectFundingBanner on GbifProject {\n    __typename\n    fundsAllocated\n    programme {\n      ...ProgrammeFundingBanner\n    }\n    overrideProgrammeFunding {\n      ...FundingOrganisationDetails\n    }\n  }\n": types.ProjectFundingBannerFragmentDoc,
    "\n  fragment BlockItemDetails on BlockItem {\n    __typename\n    ... on HeaderBlock {\n      id\n      ...HeaderBlockDetails\n    }\n    ... on FeatureBlock {\n      id\n      ...FeatureBlockDetails\n    }\n    ... on FeaturedTextBlock {\n      id\n      ...FeaturedTextBlockDetails\n    }\n    ... on CarouselBlock {\n      id\n      ...CarouselBlockDetails\n    }\n    ... on MediaBlock {\n      id\n      ...MediaBlockDetails\n    }\n    ... on MediaCountBlock {\n      id\n      ...MediaCountBlockDetails\n    }\n    ... on CustomComponentBlock {\n      id\n      ...CustomComponentBlockDetails\n    }\n    ... on TextBlock {\n      id\n      ...TextBlockDetails\n    }\n  }\n": types.BlockItemDetailsFragmentDoc,
    "\n  fragment CarouselBlockDetails on CarouselBlock {\n    __typename\n    id\n    title\n    body\n    backgroundColour\n    features {\n      __typename\n      ... on MediaBlock {\n        ...MediaBlockDetails\n      }\n      ... on MediaCountBlock {\n        ...MediaCountBlockDetails\n      }\n    }\n  }\n": types.CarouselBlockDetailsFragmentDoc,
    "\n  fragment CustomComponentBlockDetails on CustomComponentBlock {\n    id\n    componentType\n    title\n    width\n    backgroundColour\n    settings\n  }\n": types.CustomComponentBlockDetailsFragmentDoc,
    "\n  query OrganizationPreview($key: ID!) {\n    organization(key: $key) {\n      title\n      created\n      contacts {\n        email\n        firstName\n        lastName\n      }\n      description\n    }\n  }\n": types.OrganizationPreviewDocument,
    "\n  query TaiwanNode($identifier: String!) {\n    nodeSearch(identifierType: GBIF_PARTICIPANT, identifier: $identifier) {\n      results {\n        key\n        participantTitle\n        participationStatus\n        title\n      }\n    }\n  }\n": types.TaiwanNodeDocument,
    "\n  query NodeCountry($countryCode: String!) {\n    nodeCountry(countryCode: $countryCode) {\n      key\n      participantTitle\n      participationStatus\n      title\n    }\n  }\n": types.NodeCountryDocument,
    "\n  query NonCountryNode($identifier: String!) {\n    nodeSearch(identifierType: GBIF_PARTICIPANT, identifier: $identifier) {\n      results {\n        key\n        participantTitle\n      }\n    }\n  }\n": types.NonCountryNodeDocument,
    "\n  query Participants {\n    participantSearch(limit: 1000, type: COUNTRY) {\n      endOfRecords\n      results {\n        id\n        name\n        countryCode\n        participationStatus\n      }\n    }\n  }\n": types.ParticipantsDocument,
    "\n  fragment FeatureBlockDetails on FeatureBlock {\n    __typename\n    maxPerRow\n    title\n    hideTitle\n    body\n    backgroundColour\n    features {\n      __typename\n      ... on Feature {\n        id\n        title\n        url\n        primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on News {\n        id\n        title\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on DataUse {\n        id\n        title\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on MeetingEvent {\n        id\n        title\n        start\n        end\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n    }\n  }\n": types.FeatureBlockDetailsFragmentDoc,
    "\n  fragment FeaturedTextBlockDetails on FeaturedTextBlock {\n    __typename\n    id\n    title\n    hideTitle\n    body\n    backgroundColour\n  }\n": types.FeaturedTextBlockDetailsFragmentDoc,
    "\n  fragment HeaderBlockDetails on HeaderBlock {\n    __typename\n    title\n    summary\n    hideTitle\n    primaryImage {\n      ...ArticleBanner\n    }\n  }\n": types.HeaderBlockDetailsFragmentDoc,
    "\n  fragment MediaBlockDetails on MediaBlock {\n    __typename\n    id\n    mediaTitle: title\n    body\n    optionalImg: primaryImage {\n      file {\n        url\n      }\n      title\n      description\n    }\n    reverse\n    subtitle\n    backgroundColour\n    roundImage\n    callToAction {\n      label\n      url\n    }\n  }\n": types.MediaBlockDetailsFragmentDoc,
    "\n  fragment MediaCountBlockDetails on MediaCountBlock {\n    __typename\n    id\n    mediaTitle: title\n    body\n    optionalImg: primaryImage {\n      file {\n        mobile: thumbor(width: 500, height: 400)\n      }\n      title\n      description\n    }\n    reverse\n    subtitle\n    titleCountPart\n    backgroundColour\n    roundImage\n    callToAction {\n      label\n      url\n    }\n  }\n": types.MediaCountBlockDetailsFragmentDoc,
    "\n  fragment TextBlockDetails on TextBlock {\n    title\n    body\n    hideTitle\n    id\n    backgroundColour\n  }\n": types.TextBlockDetailsFragmentDoc,
    "\n  fragment CompositionPage on Composition {\n    id\n    maybeTitle: title\n    summary\n    excerpt\n    blocks {\n      ...BlockItemDetails\n    }\n  }\n": types.CompositionPageFragmentDoc,
    "\n  fragment ProseCardImg on AssetImage {\n    file {\n      mobile: thumbor(width: 500, height: 400)\n    }\n    title\n    description\n  }\n": types.ProseCardImgFragmentDoc,
    "\n  fragment ResourceRedirectDetails on Resource {\n    __typename\n    ... on Article {\n      id\n      title\n      urlAlias\n    }\n    ... on Composition {\n      id\n      maybeTitle: title\n      urlAlias\n    }\n    ... on DataUse {\n      id\n      title\n    }\n    ... on Document {\n      id\n      title\n    }\n    ... on MeetingEvent {\n      id\n      title\n    }\n    ... on News {\n      id\n      title\n    }\n    ... on Programme {\n      id\n      title\n    }\n    ... on GbifProject {\n      id\n      title\n    }\n    ... on Tool {\n      id\n      title\n    }\n  }\n": types.ResourceRedirectDetailsFragmentDoc,
    "\n  fragment DataUsePage on DataUse {\n    id\n    title\n    summary\n    resourceUsed\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    countriesOfCoverage\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n": types.DataUsePageFragmentDoc,
    "\n  fragment DocumentPage on Document {\n    id\n    title\n    createdAt\n    excerpt\n    summary\n    primaryLink {\n      label\n      url\n    }\n    document {\n      title\n      description\n      file {\n        fileName\n        url\n      }\n    }\n    body\n    citation\n  }\n": types.DocumentPageFragmentDoc,
    "\n  fragment EventPage on MeetingEvent {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    location\n    country\n    start\n    end\n    eventLanguage\n    venue\n    allDayEvent\n    documents {\n      ...DocumentPreview\n    }\n  }\n": types.EventPageFragmentDoc,
    "\n  fragment EventResult on MeetingEvent {\n    id\n    title\n    excerpt\n    country\n    location\n    venue\n    start\n    end\n    primaryLink {\n      url\n    }\n    gbifsAttendee\n    allDayEvent\n  }\n": types.EventResultFragmentDoc,
    "\n  fragment NewsPage on News {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    countriesOfCoverage\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n": types.NewsPageFragmentDoc,
    "\n  fragment NewsResult on News {\n    id\n    title\n    excerpt\n    primaryImage {\n      file {\n        url: thumbor(width: 300, height: 150)\n      }\n    }\n    createdAt\n  }\n": types.NewsResultFragmentDoc,
    "\n  fragment ProgrammePage on Programme {\n    title\n    excerpt\n    blocks {\n      ...BlockItemDetails\n    }\n    ...ProgrammeFundingBanner\n  }\n": types.ProgrammePageFragmentDoc,
    "\n  fragment ProjectPage on GbifProject {\n    # Define the values used by this page\n    title\n    excerpt\n    status\n    start\n    end\n    fundsAllocated\n    primaryLink {\n      label\n      url\n    }\n    ...ProjectFundingBanner\n    # The Project About tab uses the data from this loader and defines its own data needs in this fragment\n    ...ProjectAboutTab\n  }\n": types.ProjectPageFragmentDoc,
    "\n    query Project($key: String!) {\n      resource(id: $key) {\n        ...ResourceRedirectDetails\n        ... on GbifProject {\n          ...ProjectPage\n        }\n      }\n      # The Project Datasets tab also uses some data from this loader and defines its own data needs in this fragment\n      ...ProjectDatasetsTab\n    }\n  ": types.ProjectDocument,
    "\n  fragment ProjectAboutTab on GbifProject {\n    projectId\n    id\n    body\n    start\n    end\n    status\n    fundsAllocated\n    matchingFunds\n    grantType\n    purposes\n    leadPartner {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    additionalPartners {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    leadContact\n    fundingOrganisations {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    programme {\n      fundingOrganisations {\n        ...ParticipantOrFundingOrganisationDetails\n      }\n    }\n    overrideProgrammeFunding {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    programme {\n      id\n      title\n    }\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    documents {\n      ...DocumentPreview\n    }\n  }\n": types.ProjectAboutTabFragmentDoc,
    "\n  fragment ParticipantOrFundingOrganisationDetails on ParticipantOrFundingOrganisation {\n    __typename\n    ... on FundingOrganisation {\n      id\n      title\n      url\n    }\n    ... on Participant {\n      id\n      title\n    }\n  }\n": types.ParticipantOrFundingOrganisationDetailsFragmentDoc,
    "\n  fragment ProjectDatasetsTab on Query {\n    gbifProject(id: $key) {\n      projectId\n    }\n    datasetsHelp: help(identifier: \"how-to-link-datasets-to-my-project-page\") {\n      title\n    }\n  }\n": types.ProjectDatasetsTabFragmentDoc,
    "\n  query ProjectDatasets($projectId: ID!) {\n    datasetSearch(projectId: [$projectId], limit: 500) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n  }\n": types.ProjectDatasetsDocument,
    "\n  query ProjectNewsAndEvents($key: String!) {\n    gbifProject(id: $key) {\n      news {\n        __typename\n        createdAt\n        ...NewsResult\n      }\n      events {\n        __typename\n        start\n        ...EventResult\n      }\n    }\n    help(identifier: \"how-to-add-events-to-my-project-page\") {\n      title\n    }\n  }\n": types.ProjectNewsAndEventsDocument,
    "\n  query ResourceRedirect($id: String!) {\n    resource(id: $id) {\n      __typename\n    }\n  }\n": types.ResourceRedirectDocument,
    "\n  fragment ToolPage on Tool {\n    id\n    title\n    summary\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    citation\n    createdAt\n    author\n    rights\n    rightsHolder\n    publicationDate\n  }\n": types.ToolPageFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query vocabularyConcept($language: String, $vocabulary: ID!, $concept: ID!) {\n    concept: vocabularyConcept(vocabulary: $vocabulary, concept: $concept) {\n      uiLabel(language: $language)\n      uiDefinition(language: $language)\n      parents {\n        uiLabel(language: $language)\n      }\n    }\n  }\n"): (typeof documents)["\n  query vocabularyConcept($language: String, $vocabulary: ID!, $concept: ID!) {\n    concept: vocabularyConcept(vocabulary: $vocabulary, concept: $concept) {\n      uiLabel(language: $language)\n      uiDefinition(language: $language)\n      parents {\n        uiLabel(language: $language)\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery globe($lat: Float!, $lon: Float!){\n  globe(cLat: $lat, cLon: $lon) {\n    svg\n  }\n}\n"): (typeof documents)["\nquery globe($lat: Float!, $lon: Float!){\n  globe(cLat: $lat, cLon: $lon) {\n    svg\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HelpText($identifier: String!, $locale: String) {\n    help(identifier: $identifier, locale: $locale) {\n      id\n      identifier\n      title\n      body\n    }\n  }\n"): (typeof documents)["\n  query HelpText($identifier: String!, $locale: String) {\n    help(identifier: $identifier, locale: $locale) {\n      id\n      identifier\n      title\n      body\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HelpTitle($identifier: String!, $locale: String) {\n    help(identifier: $identifier, locale: $locale) {\n      id\n      identifier\n      title\n    }\n  }\n"): (typeof documents)["\n  query HelpTitle($identifier: String!, $locale: String) {\n    help(identifier: $identifier, locale: $locale) {\n      id\n      identifier\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ParticipantSelect($type: NodeType, $participationStatus: ParticipationStatus, $limit: Int) {\n    participantSearch(type: $type, participationStatus: $participationStatus, limit: $limit) {\n      endOfRecords\n      count\n      results {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query ParticipantSelect($type: NodeType, $participationStatus: ParticipationStatus, $limit: Int) {\n    participantSearch(type: $type, participationStatus: $participationStatus, limit: $limit) {\n      endOfRecords\n      count\n      results {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Header {\n    gbifHome {\n      title\n      summary\n      children {\n        id\n        externalLink\n        link\n        title\n        children {\n          id\n          externalLink\n          link\n          title\n          children {\n            id\n            externalLink\n            link\n            title\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Header {\n    gbifHome {\n      title\n      summary\n      children {\n        id\n        externalLink\n        link\n        title\n        children {\n          id\n          externalLink\n          link\n          title\n          children {\n            id\n            externalLink\n            link\n            title\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CollectionResult on CollectionSearchEntity {\n    key\n    name\n    excerpt\n    numberSpecimens\n    institutionName\n    institutionKey\n    featuredImageUrl: thumbor(width: 300, height: 200)\n    featuredImageLicense\n  }\n"): (typeof documents)["\n  fragment CollectionResult on CollectionSearchEntity {\n    key\n    name\n    excerpt\n    numberSpecimens\n    institutionName\n    institutionKey\n    featuredImageUrl: thumbor(width: 300, height: 200)\n    featuredImageLicense\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Collection($key: ID!) {\n    collection(key: $key) {\n      key\n      active\n      code\n      name\n      description\n      taxonomicCoverage\n      geographicCoverage\n      temporalCoverage\n      notes\n      homepage\n\n      numberSpecimens\n      incorporatedCollections\n\n      contentTypes\n\n      personalCollection\n      email\n      phone\n\n      catalogUrls\n      apiUrls\n      preservationTypes\n      accessionStatus\n\n      featuredImageUrl: thumbor(width: 1000, height: 667)\n      featuredImageLicense\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile\n\n      created\n      deleted\n      modified\n      modifiedBy\n      replacedByCollection {\n        name\n        key\n      }\n\n      institutionKey\n      identifiers {\n        key\n        type\n        identifier\n      }\n      contactPersons {\n        key\n        firstName\n        lastName\n        phone\n        email\n        taxonomicExpertise\n        primary\n        position\n        userIds {\n          type\n          id\n        }\n      }\n      alternativeCodes {\n        code\n        description\n      }\n      institution {\n        code\n        name\n        key\n      }\n\n      mailingAddress {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      address {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n    }\n  }\n"): (typeof documents)["\n  query Collection($key: ID!) {\n    collection(key: $key) {\n      key\n      active\n      code\n      name\n      description\n      taxonomicCoverage\n      geographicCoverage\n      temporalCoverage\n      notes\n      homepage\n\n      numberSpecimens\n      incorporatedCollections\n\n      contentTypes\n\n      personalCollection\n      email\n      phone\n\n      catalogUrls\n      apiUrls\n      preservationTypes\n      accessionStatus\n\n      featuredImageUrl: thumbor(width: 1000, height: 667)\n      featuredImageLicense\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile\n\n      created\n      deleted\n      modified\n      modifiedBy\n      replacedByCollection {\n        name\n        key\n      }\n\n      institutionKey\n      identifiers {\n        key\n        type\n        identifier\n      }\n      contactPersons {\n        key\n        firstName\n        lastName\n        phone\n        email\n        taxonomicExpertise\n        primary\n        position\n        userIds {\n          type\n          id\n        }\n      }\n      alternativeCodes {\n        code\n        description\n      }\n      institution {\n        code\n        name\n        key\n      }\n\n      mailingAddress {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      address {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CollectionSummaryMetrics(\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n      cardinality {\n        recordedBy\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query CollectionSummaryMetrics(\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n      cardinality {\n        recordedBy\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CollectionSearch($query: CollectionSearchInput) {\n    collectionSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...CollectionResult\n      }\n    }\n  }\n"): (typeof documents)["\n  query CollectionSearch($query: CollectionSearchInput) {\n    collectionSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...CollectionResult\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BecomeAPublisherPage {\n    resource(alias: \"/become-a-publisher\") {\n      __typename\n      ... on Article {\n        id\n        title\n        summary\n        excerpt\n        body\n        primaryImage {\n          ...ArticleBanner\n        }\n        secondaryLinks {\n          label\n          url\n        }\n        documents {\n          ...DocumentPreview\n        }\n        topics\n        purposes\n        audiences\n        citation\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query BecomeAPublisherPage {\n    resource(alias: \"/become-a-publisher\") {\n      __typename\n      ... on Article {\n        id\n        title\n        summary\n        excerpt\n        body\n        primaryImage {\n          ...ArticleBanner\n        }\n        secondaryLinks {\n          label\n          url\n        }\n        documents {\n          ...DocumentPreview\n        }\n        topics\n        purposes\n        audiences\n        citation\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DatasetStubResult on DatasetSearchStub {\n    key\n    title\n    excerpt\n    type\n    publishingOrganizationTitle\n  }\n"): (typeof documents)["\n  fragment DatasetStubResult on DatasetSearchStub {\n    key\n    title\n    excerpt\n    type\n    publishingOrganizationTitle\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DatasetResult on Dataset {\n    key\n    title\n    excerpt\n    type\n    publishingOrganizationTitle\n  }\n"): (typeof documents)["\n  fragment DatasetResult on Dataset {\n    key\n    title\n    excerpt\n    type\n    publishingOrganizationTitle\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DatasetInsights(\n    $datasetPredicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $taxonPredicate: Predicate\n    $yearPredicate: Predicate\n    $eventPredicate: Predicate\n    $sitePredicate: Predicate\n  ) {\n    siteOccurrences: occurrenceSearch(predicate: $sitePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    unfiltered: occurrenceSearch(predicate: $datasetPredicate) {\n      documents(size: 0) {\n        total\n      }\n      cardinality {\n        eventId\n      }\n      facet {\n        dwcaExtension {\n          key\n          count\n        }\n      }\n    }\n    images: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 10) {\n        total\n        results {\n          key\n          stillImages {\n            identifier: thumbor(height: 400)\n          }\n        }\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withTaxonMatch: occurrenceSearch(predicate: $taxonPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withYear: occurrenceSearch(predicate: $yearPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withEventId: occurrenceSearch(predicate: $eventPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query DatasetInsights(\n    $datasetPredicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $taxonPredicate: Predicate\n    $yearPredicate: Predicate\n    $eventPredicate: Predicate\n    $sitePredicate: Predicate\n  ) {\n    siteOccurrences: occurrenceSearch(predicate: $sitePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    unfiltered: occurrenceSearch(predicate: $datasetPredicate) {\n      documents(size: 0) {\n        total\n      }\n      cardinality {\n        eventId\n      }\n      facet {\n        dwcaExtension {\n          key\n          count\n        }\n      }\n    }\n    images: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 10) {\n        total\n        results {\n          key\n          stillImages {\n            identifier: thumbor(height: 400)\n          }\n        }\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withTaxonMatch: occurrenceSearch(predicate: $taxonPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withYear: occurrenceSearch(predicate: $yearPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withEventId: occurrenceSearch(predicate: $eventPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Dataset($key: ID!) {\n    literatureSearch(gbifDatasetKey: [$key]) {\n      documents {\n        total\n      }\n    }\n    totalTaxa: taxonSearch(datasetKey: [$key], origin: [SOURCE]) {\n      count\n    }\n    accepted: taxonSearch(datasetKey: [$key], origin: [SOURCE], status: [ACCEPTED]) {\n      count\n    }\n    synonyms: taxonSearch(\n      datasetKey: [$key]\n      origin: [SOURCE]\n      status: [SYNONYM, HETEROTYPIC_SYNONYM, PROPARTE_SYNONYM, HOMOTYPIC_SYNONYM]\n    ) {\n      count\n    }\n    dataset(key: $key) {\n      key\n      checklistBankDataset {\n        key\n      }\n      type\n      title\n      created\n      modified\n      deleted\n      duplicateOfDataset {\n        key\n        title\n      }\n      metrics {\n        colCoveragePct\n        nubCoveragePct\n        nubMatchingCount\n        colMatchingCount\n      }\n      pubDate\n      description\n      purpose\n      temporalCoverages\n      logoUrl\n      publishingOrganizationKey\n      publishingOrganizationTitle\n      homepage\n      additionalInfo\n      installation {\n        key\n        title\n        organization {\n          key\n          title\n        }\n      }\n      volatileContributors {\n        key\n        firstName\n        lastName\n        position\n        organization\n        address\n        userId\n        email\n        phone\n        type\n        _highlighted\n        roles\n      }\n      contactsCitation {\n        key\n        abbreviatedName\n        firstName\n        lastName\n        userId\n        roles\n      }\n      geographicCoverages {\n        description\n        boundingBox {\n          minLatitude\n          maxLatitude\n          minLongitude\n          maxLongitude\n          globalCoverage\n        }\n      }\n      taxonomicCoverages {\n        description\n        coverages {\n          scientificName\n          commonName\n          rank {\n            interpreted\n          }\n        }\n      }\n      bibliographicCitations {\n        identifier\n        text\n      }\n      samplingDescription {\n        studyExtent\n        sampling\n        qualityControl\n        methodSteps\n      }\n      dataDescriptions {\n        charset\n        name\n        format\n        formatVersion\n        url\n      }\n      citation {\n        text\n      }\n      license\n      project {\n        title\n        abstract\n        studyAreaDescription\n        designDescription\n        funding\n        contacts {\n          firstName\n          lastName\n\n          organization\n          position\n          roles\n          type\n\n          address\n          city\n          postalCode\n          province\n          country\n\n          homepage\n          email\n          phone\n          userId\n        }\n        identifier\n      }\n      endpoints {\n        key\n        type\n        url\n      }\n      identifiers {\n        key\n        type\n        identifier\n      }\n      doi\n      machineTags {\n        namespace\n        name\n        value\n      }\n      gridded {\n        percent\n      }\n    }\n  }\n"): (typeof documents)["\n  query Dataset($key: ID!) {\n    literatureSearch(gbifDatasetKey: [$key]) {\n      documents {\n        total\n      }\n    }\n    totalTaxa: taxonSearch(datasetKey: [$key], origin: [SOURCE]) {\n      count\n    }\n    accepted: taxonSearch(datasetKey: [$key], origin: [SOURCE], status: [ACCEPTED]) {\n      count\n    }\n    synonyms: taxonSearch(\n      datasetKey: [$key]\n      origin: [SOURCE]\n      status: [SYNONYM, HETEROTYPIC_SYNONYM, PROPARTE_SYNONYM, HOMOTYPIC_SYNONYM]\n    ) {\n      count\n    }\n    dataset(key: $key) {\n      key\n      checklistBankDataset {\n        key\n      }\n      type\n      title\n      created\n      modified\n      deleted\n      duplicateOfDataset {\n        key\n        title\n      }\n      metrics {\n        colCoveragePct\n        nubCoveragePct\n        nubMatchingCount\n        colMatchingCount\n      }\n      pubDate\n      description\n      purpose\n      temporalCoverages\n      logoUrl\n      publishingOrganizationKey\n      publishingOrganizationTitle\n      homepage\n      additionalInfo\n      installation {\n        key\n        title\n        organization {\n          key\n          title\n        }\n      }\n      volatileContributors {\n        key\n        firstName\n        lastName\n        position\n        organization\n        address\n        userId\n        email\n        phone\n        type\n        _highlighted\n        roles\n      }\n      contactsCitation {\n        key\n        abbreviatedName\n        firstName\n        lastName\n        userId\n        roles\n      }\n      geographicCoverages {\n        description\n        boundingBox {\n          minLatitude\n          maxLatitude\n          minLongitude\n          maxLongitude\n          globalCoverage\n        }\n      }\n      taxonomicCoverages {\n        description\n        coverages {\n          scientificName\n          commonName\n          rank {\n            interpreted\n          }\n        }\n      }\n      bibliographicCitations {\n        identifier\n        text\n      }\n      samplingDescription {\n        studyExtent\n        sampling\n        qualityControl\n        methodSteps\n      }\n      dataDescriptions {\n        charset\n        name\n        format\n        formatVersion\n        url\n      }\n      citation {\n        text\n      }\n      license\n      project {\n        title\n        abstract\n        studyAreaDescription\n        designDescription\n        funding\n        contacts {\n          firstName\n          lastName\n\n          organization\n          position\n          roles\n          type\n\n          address\n          city\n          postalCode\n          province\n          country\n\n          homepage\n          email\n          phone\n          userId\n        }\n        identifier\n      }\n      endpoints {\n        key\n        type\n        url\n      }\n      identifiers {\n        key\n        type\n        identifier\n      }\n      doi\n      machineTags {\n        namespace\n        name\n        value\n      }\n      gridded {\n        percent\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DatasetSearch($query: DatasetSearchInput) {\n    datasetSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n  }\n"): (typeof documents)["\n  query DatasetSearch($query: DatasetSearchInput) {\n    datasetSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query DatasetHostingFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: hostingOrg {\n            name\n            count\n            item: organization {\n              title\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query DatasetHostingFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: hostingOrg {\n            name\n            count\n            item: organization {\n              title\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query DatasetProjectFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: projectId {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query DatasetProjectFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: projectId {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query DatasetPublishingCountryFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: publishingCountry {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query DatasetPublishingCountryFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: publishingCountry {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query DatasetLicenceFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: license {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query DatasetLicenceFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: license {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query DatasetTypeFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: type {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query DatasetTypeFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: type {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HomePage {\n    gbifHome {\n      title\n      summary\n      primaryImage {\n        file {\n          url\n          thumbor\n        }\n        title\n        description\n      }\n      occurrenceIcon {\n        file {\n          url\n          thumbor\n        }\n      }\n      datasetIcon {\n        file {\n          url\n          thumbor\n        }\n      }\n      publisherIcon {\n        file {\n          url\n          thumbor\n        }\n      }\n      literatureIcon {\n        file {\n          url\n          thumbor\n        }\n      }\n      blocks {\n        ...BlockItemDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  query HomePage {\n    gbifHome {\n      title\n      summary\n      primaryImage {\n        file {\n          url\n          thumbor\n        }\n        title\n        description\n      }\n      occurrenceIcon {\n        file {\n          url\n          thumbor\n        }\n      }\n      datasetIcon {\n        file {\n          url\n          thumbor\n        }\n      }\n      publisherIcon {\n        file {\n          url\n          thumbor\n        }\n      }\n      literatureIcon {\n        file {\n          url\n          thumbor\n        }\n      }\n      blocks {\n        ...BlockItemDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query InstallationDatasets($installation: ID!, $limit: Int!, $offset: Int!) {\n    installation(key: $installation) {\n      dataset(limit: $limit, offset: $offset) {\n        limit\n        offset\n        count\n        endOfRecords\n        results {\n          ...DatasetResult\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query InstallationDatasets($installation: ID!, $limit: Int!, $offset: Int!) {\n    installation(key: $installation) {\n      dataset(limit: $limit, offset: $offset) {\n        limit\n        offset\n        count\n        endOfRecords\n        results {\n          ...DatasetResult\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Installation($key: ID!) {\n    installation(key: $key) {\n      key\n      title\n      description\n      deleted\n      created\n      homepage\n      type\n      endpoints {\n        type\n        url\n      }\n      organization {\n        key\n        title\n      }\n      contacts {\n        key\n        type\n        firstName\n        lastName\n        email\n        phone\n        homepage\n        organization\n        roles\n        userId\n      }\n\n      dataset(limit: 0) {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query Installation($key: ID!) {\n    installation(key: $key) {\n      key\n      title\n      description\n      deleted\n      created\n      homepage\n      type\n      endpoints {\n        type\n        url\n      }\n      organization {\n        key\n        title\n      }\n      contacts {\n        key\n        type\n        firstName\n        lastName\n        email\n        phone\n        homepage\n        organization\n        roles\n        userId\n      }\n\n      dataset(limit: 0) {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Institution($key: ID!) {\n    institution(key: $key) {\n      key\n      code\n      name\n      description\n      active\n      email\n      phone\n      homepage\n      catalogUrls\n      alternativeCodes {\n        code\n        description\n      }\n      types\n      apiUrls\n      institutionalGovernances\n      disciplines\n      latitude\n      longitude\n      additionalNames\n      foundingDate\n      numberSpecimens\n      logoUrl\n\n      featuredImageUrl: thumbor(width: 1000, height: 667)\n      featuredImageLicense\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile\n\n      masterSourceMetadata {\n        key\n        source\n        sourceId\n      }\n\n      created\n      deleted\n      modified\n      modifiedBy\n      replacedByInstitution {\n        name\n        key\n      }\n\n      identifiers {\n        identifier\n        type\n      }\n      contactPersons {\n        key\n        firstName\n        lastName\n        phone\n        email\n        taxonomicExpertise\n        primary\n        position\n        userIds {\n          type\n          id\n        }\n      }\n      numberSpecimens\n\n      mailingAddress {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      address {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      collections(limit: 200) {\n        key\n        excerpt\n        code\n        name\n        active\n        numberSpecimens\n        richness\n      }\n    }\n  }\n"): (typeof documents)["\n  query Institution($key: ID!) {\n    institution(key: $key) {\n      key\n      code\n      name\n      description\n      active\n      email\n      phone\n      homepage\n      catalogUrls\n      alternativeCodes {\n        code\n        description\n      }\n      types\n      apiUrls\n      institutionalGovernances\n      disciplines\n      latitude\n      longitude\n      additionalNames\n      foundingDate\n      numberSpecimens\n      logoUrl\n\n      featuredImageUrl: thumbor(width: 1000, height: 667)\n      featuredImageLicense\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile\n\n      masterSourceMetadata {\n        key\n        source\n        sourceId\n      }\n\n      created\n      deleted\n      modified\n      modifiedBy\n      replacedByInstitution {\n        name\n        key\n      }\n\n      identifiers {\n        identifier\n        type\n      }\n      contactPersons {\n        key\n        firstName\n        lastName\n        phone\n        email\n        taxonomicExpertise\n        primary\n        position\n        userIds {\n          type\n          id\n        }\n      }\n      numberSpecimens\n\n      mailingAddress {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      address {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      collections(limit: 200) {\n        key\n        excerpt\n        code\n        name\n        active\n        numberSpecimens\n        richness\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query InstitutionSummaryMetrics(\n    $key: ID!\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    institution(key: $key) {\n      key\n      collections(limit: 200) {\n        key\n        occurrenceCount\n        richness\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query InstitutionSummaryMetrics(\n    $key: ID!\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    institution(key: $key) {\n      key\n      collections(limit: 200) {\n        key\n        occurrenceCount\n        richness\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query InstitutionSearch($offset: Int) {\n    list: institutionSearch(\n      offset: $offset\n      limit: 100\n      sortBy: NUMBER_SPECIMENS\n      sortOrder: DESC\n    ) {\n      results {\n        title: name\n        key\n      }\n    }\n  }\n"): (typeof documents)["\n  query InstitutionSearch($offset: Int) {\n    list: institutionSearch(\n      offset: $offset\n      limit: 100\n      sortBy: NUMBER_SPECIMENS\n      sortOrder: DESC\n    ) {\n      results {\n        title: name\n        key\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment LiteratureResult on Literature {\n    id\n    title\n    literatureType\n    year\n    relevance\n    topics\n    excerpt\n  }\n"): (typeof documents)["\n  fragment LiteratureResult on Literature {\n    id\n    title\n    literatureType\n    year\n    relevance\n    topics\n    excerpt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query LiteratureRelevanceFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: relevance(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query LiteratureRelevanceFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: relevance(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query LiteratureTopicsFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: topics(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query LiteratureTopicsFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: topics(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query LiteratureCoverageCountryFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: countriesOfCoverage {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query LiteratureCoverageCountryFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: countriesOfCoverage {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LiteratureSearch($predicate: Predicate, $size: Int, $from: Int) {\n    literatureSearch(predicate: $predicate, size: $size, from: $from) {\n      documents {\n        size\n        from\n        total\n        results {\n          title\n          excerpt\n          countriesOfResearcher\n          countriesOfCoverage\n          year\n          identifiers {\n            doi\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query LiteratureSearch($predicate: Predicate, $size: Int, $from: Int) {\n    literatureSearch(predicate: $predicate, size: $size, from: $from) {\n      documents {\n        size\n        from\n        total\n        results {\n          title\n          excerpt\n          countriesOfResearcher\n          countriesOfCoverage\n          year\n          identifiers {\n            doi\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment NetworkAboutTab on NetworkProse {\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment NetworkAboutTab on NetworkProse {\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NetworkDatasets($network: ID!, $limit: Int!, $offset: Int!) {\n    network(key: $network) {\n      constituents(limit: $limit, offset: $offset) {\n        limit\n        offset\n        count\n        endOfRecords\n        results {\n          ...DatasetResult\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query NetworkDatasets($network: ID!, $limit: Int!, $offset: Int!) {\n    network(key: $network) {\n      constituents(limit: $limit, offset: $offset) {\n        limit\n        offset\n        count\n        endOfRecords\n        results {\n          ...DatasetResult\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Network($key: ID!, $predicate: Predicate) {\n    network(key: $key) {\n      title\n      deleted\n      created\n      homepage\n      prose {\n        ...NetworkAboutTab\n      }\n      numConstituents\n    }\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    literatureSearch(gbifNetworkKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query Network($key: ID!, $predicate: Predicate) {\n    network(key: $key) {\n      title\n      deleted\n      created\n      homepage\n      prose {\n        ...NetworkAboutTab\n      }\n      numConstituents\n    }\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    literatureSearch(gbifNetworkKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NetworkPublishers($network: ID!, $limit: Int!, $offset: Int!) {\n    network(key: $network) {\n      organizations(limit: $limit, offset: $offset) {\n        limit\n        count\n        offset\n        results {\n          key\n          title\n          created\n          country\n          logoUrl\n          excerpt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query NetworkPublishers($network: ID!, $limit: Int!, $offset: Int!) {\n    network(key: $network) {\n      organizations(limit: $limit, offset: $offset) {\n        limit\n        count\n        offset\n        results {\n          key\n          title\n          created\n          country\n          logoUrl\n          excerpt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OccurrenceCluster($key: ID!) {\n    occurrence(key: $key) {\n      related {\n        count\n        currentOccurrence {\n          stub {\n            ...RelatedOccurrenceStub\n          }\n          occurrence {\n            ...RelatedOccurrenceDetails\n          }\n        }\n        relatedOccurrences {\n          reasons\n          stub {\n            ...RelatedOccurrenceStub\n          }\n          occurrence {\n            ...RelatedOccurrenceDetails\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OccurrenceCluster($key: ID!) {\n    occurrence(key: $key) {\n      related {\n        count\n        currentOccurrence {\n          stub {\n            ...RelatedOccurrenceStub\n          }\n          occurrence {\n            ...RelatedOccurrenceDetails\n          }\n        }\n        relatedOccurrences {\n          reasons\n          stub {\n            ...RelatedOccurrenceStub\n          }\n          occurrence {\n            ...RelatedOccurrenceDetails\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RelatedOccurrenceStub on RelatedOccurrenceStub {\n    gbifId\n    occurrenceID\n    catalogNumber\n    publishingOrgKey\n    publishingOrgName\n    datasetKey\n    scientificName\n  }\n"): (typeof documents)["\n  fragment RelatedOccurrenceStub on RelatedOccurrenceStub {\n    gbifId\n    occurrenceID\n    catalogNumber\n    publishingOrgKey\n    publishingOrgName\n    datasetKey\n    scientificName\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RelatedOccurrenceDetails on Occurrence {\n    key\n    basisOfRecord\n    datasetTitle\n    publisherTitle\n    coordinates\n    typeStatus\n    soundCount\n    stillImageCount\n    movingImageCount\n    formattedCoordinates\n    eventDate\n    primaryImage {\n      identifier\n    }\n    gbifClassification {\n      usage {\n        formattedName\n      }\n    }\n    volatile {\n      features {\n        isSequenced\n        isSamplingEvent\n        isTreament\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment RelatedOccurrenceDetails on Occurrence {\n    key\n    basisOfRecord\n    datasetTitle\n    publisherTitle\n    coordinates\n    typeStatus\n    soundCount\n    stillImageCount\n    movingImageCount\n    formattedCoordinates\n    eventDate\n    primaryImage {\n      identifier\n    }\n    gbifClassification {\n      usage {\n        formattedName\n      }\n    }\n    volatile {\n      features {\n        isSequenced\n        isSamplingEvent\n        isTreament\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OccurrenceExists($key: ID!) {\n    occurrence(key: $key) {\n      key\n    }\n  }\n"): (typeof documents)["\n  query OccurrenceExists($key: ID!) {\n    occurrence(key: $key) {\n      key\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Occurrence($key: ID!, $language: String!) {\n    occurrence(key: $key) {\n      key\n      coordinates\n      organismName\n      lastCrawled\n      countryCode\n      stateProvince\n      locality\n      eventDate\n      typeStatus\n      references\n      issues\n      basisOfRecord\n      institution {\n        name\n        key\n      }\n      collection {\n        name\n        key\n      }\n      related {\n        count\n      }\n      volatile {\n        globe(sphere: false, land: false, graticule: false) {\n          svg\n          lat\n          lon\n        }\n        features {\n          isSpecimen\n          isTreament\n          isSequenced\n          isClustered\n          isSamplingEvent\n        }\n      }\n      datasetKey\n      datasetTitle\n      publishingOrgKey\n      publisherTitle\n      dataset {\n        citation {\n          text\n        }\n      }\n      institutionCode\n      recordedByIDs {\n        value\n        person(expand: true) {\n          name\n          birthDate\n          deathDate\n          image\n        }\n      }\n      identifiedByIDs {\n        value\n        person(expand: true) {\n          name\n          birthDate\n          deathDate\n          image\n        }\n      }\n\n      extensions {\n        audubon\n        amplification\n        germplasmAccession\n        germplasmMeasurementScore\n        germplasmMeasurementTrait\n        germplasmMeasurementTrial\n        identification\n        identifier\n        image\n        measurementOrFact\n        multimedia\n        reference\n        eolReference\n        resourceRelationship\n        cloning\n        gelImage\n        loan\n        materialSample\n        permit\n        preparation\n        preservation\n        extendedMeasurementOrFact\n        chronometricAge\n        dnaDerivedData\n      }\n\n      gadm\n\n      stillImageCount\n      movingImageCount\n      soundCount\n      stillImages {\n        ...OccurrenceMediaDetails\n      }\n      sounds {\n        ...OccurrenceMediaDetails\n      }\n      movingImages {\n        ...OccurrenceMediaDetails\n      }\n\n      gbifClassification {\n        kingdom\n        kingdomKey\n        phylum\n        phylumKey\n        class\n        classKey\n        order\n        orderKey\n        family\n        familyKey\n        genus\n        genusKey\n        species\n        speciesKey\n        synonym\n        classification {\n          key\n          rank\n          name\n        }\n        usage {\n          rank\n          formattedName\n          key\n        }\n        acceptedUsage {\n          formattedName\n          key\n        }\n      }\n\n      primaryImage {\n        identifier\n      }\n\n      terms {\n        ...OccurrenceTerm\n      }\n\n      scientificName\n      dataset {\n        key\n        title\n      }\n\n      acceptedTaxon {\n        vernacularNames(limit: 1, language: $language) {\n          results {\n            vernacularName\n            source\n          }\n        }\n      }\n    }\n    literatureSearch(gbifOccurrenceKey: [$key]) {\n      documents(size: 100) {\n        results {\n          title\n          abstract\n          authors {\n            firstName\n            lastName\n          }\n          literatureType\n          year\n          identifiers {\n            doi\n          }\n          websites\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Occurrence($key: ID!, $language: String!) {\n    occurrence(key: $key) {\n      key\n      coordinates\n      organismName\n      lastCrawled\n      countryCode\n      stateProvince\n      locality\n      eventDate\n      typeStatus\n      references\n      issues\n      basisOfRecord\n      institution {\n        name\n        key\n      }\n      collection {\n        name\n        key\n      }\n      related {\n        count\n      }\n      volatile {\n        globe(sphere: false, land: false, graticule: false) {\n          svg\n          lat\n          lon\n        }\n        features {\n          isSpecimen\n          isTreament\n          isSequenced\n          isClustered\n          isSamplingEvent\n        }\n      }\n      datasetKey\n      datasetTitle\n      publishingOrgKey\n      publisherTitle\n      dataset {\n        citation {\n          text\n        }\n      }\n      institutionCode\n      recordedByIDs {\n        value\n        person(expand: true) {\n          name\n          birthDate\n          deathDate\n          image\n        }\n      }\n      identifiedByIDs {\n        value\n        person(expand: true) {\n          name\n          birthDate\n          deathDate\n          image\n        }\n      }\n\n      extensions {\n        audubon\n        amplification\n        germplasmAccession\n        germplasmMeasurementScore\n        germplasmMeasurementTrait\n        germplasmMeasurementTrial\n        identification\n        identifier\n        image\n        measurementOrFact\n        multimedia\n        reference\n        eolReference\n        resourceRelationship\n        cloning\n        gelImage\n        loan\n        materialSample\n        permit\n        preparation\n        preservation\n        extendedMeasurementOrFact\n        chronometricAge\n        dnaDerivedData\n      }\n\n      gadm\n\n      stillImageCount\n      movingImageCount\n      soundCount\n      stillImages {\n        ...OccurrenceMediaDetails\n      }\n      sounds {\n        ...OccurrenceMediaDetails\n      }\n      movingImages {\n        ...OccurrenceMediaDetails\n      }\n\n      gbifClassification {\n        kingdom\n        kingdomKey\n        phylum\n        phylumKey\n        class\n        classKey\n        order\n        orderKey\n        family\n        familyKey\n        genus\n        genusKey\n        species\n        speciesKey\n        synonym\n        classification {\n          key\n          rank\n          name\n        }\n        usage {\n          rank\n          formattedName\n          key\n        }\n        acceptedUsage {\n          formattedName\n          key\n        }\n      }\n\n      primaryImage {\n        identifier\n      }\n\n      terms {\n        ...OccurrenceTerm\n      }\n\n      scientificName\n      dataset {\n        key\n        title\n      }\n\n      acceptedTaxon {\n        vernacularNames(limit: 1, language: $language) {\n          results {\n            vernacularName\n            source\n          }\n        }\n      }\n    }\n    literatureSearch(gbifOccurrenceKey: [$key]) {\n      documents(size: 100) {\n        results {\n          title\n          abstract\n          authors {\n            firstName\n            lastName\n          }\n          literatureType\n          year\n          identifiers {\n            doi\n          }\n          websites\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OccurrenceMediaDetails on MultimediaItem {\n    title\n    type\n    format\n    identifier\n    created\n    creator\n    license\n    publisher\n    references\n    rightsHolder\n    description\n    thumbor(height: 800)\n  }\n"): (typeof documents)["\n  fragment OccurrenceMediaDetails on MultimediaItem {\n    title\n    type\n    format\n    identifier\n    created\n    creator\n    license\n    publisher\n    references\n    rightsHolder\n    description\n    thumbor(height: 800)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OccurrenceTerm on Term {\n    simpleName\n    verbatim\n    value\n    htmlValue\n    remarks\n    issues\n  }\n"): (typeof documents)["\n  fragment OccurrenceTerm on Term {\n    simpleName\n    verbatim\n    value\n    htmlValue\n    remarks\n    issues\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OccurrenceSearch($from: Int, $size: Int, $predicate: Predicate) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          key\n          taxonKey\n          hasTaxonIssues\n          gbifClassification {\n            verbatimScientificName\n            usage {\n              rank\n              formattedName\n              key\n            }\n          }\n          eventDate\n          coordinates\n          formattedCoordinates\n          country\n          countryCode\n          basisOfRecord\n          datasetTitle\n          datasetKey\n          publishingOrgKey\n          publisherTitle\n          catalogNumber\n          recordedBy\n          identifiedBy\n          recordNumber\n          typeStatus\n          preparations\n          collectionCode\n          institution {\n            code\n            name\n            key\n          }\n          collection {\n            code\n            name\n            key\n          }\n          locality\n          higherGeography\n          stateProvince\n          establishmentMeans\n          iucnRedListCategory\n          datasetName\n          stillImageCount\n          movingImageCount\n          soundCount\n          issues\n          volatile {\n            features {\n              isSequenced\n              isTreament\n              isClustered\n              isSamplingEvent\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OccurrenceSearch($from: Int, $size: Int, $predicate: Predicate) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          key\n          taxonKey\n          hasTaxonIssues\n          gbifClassification {\n            verbatimScientificName\n            usage {\n              rank\n              formattedName\n              key\n            }\n          }\n          eventDate\n          coordinates\n          formattedCoordinates\n          country\n          countryCode\n          basisOfRecord\n          datasetTitle\n          datasetKey\n          publishingOrgKey\n          publisherTitle\n          catalogNumber\n          recordedBy\n          identifiedBy\n          recordNumber\n          typeStatus\n          preparations\n          collectionCode\n          institution {\n            code\n            name\n            key\n          }\n          collection {\n            code\n            name\n            key\n          }\n          locality\n          higherGeography\n          stateProvince\n          establishmentMeans\n          iucnRedListCategory\n          datasetName\n          stillImageCount\n          movingImageCount\n          soundCount\n          issues\n          volatile {\n            features {\n              isSequenced\n              isTreament\n              isClustered\n              isSamplingEvent\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PublisherCounts($key: ID!, $jsonKey: JSON!) {\n    occurrenceSearch(predicate: { type: equals, key: \"publishingOrg\", value: $jsonKey }) {\n      documents(size: 0) {\n        total\n      }\n    }\n    hostedDatasets: datasetSearch(hostingOrg: [$key]) {\n      count\n    }\n    literatureSearch(publishingOrganizationKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query PublisherCounts($key: ID!, $jsonKey: JSON!) {\n    occurrenceSearch(predicate: { type: equals, key: \"publishingOrg\", value: $jsonKey }) {\n      documents(size: 0) {\n        total\n      }\n    }\n    hostedDatasets: datasetSearch(hostingOrg: [$key]) {\n      count\n    }\n    literatureSearch(publishingOrganizationKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Publisher($key: ID!, $jsonKey: JSON!) {\n    publisher: organization(key: $key) {\n      key\n      title\n      description\n      deleted\n      created\n      homepage\n      numPublishedDatasets\n      logoUrl: thumborLogoUrl(height: 500, width: 500, fitIn: true)\n\n      latitude\n      longitude\n      address\n      city\n      country\n      email\n      phone\n      postalCode\n      province\n\n      endorsingNode {\n        title\n        participant {\n          id\n          name\n          type\n          countryCode\n        }\n      }\n      endorsingNodeKey\n      endorsementApproved\n\n      installation {\n        count\n        results {\n          key\n          title\n        }\n      }\n\n      contacts {\n        key\n        type\n        firstName\n        lastName\n        email\n        phone\n        homepage\n        organization\n        roles\n        userId\n      }\n    }\n    occurrenceSearch(predicate: { type: equals, key: \"publishingOrg\", value: $jsonKey }) {\n      documents(size: 0) {\n        total\n      }\n    }\n    hostedDatasets: datasetSearch(hostingOrg: [$key]) {\n      count\n    }\n    literatureSearch(publishingOrganizationKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query Publisher($key: ID!, $jsonKey: JSON!) {\n    publisher: organization(key: $key) {\n      key\n      title\n      description\n      deleted\n      created\n      homepage\n      numPublishedDatasets\n      logoUrl: thumborLogoUrl(height: 500, width: 500, fitIn: true)\n\n      latitude\n      longitude\n      address\n      city\n      country\n      email\n      phone\n      postalCode\n      province\n\n      endorsingNode {\n        title\n        participant {\n          id\n          name\n          type\n          countryCode\n        }\n      }\n      endorsingNodeKey\n      endorsementApproved\n\n      installation {\n        count\n        results {\n          key\n          title\n        }\n      }\n\n      contacts {\n        key\n        type\n        firstName\n        lastName\n        email\n        phone\n        homepage\n        organization\n        roles\n        userId\n      }\n    }\n    occurrenceSearch(predicate: { type: equals, key: \"publishingOrg\", value: $jsonKey }) {\n      documents(size: 0) {\n        total\n      }\n    }\n    hostedDatasets: datasetSearch(hostingOrg: [$key]) {\n      count\n    }\n    literatureSearch(publishingOrganizationKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PublisherResult on Organization {\n    key\n    title\n    created\n    country\n    logoUrl\n    excerpt\n  }\n"): (typeof documents)["\n  fragment PublisherResult on Organization {\n    key\n    title\n    created\n    country\n    logoUrl\n    excerpt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PublisherSearch(\n    $country: Country\n    $q: String\n    $isEndorsed: Boolean\n    $limit: Int\n    $offset: Int\n  ) {\n    list: organizationSearch(\n      isEndorsed: $isEndorsed\n      country: $country\n      q: $q\n      offset: $offset\n      limit: $limit\n    ) {\n      limit\n      count\n      offset\n      results {\n        key\n        title\n        created\n        country\n        logoUrl\n        excerpt\n      }\n    }\n  }\n"): (typeof documents)["\n  query PublisherSearch(\n    $country: Country\n    $q: String\n    $isEndorsed: Boolean\n    $limit: Int\n    $offset: Int\n  ) {\n    list: organizationSearch(\n      isEndorsed: $isEndorsed\n      country: $country\n      q: $q\n      offset: $offset\n      limit: $limit\n    ) {\n      limit\n      count\n      offset\n      results {\n        key\n        title\n        created\n        country\n        logoUrl\n        excerpt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AliasHandling($alias: String!) {\n    resource(alias: $alias) {\n      ...ResourceRedirectDetails\n    }\n  }\n"): (typeof documents)["\n  query AliasHandling($alias: String!) {\n    resource(alias: $alias) {\n      ...ResourceRedirectDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArticlePage on Article {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    documents {\n      ...DocumentPreview\n    }\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n"): (typeof documents)["\n  fragment ArticlePage on Article {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    documents {\n      ...DocumentPreview\n    }\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArticleBanner on AssetImage {\n    description\n    title\n    file {\n      url\n      details {\n        image {\n          width\n          height\n        }\n      }\n      normal: thumbor(width: 1200, height: 500)\n      mobile: thumbor(width: 800, height: 400)\n    }\n  }\n"): (typeof documents)["\n  fragment ArticleBanner on AssetImage {\n    description\n    title\n    file {\n      url\n      details {\n        image {\n          width\n          height\n        }\n      }\n      normal: thumbor(width: 1200, height: 500)\n      mobile: thumbor(width: 800, height: 400)\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DocumentPreview on DocumentAsset {\n    title\n    file {\n      url\n      fileName\n      contentType\n      volatile_documentType\n      details {\n        size\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment DocumentPreview on DocumentAsset {\n    title\n    file {\n      url\n      fileName\n      contentType\n      volatile_documentType\n      details {\n        size\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FundingOrganisationDetails on FundingOrganisation {\n    id\n    title\n    url\n    logo {\n      title\n      file {\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment FundingOrganisationDetails on FundingOrganisation {\n    id\n    title\n    url\n    logo {\n      title\n      file {\n        url\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProgrammeFundingBanner on Programme {\n    __typename\n    fundingOrganisations {\n      ...FundingOrganisationDetails\n    }\n  }\n"): (typeof documents)["\n  fragment ProgrammeFundingBanner on Programme {\n    __typename\n    fundingOrganisations {\n      ...FundingOrganisationDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProjectFundingBanner on GbifProject {\n    __typename\n    fundsAllocated\n    programme {\n      ...ProgrammeFundingBanner\n    }\n    overrideProgrammeFunding {\n      ...FundingOrganisationDetails\n    }\n  }\n"): (typeof documents)["\n  fragment ProjectFundingBanner on GbifProject {\n    __typename\n    fundsAllocated\n    programme {\n      ...ProgrammeFundingBanner\n    }\n    overrideProgrammeFunding {\n      ...FundingOrganisationDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment BlockItemDetails on BlockItem {\n    __typename\n    ... on HeaderBlock {\n      id\n      ...HeaderBlockDetails\n    }\n    ... on FeatureBlock {\n      id\n      ...FeatureBlockDetails\n    }\n    ... on FeaturedTextBlock {\n      id\n      ...FeaturedTextBlockDetails\n    }\n    ... on CarouselBlock {\n      id\n      ...CarouselBlockDetails\n    }\n    ... on MediaBlock {\n      id\n      ...MediaBlockDetails\n    }\n    ... on MediaCountBlock {\n      id\n      ...MediaCountBlockDetails\n    }\n    ... on CustomComponentBlock {\n      id\n      ...CustomComponentBlockDetails\n    }\n    ... on TextBlock {\n      id\n      ...TextBlockDetails\n    }\n  }\n"): (typeof documents)["\n  fragment BlockItemDetails on BlockItem {\n    __typename\n    ... on HeaderBlock {\n      id\n      ...HeaderBlockDetails\n    }\n    ... on FeatureBlock {\n      id\n      ...FeatureBlockDetails\n    }\n    ... on FeaturedTextBlock {\n      id\n      ...FeaturedTextBlockDetails\n    }\n    ... on CarouselBlock {\n      id\n      ...CarouselBlockDetails\n    }\n    ... on MediaBlock {\n      id\n      ...MediaBlockDetails\n    }\n    ... on MediaCountBlock {\n      id\n      ...MediaCountBlockDetails\n    }\n    ... on CustomComponentBlock {\n      id\n      ...CustomComponentBlockDetails\n    }\n    ... on TextBlock {\n      id\n      ...TextBlockDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CarouselBlockDetails on CarouselBlock {\n    __typename\n    id\n    title\n    body\n    backgroundColour\n    features {\n      __typename\n      ... on MediaBlock {\n        ...MediaBlockDetails\n      }\n      ... on MediaCountBlock {\n        ...MediaCountBlockDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CarouselBlockDetails on CarouselBlock {\n    __typename\n    id\n    title\n    body\n    backgroundColour\n    features {\n      __typename\n      ... on MediaBlock {\n        ...MediaBlockDetails\n      }\n      ... on MediaCountBlock {\n        ...MediaCountBlockDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CustomComponentBlockDetails on CustomComponentBlock {\n    id\n    componentType\n    title\n    width\n    backgroundColour\n    settings\n  }\n"): (typeof documents)["\n  fragment CustomComponentBlockDetails on CustomComponentBlock {\n    id\n    componentType\n    title\n    width\n    backgroundColour\n    settings\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OrganizationPreview($key: ID!) {\n    organization(key: $key) {\n      title\n      created\n      contacts {\n        email\n        firstName\n        lastName\n      }\n      description\n    }\n  }\n"): (typeof documents)["\n  query OrganizationPreview($key: ID!) {\n    organization(key: $key) {\n      title\n      created\n      contacts {\n        email\n        firstName\n        lastName\n      }\n      description\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TaiwanNode($identifier: String!) {\n    nodeSearch(identifierType: GBIF_PARTICIPANT, identifier: $identifier) {\n      results {\n        key\n        participantTitle\n        participationStatus\n        title\n      }\n    }\n  }\n"): (typeof documents)["\n  query TaiwanNode($identifier: String!) {\n    nodeSearch(identifierType: GBIF_PARTICIPANT, identifier: $identifier) {\n      results {\n        key\n        participantTitle\n        participationStatus\n        title\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NodeCountry($countryCode: String!) {\n    nodeCountry(countryCode: $countryCode) {\n      key\n      participantTitle\n      participationStatus\n      title\n    }\n  }\n"): (typeof documents)["\n  query NodeCountry($countryCode: String!) {\n    nodeCountry(countryCode: $countryCode) {\n      key\n      participantTitle\n      participationStatus\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NonCountryNode($identifier: String!) {\n    nodeSearch(identifierType: GBIF_PARTICIPANT, identifier: $identifier) {\n      results {\n        key\n        participantTitle\n      }\n    }\n  }\n"): (typeof documents)["\n  query NonCountryNode($identifier: String!) {\n    nodeSearch(identifierType: GBIF_PARTICIPANT, identifier: $identifier) {\n      results {\n        key\n        participantTitle\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Participants {\n    participantSearch(limit: 1000, type: COUNTRY) {\n      endOfRecords\n      results {\n        id\n        name\n        countryCode\n        participationStatus\n      }\n    }\n  }\n"): (typeof documents)["\n  query Participants {\n    participantSearch(limit: 1000, type: COUNTRY) {\n      endOfRecords\n      results {\n        id\n        name\n        countryCode\n        participationStatus\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FeatureBlockDetails on FeatureBlock {\n    __typename\n    maxPerRow\n    title\n    hideTitle\n    body\n    backgroundColour\n    features {\n      __typename\n      ... on Feature {\n        id\n        title\n        url\n        primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on News {\n        id\n        title\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on DataUse {\n        id\n        title\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on MeetingEvent {\n        id\n        title\n        start\n        end\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment FeatureBlockDetails on FeatureBlock {\n    __typename\n    maxPerRow\n    title\n    hideTitle\n    body\n    backgroundColour\n    features {\n      __typename\n      ... on Feature {\n        id\n        title\n        url\n        primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on News {\n        id\n        title\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on DataUse {\n        id\n        title\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on MeetingEvent {\n        id\n        title\n        start\n        end\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FeaturedTextBlockDetails on FeaturedTextBlock {\n    __typename\n    id\n    title\n    hideTitle\n    body\n    backgroundColour\n  }\n"): (typeof documents)["\n  fragment FeaturedTextBlockDetails on FeaturedTextBlock {\n    __typename\n    id\n    title\n    hideTitle\n    body\n    backgroundColour\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment HeaderBlockDetails on HeaderBlock {\n    __typename\n    title\n    summary\n    hideTitle\n    primaryImage {\n      ...ArticleBanner\n    }\n  }\n"): (typeof documents)["\n  fragment HeaderBlockDetails on HeaderBlock {\n    __typename\n    title\n    summary\n    hideTitle\n    primaryImage {\n      ...ArticleBanner\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MediaBlockDetails on MediaBlock {\n    __typename\n    id\n    mediaTitle: title\n    body\n    optionalImg: primaryImage {\n      file {\n        url\n      }\n      title\n      description\n    }\n    reverse\n    subtitle\n    backgroundColour\n    roundImage\n    callToAction {\n      label\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment MediaBlockDetails on MediaBlock {\n    __typename\n    id\n    mediaTitle: title\n    body\n    optionalImg: primaryImage {\n      file {\n        url\n      }\n      title\n      description\n    }\n    reverse\n    subtitle\n    backgroundColour\n    roundImage\n    callToAction {\n      label\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MediaCountBlockDetails on MediaCountBlock {\n    __typename\n    id\n    mediaTitle: title\n    body\n    optionalImg: primaryImage {\n      file {\n        mobile: thumbor(width: 500, height: 400)\n      }\n      title\n      description\n    }\n    reverse\n    subtitle\n    titleCountPart\n    backgroundColour\n    roundImage\n    callToAction {\n      label\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment MediaCountBlockDetails on MediaCountBlock {\n    __typename\n    id\n    mediaTitle: title\n    body\n    optionalImg: primaryImage {\n      file {\n        mobile: thumbor(width: 500, height: 400)\n      }\n      title\n      description\n    }\n    reverse\n    subtitle\n    titleCountPart\n    backgroundColour\n    roundImage\n    callToAction {\n      label\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TextBlockDetails on TextBlock {\n    title\n    body\n    hideTitle\n    id\n    backgroundColour\n  }\n"): (typeof documents)["\n  fragment TextBlockDetails on TextBlock {\n    title\n    body\n    hideTitle\n    id\n    backgroundColour\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CompositionPage on Composition {\n    id\n    maybeTitle: title\n    summary\n    excerpt\n    blocks {\n      ...BlockItemDetails\n    }\n  }\n"): (typeof documents)["\n  fragment CompositionPage on Composition {\n    id\n    maybeTitle: title\n    summary\n    excerpt\n    blocks {\n      ...BlockItemDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProseCardImg on AssetImage {\n    file {\n      mobile: thumbor(width: 500, height: 400)\n    }\n    title\n    description\n  }\n"): (typeof documents)["\n  fragment ProseCardImg on AssetImage {\n    file {\n      mobile: thumbor(width: 500, height: 400)\n    }\n    title\n    description\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ResourceRedirectDetails on Resource {\n    __typename\n    ... on Article {\n      id\n      title\n      urlAlias\n    }\n    ... on Composition {\n      id\n      maybeTitle: title\n      urlAlias\n    }\n    ... on DataUse {\n      id\n      title\n    }\n    ... on Document {\n      id\n      title\n    }\n    ... on MeetingEvent {\n      id\n      title\n    }\n    ... on News {\n      id\n      title\n    }\n    ... on Programme {\n      id\n      title\n    }\n    ... on GbifProject {\n      id\n      title\n    }\n    ... on Tool {\n      id\n      title\n    }\n  }\n"): (typeof documents)["\n  fragment ResourceRedirectDetails on Resource {\n    __typename\n    ... on Article {\n      id\n      title\n      urlAlias\n    }\n    ... on Composition {\n      id\n      maybeTitle: title\n      urlAlias\n    }\n    ... on DataUse {\n      id\n      title\n    }\n    ... on Document {\n      id\n      title\n    }\n    ... on MeetingEvent {\n      id\n      title\n    }\n    ... on News {\n      id\n      title\n    }\n    ... on Programme {\n      id\n      title\n    }\n    ... on GbifProject {\n      id\n      title\n    }\n    ... on Tool {\n      id\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DataUsePage on DataUse {\n    id\n    title\n    summary\n    resourceUsed\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    countriesOfCoverage\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n"): (typeof documents)["\n  fragment DataUsePage on DataUse {\n    id\n    title\n    summary\n    resourceUsed\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    countriesOfCoverage\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DocumentPage on Document {\n    id\n    title\n    createdAt\n    excerpt\n    summary\n    primaryLink {\n      label\n      url\n    }\n    document {\n      title\n      description\n      file {\n        fileName\n        url\n      }\n    }\n    body\n    citation\n  }\n"): (typeof documents)["\n  fragment DocumentPage on Document {\n    id\n    title\n    createdAt\n    excerpt\n    summary\n    primaryLink {\n      label\n      url\n    }\n    document {\n      title\n      description\n      file {\n        fileName\n        url\n      }\n    }\n    body\n    citation\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment EventPage on MeetingEvent {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    location\n    country\n    start\n    end\n    eventLanguage\n    venue\n    allDayEvent\n    documents {\n      ...DocumentPreview\n    }\n  }\n"): (typeof documents)["\n  fragment EventPage on MeetingEvent {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    location\n    country\n    start\n    end\n    eventLanguage\n    venue\n    allDayEvent\n    documents {\n      ...DocumentPreview\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment EventResult on MeetingEvent {\n    id\n    title\n    excerpt\n    country\n    location\n    venue\n    start\n    end\n    primaryLink {\n      url\n    }\n    gbifsAttendee\n    allDayEvent\n  }\n"): (typeof documents)["\n  fragment EventResult on MeetingEvent {\n    id\n    title\n    excerpt\n    country\n    location\n    venue\n    start\n    end\n    primaryLink {\n      url\n    }\n    gbifsAttendee\n    allDayEvent\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment NewsPage on News {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    countriesOfCoverage\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n"): (typeof documents)["\n  fragment NewsPage on News {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    countriesOfCoverage\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment NewsResult on News {\n    id\n    title\n    excerpt\n    primaryImage {\n      file {\n        url: thumbor(width: 300, height: 150)\n      }\n    }\n    createdAt\n  }\n"): (typeof documents)["\n  fragment NewsResult on News {\n    id\n    title\n    excerpt\n    primaryImage {\n      file {\n        url: thumbor(width: 300, height: 150)\n      }\n    }\n    createdAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProgrammePage on Programme {\n    title\n    excerpt\n    blocks {\n      ...BlockItemDetails\n    }\n    ...ProgrammeFundingBanner\n  }\n"): (typeof documents)["\n  fragment ProgrammePage on Programme {\n    title\n    excerpt\n    blocks {\n      ...BlockItemDetails\n    }\n    ...ProgrammeFundingBanner\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProjectPage on GbifProject {\n    # Define the values used by this page\n    title\n    excerpt\n    status\n    start\n    end\n    fundsAllocated\n    primaryLink {\n      label\n      url\n    }\n    ...ProjectFundingBanner\n    # The Project About tab uses the data from this loader and defines its own data needs in this fragment\n    ...ProjectAboutTab\n  }\n"): (typeof documents)["\n  fragment ProjectPage on GbifProject {\n    # Define the values used by this page\n    title\n    excerpt\n    status\n    start\n    end\n    fundsAllocated\n    primaryLink {\n      label\n      url\n    }\n    ...ProjectFundingBanner\n    # The Project About tab uses the data from this loader and defines its own data needs in this fragment\n    ...ProjectAboutTab\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query Project($key: String!) {\n      resource(id: $key) {\n        ...ResourceRedirectDetails\n        ... on GbifProject {\n          ...ProjectPage\n        }\n      }\n      # The Project Datasets tab also uses some data from this loader and defines its own data needs in this fragment\n      ...ProjectDatasetsTab\n    }\n  "): (typeof documents)["\n    query Project($key: String!) {\n      resource(id: $key) {\n        ...ResourceRedirectDetails\n        ... on GbifProject {\n          ...ProjectPage\n        }\n      }\n      # The Project Datasets tab also uses some data from this loader and defines its own data needs in this fragment\n      ...ProjectDatasetsTab\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProjectAboutTab on GbifProject {\n    projectId\n    id\n    body\n    start\n    end\n    status\n    fundsAllocated\n    matchingFunds\n    grantType\n    purposes\n    leadPartner {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    additionalPartners {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    leadContact\n    fundingOrganisations {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    programme {\n      fundingOrganisations {\n        ...ParticipantOrFundingOrganisationDetails\n      }\n    }\n    overrideProgrammeFunding {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    programme {\n      id\n      title\n    }\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    documents {\n      ...DocumentPreview\n    }\n  }\n"): (typeof documents)["\n  fragment ProjectAboutTab on GbifProject {\n    projectId\n    id\n    body\n    start\n    end\n    status\n    fundsAllocated\n    matchingFunds\n    grantType\n    purposes\n    leadPartner {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    additionalPartners {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    leadContact\n    fundingOrganisations {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    programme {\n      fundingOrganisations {\n        ...ParticipantOrFundingOrganisationDetails\n      }\n    }\n    overrideProgrammeFunding {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    programme {\n      id\n      title\n    }\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    documents {\n      ...DocumentPreview\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ParticipantOrFundingOrganisationDetails on ParticipantOrFundingOrganisation {\n    __typename\n    ... on FundingOrganisation {\n      id\n      title\n      url\n    }\n    ... on Participant {\n      id\n      title\n    }\n  }\n"): (typeof documents)["\n  fragment ParticipantOrFundingOrganisationDetails on ParticipantOrFundingOrganisation {\n    __typename\n    ... on FundingOrganisation {\n      id\n      title\n      url\n    }\n    ... on Participant {\n      id\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProjectDatasetsTab on Query {\n    gbifProject(id: $key) {\n      projectId\n    }\n    datasetsHelp: help(identifier: \"how-to-link-datasets-to-my-project-page\") {\n      title\n    }\n  }\n"): (typeof documents)["\n  fragment ProjectDatasetsTab on Query {\n    gbifProject(id: $key) {\n      projectId\n    }\n    datasetsHelp: help(identifier: \"how-to-link-datasets-to-my-project-page\") {\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProjectDatasets($projectId: ID!) {\n    datasetSearch(projectId: [$projectId], limit: 500) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProjectDatasets($projectId: ID!) {\n    datasetSearch(projectId: [$projectId], limit: 500) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProjectNewsAndEvents($key: String!) {\n    gbifProject(id: $key) {\n      news {\n        __typename\n        createdAt\n        ...NewsResult\n      }\n      events {\n        __typename\n        start\n        ...EventResult\n      }\n    }\n    help(identifier: \"how-to-add-events-to-my-project-page\") {\n      title\n    }\n  }\n"): (typeof documents)["\n  query ProjectNewsAndEvents($key: String!) {\n    gbifProject(id: $key) {\n      news {\n        __typename\n        createdAt\n        ...NewsResult\n      }\n      events {\n        __typename\n        start\n        ...EventResult\n      }\n    }\n    help(identifier: \"how-to-add-events-to-my-project-page\") {\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ResourceRedirect($id: String!) {\n    resource(id: $id) {\n      __typename\n    }\n  }\n"): (typeof documents)["\n  query ResourceRedirect($id: String!) {\n    resource(id: $id) {\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ToolPage on Tool {\n    id\n    title\n    summary\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    citation\n    createdAt\n    author\n    rights\n    rightsHolder\n    publicationDate\n  }\n"): (typeof documents)["\n  fragment ToolPage on Tool {\n    id\n    title\n    summary\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    citation\n    createdAt\n    author\n    rights\n    rightsHolder\n    publicationDate\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;