/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query vocabularyConcept($language: String, $vocabulary: ID!, $concept: ID!) {\n    concept: vocabularyConcept(vocabulary: $vocabulary, concept: $concept) {\n      uiLabel(language: $language)\n      uiDefinition(language: $language)\n      parents {\n        uiLabel(language: $language)\n      }\n    }\n  }\n": types.VocabularyConceptDocument,
    "\n  query globe($lat: Float!, $lon: Float!) {\n    globe(cLat: $lat, cLon: $lon) {\n      svg\n    }\n  }\n": types.GlobeDocument,
    "\n  query HelpText($identifier: String!, $locale: String) {\n    help(identifier: $identifier, locale: $locale) {\n      id\n      identifier\n      title\n      body\n    }\n  }\n": types.HelpTextDocument,
    "\n  query HelpTitle($identifier: String!, $locale: String) {\n    help(identifier: $identifier, locale: $locale) {\n      id\n      identifier\n      title\n    }\n  }\n": types.HelpTitleDocument,
    "\n  fragment ResultCardImage on AssetImage {\n    file {\n      url: thumbor(width: 180, height: 120)\n    }\n  }\n": types.ResultCardImageFragmentDoc,
    "\n  query ParticipantSelect($type: NodeType, $participationStatus: ParticipationStatus, $limit: Int) {\n    participantSearch(type: $type, participationStatus: $participationStatus, limit: $limit) {\n      endOfRecords\n      count\n      results {\n        id\n        name\n      }\n    }\n  }\n": types.ParticipantSelectDocument,
    "\n  query Header {\n    gbifHome {\n      title\n      summary\n      children {\n        id\n        externalLink\n        link\n        title\n        children {\n          id\n          externalLink\n          link\n          title\n          children {\n            id\n            externalLink\n            link\n            title\n          }\n        }\n      }\n    }\n  }\n": types.HeaderDocument,
    "\n  fragment CollectionResult on CollectionSearchEntity {\n    key\n    name\n    active\n    code\n    excerpt\n    numberSpecimens\n    occurrenceCount\n    institutionName\n    institutionKey\n    featuredImageUrl: thumbor(width: 300, height: 200)\n    featuredImageLicense\n    descriptorMatches {\n      key\n      usageName\n      country\n      individualCount\n      recordedBy\n      typeStatus\n      identifiedBy\n      taxon {\n        kingdom\n        phylum\n        class\n        order\n        family\n        genus\n        species\n      }\n    }\n  }\n": types.CollectionResultFragmentDoc,
    "\n  query DescriptorGroups($key: ID!) {\n    collection(key: $key) {\n      descriptorGroups(limit: 100) {\n        results {\n          key\n          title\n          description\n        }\n      }\n    }\n  }\n": types.DescriptorGroupsDocument,
    "\n  query DescriptorGroup($key: ID!, $collectionKey: ID!, $limit: Int, $offset: Int) {\n    collectionDescriptorGroup(key: $key, collectionKey: $collectionKey) {\n      title\n      description\n      descriptors(limit: $limit, offset: $offset) {\n        count\n        offset\n        limit\n        results {\n          key\n          verbatim\n        }\n      }\n    }\n  }\n": types.DescriptorGroupDocument,
    "\n  query Collection($key: ID!) {\n    collection(key: $key) {\n      key\n      active\n      code\n      name\n      description\n      taxonomicCoverage\n      geographicCoverage\n      temporalCoverage\n      notes\n      homepage\n\n      numberSpecimens\n      incorporatedCollections\n\n      contentTypes\n\n      personalCollection\n      email\n      phone\n\n      catalogUrls\n      apiUrls\n      preservationTypes\n      accessionStatus\n\n      featuredImageUrl: thumbor(width: 1000, height: 667)\n      featuredImageLicense\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile(onlyIfNoImageUrl: true, timeoutMs: 300)\n\n      created\n      deleted\n      modified\n      modifiedBy\n      replacedByCollection {\n        name\n        key\n      }\n\n      institutionKey\n      identifiers {\n        key\n        type\n        identifier\n        primary\n      }\n      contactPersons {\n        key\n        firstName\n        lastName\n        phone\n        email\n        taxonomicExpertise\n        primary\n        position\n        userIds {\n          type\n          id\n        }\n      }\n      alternativeCodes {\n        code\n        description\n      }\n      institution {\n        code\n        name\n        key\n      }\n\n      mailingAddress {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      address {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      descriptorGroups(limit: 0) {\n        count\n      }\n    }\n  }\n": types.CollectionDocument,
    "\n  query CollectionSummaryMetrics(\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n      cardinality {\n        recordedBy\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n": types.CollectionSummaryMetricsDocument,
    "\n  query CollectionFallbackImage($key: ID!) {\n    collection(key: $key) {\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile(\n        onlyIfNoImageUrl: true\n        timeoutMs: 3000\n      )\n    }\n  }\n": types.CollectionFallbackImageDocument,
    "\n  query CollectionSearch($query: CollectionSearchInput) {\n    collectionSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...CollectionResult\n      }\n    }\n  }\n": types.CollectionSearchDocument,
    "\n    query CollectionRecordedByFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: recordedBy(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.CollectionRecordedByFacetDocument,
    "\n    query CollectionCityFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: city(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.CollectionCityFacetDocument,
    "\n    query CollectionContentTypeFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: contentType(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.CollectionContentTypeFacetDocument,
    "\n    query CollectionPreservationTypeFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: preservationType(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.CollectionPreservationTypeFacetDocument,
    "\n    query CollectionTypeStatusFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: typeStatus(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.CollectionTypeStatusFacetDocument,
    "\n  fragment NodeContacts on Node {\n    contacts {\n      key\n      title\n      firstName\n      surname\n      lastName\n\n      organization\n      position\n      roles\n      type\n\n      address\n      city\n      postalCode\n      province\n      country\n\n      homepage\n      email\n      phone\n      userId\n    }\n  }\n": types.NodeContactsFragmentDoc,
    "\n  query CountryDetailAbout($isoCode: Country!) {\n    countryDetail(isoCode: $isoCode) {\n      aboutOccurrenceCount\n      aboutDatasetCount\n      aboutCountryCount\n      aboutPublisherCount\n    }\n  }\n": types.CountryDetailAboutDocument,
    "\n  query CountryDetailFrom($isoCode: Country!) {\n    countryDetail(isoCode: $isoCode) {\n      fromOccurrenceCount\n      fromDatasetCount\n      fromCountryCount\n      fromPublisherCount\n    }\n  }\n": types.CountryDetailFromDocument,
    "\n  query OccurrencesPerKingdom($predicate: Predicate) {\n    occurrenceSearch(predicate: $predicate) {\n      facet {\n        kingdomKey {\n          key\n          count\n        }\n      }\n    }\n  }\n": types.OccurrencesPerKingdomDocument,
    "\n  fragment ParticipantSummary on Node {\n    title\n    gbifRegion\n    homepage\n    participationStatus\n    participant {\n      membershipStart\n      nodeEstablishmentDate\n      participantUrl\n    }\n    headOfDelegation: contacts(type: \"HEAD_OF_DELEGATION\") {\n      key\n      firstName\n      lastName\n    }\n    participantNodeManager: contacts(type: \"NODE_MANAGER\") {\n      key\n      firstName\n      lastName\n    }\n  }\n": types.ParticipantSummaryFragmentDoc,
    "\n  query Participant($countryCode: String!) {\n    nodeCountry(countryCode: $countryCode) {\n      title\n      address\n      gbifRegion\n      participationStatus\n      participant {\n        membershipStart\n        nodeEstablishmentDate\n      }\n      ...ParticipantSummary\n      ...CountryKeyParticipation\n    }\n  }\n": types.ParticipantDocument,
    "\n  query CountProjects($countryCode: JSON!) {\n    resourceSearch(\n      contentType: PROJECT\n      predicate: { key: \"contractCountry\", type: equals, value: $countryCode }\n    ) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n": types.CountProjectsDocument,
    "\n  query CountNews($countryCode: JSON!) {\n    resourceSearch(\n      contentType: NEWS\n      predicate: { key: \"countriesOfCoverage\", type: equals, value: $countryCode }\n    ) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n": types.CountNewsDocument,
    "\n  fragment CountryKeyParticipation on Node {\n    participant {\n      nodeMission\n      nodeFunding\n      nodeHistory\n      nodeStructure\n    }\n    ...NodeContacts\n  }\n": types.CountryKeyParticipationFragmentDoc,
    "\n  query BecomeAPublisherPage {\n    resource(alias: \"/become-a-publisher\") {\n      __typename\n      ... on Article {\n        id\n        title\n        summary\n        excerpt\n        body\n        primaryImage {\n          ...ArticleBanner\n        }\n        secondaryLinks {\n          label\n          url\n        }\n        documents {\n          ...DocumentPreview\n        }\n        topics\n        purposes\n        audiences\n        citation\n        createdAt\n      }\n    }\n  }\n": types.BecomeAPublisherPageDocument,
    "\n  query GbifNetworkPage {\n    resource(alias: \"/the-gbif-network/global\") {\n      __typename\n      ... on Article {\n        id\n        title\n        summary\n        excerpt\n        body\n        secondaryLinks {\n          label\n          url\n        }\n        documents {\n          ...DocumentPreview\n        }\n        topics\n        purposes\n        audiences\n        citation\n        createdAt\n      }\n    }\n  }\n": types.GbifNetworkPageDocument,
    "\n  query GbifNetworkParticipants {\n    nodeSteeringGroup {\n      name\n      title\n      institutionName\n      address\n      addressCountry\n      email\n      role\n      contact {\n        participants {\n          id\n          name\n          gbifRegion\n        }\n      }\n    }\n    nodeSearch(limit: 1000) {\n      results {\n        type\n        country\n        identifiers {\n          type\n          identifier\n        }\n        participant {\n          id\n          participationStatus\n          membershipStart\n          name\n          gbifRegion\n          countryCode\n        }\n        contacts(type: [\"HEAD_OF_DELEGATION\", \"NODE_MANAGER\"]) {\n          firstName\n          lastName\n          type\n        }\n      }\n    }\n  }\n": types.GbifNetworkParticipantsDocument,
    "\n  fragment DatasetStubResult on DatasetSearchStub {\n    key\n    title\n    excerpt\n    type\n    publishingOrganizationTitle\n  }\n": types.DatasetStubResultFragmentDoc,
    "\n  fragment DatasetResult on Dataset {\n    key\n    title\n    excerpt\n    type\n    publishingOrganizationTitle\n  }\n": types.DatasetResultFragmentDoc,
    "\n  query DatasetInsights(\n    $datasetPredicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $taxonPredicate: Predicate\n    $yearPredicate: Predicate\n    $eventPredicate: Predicate\n    $sitePredicate: Predicate\n  ) {\n    siteOccurrences: occurrenceSearch(predicate: $sitePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    unfiltered: occurrenceSearch(predicate: $datasetPredicate) {\n      documents(size: 0) {\n        total\n      }\n      cardinality {\n        eventId\n      }\n      facet {\n        dwcaExtension {\n          key\n          count\n        }\n      }\n    }\n    images: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 10) {\n        total\n        results {\n          key\n          stillImages {\n            identifier: thumbor(height: 400)\n          }\n        }\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withTaxonMatch: occurrenceSearch(predicate: $taxonPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withYear: occurrenceSearch(predicate: $yearPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withEventId: occurrenceSearch(predicate: $eventPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n  }\n": types.DatasetInsightsDocument,
    "\n  query Dataset($key: ID!) {\n    literatureSearch(gbifDatasetKey: [$key]) {\n      documents {\n        total\n      }\n    }\n    totalTaxa: taxonSearch(datasetKey: [$key], origin: [SOURCE]) {\n      count\n    }\n    accepted: taxonSearch(datasetKey: [$key], origin: [SOURCE], status: [ACCEPTED]) {\n      count\n    }\n    synonyms: taxonSearch(\n      datasetKey: [$key]\n      origin: [SOURCE]\n      status: [SYNONYM, HETEROTYPIC_SYNONYM, PROPARTE_SYNONYM, HOMOTYPIC_SYNONYM]\n    ) {\n      count\n    }\n    dataset(key: $key) {\n      key\n      checklistBankDataset {\n        key\n      }\n      type\n      title\n      created\n      modified\n      deleted\n      duplicateOfDataset {\n        key\n        title\n      }\n      metrics {\n        colCoveragePct\n        nubCoveragePct\n        nubMatchingCount\n        colMatchingCount\n      }\n      pubDate\n      description\n      purpose\n      temporalCoverages\n      logoUrl\n      publishingOrganizationKey\n      publishingOrganizationTitle\n      homepage\n      additionalInfo\n      installation {\n        key\n        title\n        organization {\n          key\n          title\n        }\n      }\n      volatileContributors {\n        key\n        firstName\n        lastName\n        position\n        organization\n        address\n        userId\n        email\n        phone\n        type\n        _highlighted\n        roles\n      }\n      contactsCitation {\n        key\n        abbreviatedName\n        firstName\n        lastName\n        userId\n        roles\n      }\n      geographicCoverages {\n        description\n        boundingBox {\n          minLatitude\n          maxLatitude\n          minLongitude\n          maxLongitude\n          globalCoverage\n        }\n      }\n      taxonomicCoverages {\n        description\n        coverages {\n          scientificName\n          commonName\n          rank {\n            interpreted\n          }\n        }\n      }\n      bibliographicCitations {\n        identifier\n        text\n      }\n      samplingDescription {\n        studyExtent\n        sampling\n        qualityControl\n        methodSteps\n      }\n      dataDescriptions {\n        charset\n        name\n        format\n        formatVersion\n        url\n      }\n      citation {\n        text\n      }\n      license\n      project {\n        title\n        abstract\n        studyAreaDescription\n        designDescription\n        funding\n        contacts {\n          firstName\n          lastName\n\n          organization\n          position\n          roles\n          type\n\n          address\n          city\n          postalCode\n          province\n          country\n\n          homepage\n          email\n          phone\n          userId\n        }\n        identifier\n      }\n      endpoints {\n        key\n        type\n        url\n      }\n      identifiers(limit: 50) {\n        key\n        type\n        identifier\n      }\n      doi\n      machineTags {\n        namespace\n        name\n        value\n      }\n      gridded {\n        percent\n      }\n    }\n  }\n": types.DatasetDocument,
    "\n  query DatasetOccurrenceSearch(\n    $from: Int\n    $size: Int\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          dynamicProperties\n        }\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n": types.DatasetOccurrenceSearchDocument,
    "\n  query DatasetSearch($query: DatasetSearchInput) {\n    datasetSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n  }\n": types.DatasetSearchDocument,
    "\n    query DatasetHostingFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: hostingOrg {\n            name\n            count\n            item: organization {\n              title\n            }\n          }\n        }\n      }\n    }\n  ": types.DatasetHostingFacetDocument,
    "\n    query DatasetProjectFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: projectId {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.DatasetProjectFacetDocument,
    "\n    query DatasetPublishingCountryFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: publishingCountry {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.DatasetPublishingCountryFacetDocument,
    "\n    query DatasetLicenceFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: license {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.DatasetLicenceFacetDocument,
    "\n    query DatasetTypeFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: type {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.DatasetTypeFacetDocument,
    "\n  fragment HomePageCountIcons on Home {\n    occurrenceIcon {\n      file {\n        url\n      }\n    }\n    datasetIcon {\n      file {\n        url\n      }\n    }\n    publisherIcon {\n      file {\n        url\n      }\n    }\n    literatureIcon {\n      file {\n        url\n      }\n    }\n  }\n": types.HomePageCountIconsFragmentDoc,
    "\n  query HomePage {\n    gbifHome {\n      title\n      summary\n      primaryImage {\n        file {\n          url\n          thumbor\n        }\n        title\n        description\n      }\n      ...HomePageCountIcons\n      blocks {\n        ...BlockItemDetails\n      }\n    }\n  }\n": types.HomePageDocument,
    "\n  query InstallationDatasets($installation: ID!, $limit: Int!, $offset: Int!) {\n    installation(key: $installation) {\n      dataset(limit: $limit, offset: $offset) {\n        limit\n        offset\n        count\n        endOfRecords\n        results {\n          ...DatasetResult\n        }\n      }\n    }\n  }\n": types.InstallationDatasetsDocument,
    "\n  query Installation($key: ID!) {\n    installation(key: $key) {\n      key\n      title\n      description\n      deleted\n      created\n      homepage\n      type\n      endpoints {\n        type\n        url\n      }\n      organization {\n        key\n        title\n      }\n      contacts {\n        key\n        type\n        firstName\n        lastName\n        email\n        phone\n        homepage\n        organization\n        roles\n        userId\n      }\n\n      dataset(limit: 0) {\n        count\n      }\n    }\n  }\n": types.InstallationDocument,
    "\n  query orphanCollectionCodesForInstitution($predicate: Predicate) {\n    orphaned: occurrenceSearch(predicate: $predicate) {\n      cardinality {\n        collectionCode\n      }\n      facet {\n        collectionCode(size: 10) {\n          key\n          count\n        }\n      }\n    }\n  }\n": types.OrphanCollectionCodesForInstitutionDocument,
    "\n  query Institution($key: ID!, $collectionScope: CollectionSearchInput) {\n    institution(key: $key) {\n      key\n      code\n      name\n      description\n      active\n      email\n      phone\n      homepage\n      catalogUrls\n      alternativeCodes {\n        code\n        description\n      }\n      types\n      apiUrls\n      institutionalGovernances\n      disciplines\n      latitude\n      longitude\n      additionalNames\n      foundingDate\n      numberSpecimens\n      logoUrl\n\n      featuredImageUrl: thumbor(width: 1000, height: 667)\n      featuredImageLicense\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile(onlyIfNoImageUrl: true, timeoutMs: 300)\n\n      masterSourceMetadata {\n        key\n        source\n        sourceId\n      }\n\n      created\n      deleted\n      modified\n      modifiedBy\n      replacedByInstitution {\n        name\n        key\n      }\n\n      identifiers {\n        identifier\n        type\n        primary\n      }\n      contactPersons {\n        key\n        firstName\n        lastName\n        phone\n        email\n        taxonomicExpertise\n        primary\n        position\n        userIds {\n          type\n          id\n        }\n      }\n      numberSpecimens\n\n      mailingAddress {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      address {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      collectionCount(query: $collectionScope)\n    }\n  }\n": types.InstitutionDocument,
    "\n  query InstitutionSummaryMetrics(\n    $key: ID!\n    $collectionScope: CollectionSearchInput\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    institution(key: $key) {\n      key\n      collections(limit: 200, query: $collectionScope) {\n        key\n        excerpt\n        code\n        name\n        active\n        numberSpecimens\n        richness\n        occurrenceCount\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n": types.InstitutionSummaryMetricsDocument,
    "\n  query InstitutionFallbackImage($key: ID!) {\n    institution(key: $key) {\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile(\n        onlyIfNoImageUrl: true\n        timeoutMs: 3000\n      )\n    }\n  }\n": types.InstitutionFallbackImageDocument,
    "\n    query InstitutionCityFacet($query: InstitutionSearchInput, $limit: Int) {\n      search: institutionSearch(query: $query) {\n        facet {\n          field: city(limit: $limit) {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.InstitutionCityFacetDocument,
    "\n    query InstitutionDisciplineFacet($query: InstitutionSearchInput, $limit: Int) {\n      search: institutionSearch(query: $query) {\n        facet {\n          field: discipline(limit: $limit) {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.InstitutionDisciplineFacetDocument,
    "\n    query InstitutionTypeStatusFacet($query: InstitutionSearchInput, $limit: Int) {\n      search: institutionSearch(query: $query) {\n        facet {\n          field: type(limit: $limit) {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.InstitutionTypeStatusFacetDocument,
    "\n  fragment InstitutionResult on InstitutionSearchEntity {\n    key\n    name\n    active\n    code\n    excerpt\n    country\n    mailingCountry\n    collectionCount(query: $collectionScope)\n    numberSpecimens\n    occurrenceCount\n    featuredImageUrl: thumbor(width: 300, height: 200)\n    featuredImageLicense\n  }\n": types.InstitutionResultFragmentDoc,
    "\n  query InstitutionSearch($query: InstitutionSearchInput, $collectionScope: CollectionSearchInput) {\n    institutionSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...InstitutionResult\n      }\n    }\n  }\n": types.InstitutionSearchDocument,
    "\n  fragment LiteratureResult on Literature {\n    id\n    title\n    literatureType\n    year\n    relevance\n    topics\n    excerpt\n  }\n": types.LiteratureResultFragmentDoc,
    "\n    query LiteratureCoverageCountryFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: countriesOfCoverage {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.LiteratureCoverageCountryFacetDocument,
    "\n    query LiteratureRelevanceFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: relevance(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.LiteratureRelevanceFacetDocument,
    "\n    query LiteratureTopicsFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: topics(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.LiteratureTopicsFacetDocument,
    "\n    query LiteratureOpenAccessFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: openAccess {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.LiteratureOpenAccessFacetDocument,
    "\n    query LiteraturePeerReviewFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: peerReview {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.LiteraturePeerReviewFacetDocument,
    "\n    query LiteraturePublisherFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: publisher(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.LiteraturePublisherFacetDocument,
    "\n    query LiteratureSourceFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: source(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.LiteratureSourceFacetDocument,
    "\n    query LiteratureGbifProgrammeAcronymFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: gbifProgrammeAcronym(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.LiteratureGbifProgrammeAcronymFacetDocument,
    "\n  query LiteratureListSearch($predicate: Predicate, $size: Int, $from: Int) {\n    literatureSearch(predicate: $predicate, size: $size, from: $from) {\n      documents {\n        size\n        from\n        total\n        results {\n          id\n          title\n          excerpt\n          countriesOfResearcher\n          countriesOfCoverage\n          year\n          identifiers {\n            doi\n          }\n        }\n      }\n    }\n  }\n": types.LiteratureListSearchDocument,
    "\n  query LiteratureTableSearch($from: Int, $size: Int, $predicate: Predicate) {\n    literatureSearch(predicate: $predicate) {\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          id\n          title\n          abstract\n          authors {\n            firstName\n            lastName\n          }\n          countriesOfCoverage\n          countriesOfResearcher\n          day\n          month\n          year\n          gbifRegion\n          identifiers {\n            doi\n          }\n          keywords\n          language\n          literatureType\n          openAccess\n          peerReview\n          publisher\n          relevance\n          source\n          tags\n          topics\n          websites\n        }\n      }\n    }\n  }\n": types.LiteratureTableSearchDocument,
    "\n  fragment NetworkAboutTab on NetworkProse {\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n  }\n": types.NetworkAboutTabFragmentDoc,
    "\n  query NetworkDatasets($network: ID!, $limit: Int!, $offset: Int!) {\n    network(key: $network) {\n      constituents(limit: $limit, offset: $offset) {\n        limit\n        offset\n        count\n        endOfRecords\n        results {\n          ...DatasetResult\n        }\n      }\n    }\n  }\n": types.NetworkDatasetsDocument,
    "\n  query Network($key: ID!, $predicate: Predicate) {\n    network(key: $key) {\n      key\n      title\n      deleted\n      created\n      homepage\n      prose {\n        ...NetworkAboutTab\n      }\n      numConstituents\n    }\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    literatureSearch(gbifNetworkKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n": types.NetworkDocument,
    "\n  query NetworkPublishers($network: ID!, $limit: Int!, $offset: Int!) {\n    network(key: $network) {\n      organizations(limit: $limit, offset: $offset) {\n        limit\n        count\n        offset\n        results {\n          key\n          title\n          created\n          country\n          logoUrl\n          excerpt\n        }\n      }\n    }\n  }\n": types.NetworkPublishersDocument,
    "\n  fragment NetworkProseResult on NetworkProse {\n    id\n    title\n    excerpt\n    networkKey\n    primaryImage {\n      ...ResultCardImage\n    }\n    createdAt\n  }\n": types.NetworkProseResultFragmentDoc,
    "\n  query DownloadKey($key: ID!) {\n    download(key: $key) {\n      created\n      doi\n      downloadLink\n      eraseAfter\n      key\n      license\n      modified\n      numberDatasets\n      numberOrganizations\n      numberPublishingCountries\n      request {\n        predicate\n        sql: sqlFormatted\n        format\n        description\n        gbifMachineDescription\n      }\n      size\n      status\n      totalRecords\n    }\n    datasetsByDownload(key: $key, limit: 50, offset: 0) {\n      limit\n      offset\n      endOfRecords\n      count\n      results {\n        datasetKey\n        datasetTitle\n        numberRecords\n      }\n    }\n  }\n": types.DownloadKeyDocument,
    "\n  query SlowDownloadKey($key: ID!) {\n    literatureSearch(gbifDownloadKey: [$key], size: 0) {\n      documents {\n        total\n      }\n    }\n  }\n": types.SlowDownloadKeyDocument,
    "\n  query DownloadKeyDatasets($key: ID!, $limit: Int, $offset: Int) {\n    datasetsByDownload(key: $key, limit: $limit, offset: $offset) {\n      limit\n      offset\n      endOfRecords\n      count\n      results {\n        datasetKey\n        datasetTitle\n        numberRecords\n      }\n    }\n  }\n": types.DownloadKeyDatasetsDocument,
    "\n  query PersonKey($type: String!, $value: String!) {\n    person(type: $type, value: $value) {\n      name\n      birthDate\n      deathDate\n      image\n    }\n  }\n": types.PersonKeyDocument,
    "\n  query OccurrenceCluster($key: ID!) {\n    occurrence(key: $key) {\n      related {\n        count\n        currentOccurrence {\n          stub {\n            ...RelatedOccurrenceStub\n          }\n          occurrence {\n            ...RelatedOccurrenceDetails\n          }\n        }\n        relatedOccurrences {\n          reasons\n          stub {\n            ...RelatedOccurrenceStub\n          }\n          occurrence {\n            ...RelatedOccurrenceDetails\n          }\n        }\n      }\n    }\n  }\n": types.OccurrenceClusterDocument,
    "\n  fragment RelatedOccurrenceStub on RelatedOccurrenceStub {\n    gbifId\n    occurrenceID\n    catalogNumber\n    publishingOrgKey\n    publishingOrgName\n    datasetKey\n    scientificName\n  }\n": types.RelatedOccurrenceStubFragmentDoc,
    "\n  fragment RelatedOccurrenceDetails on Occurrence {\n    key\n    basisOfRecord\n    datasetTitle\n    publisherTitle\n    coordinates\n    typeStatus\n    soundCount\n    stillImageCount\n    movingImageCount\n    formattedCoordinates\n    eventDate\n    primaryImage {\n      identifier\n    }\n    gbifClassification {\n      usage {\n        formattedName(useFallback: true)\n      }\n    }\n    volatile {\n      features {\n        isSequenced\n        isSamplingEvent\n        isTreament\n      }\n    }\n  }\n": types.RelatedOccurrenceDetailsFragmentDoc,
    "\n  query OccurrenceExists($key: ID!) {\n    occurrence(key: $key) {\n      key\n    }\n  }\n": types.OccurrenceExistsDocument,
    "\n  query Occurrence($key: ID!) {\n    occurrence(key: $key) {\n      key\n      coordinates\n      organismName\n      lastCrawled\n      countryCode\n      stateProvince\n      locality\n      eventDate\n      typeStatus\n      references\n      issues\n      basisOfRecord\n      dynamicProperties\n      institutionKey\n      collectionKey\n      isInCluster\n      volatile {\n        globe(sphere: false, land: false, graticule: false) {\n          svg\n          lat\n          lon\n        }\n        features {\n          isSpecimen\n          isTreament\n          isSequenced\n          isClustered\n          isSamplingEvent\n          firstIIIF\n        }\n      }\n      datasetKey\n      datasetTitle\n      publishingOrgKey\n      publisherTitle\n      dataset {\n        citation {\n          text\n        }\n      }\n      institutionCode\n\n      extensions {\n        audubon\n        amplification\n        germplasmAccession\n        germplasmMeasurementScore\n        germplasmMeasurementTrait\n        germplasmMeasurementTrial\n        identification\n        identifier\n        image\n        measurementOrFact\n        multimedia\n        reference\n        eolReference\n        resourceRelationship\n        cloning\n        gelImage\n        loan\n        materialSample\n        permit\n        preparation\n        preservation\n        extendedMeasurementOrFact\n        chronometricAge\n        dnaDerivedData\n      }\n\n      gadm\n\n      stillImageCount\n      movingImageCount\n      soundCount\n      stillImages {\n        ...OccurrenceMediaDetails\n      }\n      sounds {\n        ...OccurrenceMediaDetails\n      }\n      movingImages {\n        ...OccurrenceMediaDetails\n      }\n\n      gbifClassification {\n        kingdom\n        kingdomKey\n        phylum\n        phylumKey\n        class\n        classKey\n        order\n        orderKey\n        family\n        familyKey\n        genus\n        genusKey\n        species\n        speciesKey\n        synonym\n        classification {\n          key\n          rank\n          name\n        }\n        usage {\n          rank\n          formattedName(useFallback: true)\n          key\n        }\n        acceptedUsage {\n          formattedName(useFallback: true)\n          key\n        }\n      }\n      primaryImage {\n        identifier\n      }\n      terms {\n        ...OccurrenceTerm\n      }\n      scientificName\n      recordedByIDs {\n        type\n        value\n      }\n      identifiedByIDs {\n        type\n        value\n      }\n    }\n  }\n": types.OccurrenceDocument,
    "\n  query SlowOccurrenceKey($key: ID!, $language: String!, $source: String) {\n    occurrence(key: $key) {\n      key\n      institution {\n        name\n      }\n      collection {\n        name\n      }\n\n      acceptedTaxon {\n        vernacularNames(limit: 1, language: $language, source: $source) {\n          results {\n            vernacularName\n            source\n          }\n        }\n      }\n    }\n    literatureSearch(gbifOccurrenceKey: [$key]) {\n      documents(size: 100) {\n        results {\n          title\n          abstract\n          authors {\n            firstName\n            lastName\n          }\n          literatureType\n          year\n          identifiers {\n            doi\n          }\n          websites\n        }\n      }\n    }\n  }\n": types.SlowOccurrenceKeyDocument,
    "\n  fragment OccurrenceMediaDetails on MultimediaItem {\n    title\n    type\n    format\n    identifier\n    created\n    creator\n    license\n    publisher\n    references\n    rightsHolder\n    description\n    thumbor(height: 800)\n  }\n": types.OccurrenceMediaDetailsFragmentDoc,
    "\n  fragment OccurrenceTerm on Term {\n    simpleName\n    verbatim\n    value\n    htmlValue\n    remarks\n    issues\n  }\n": types.OccurrenceTermFragmentDoc,
    "\n    query OccurrenceIsInClusterFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: isInCluster(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceIsInClusterFacetDocument,
    "\n    query OccurrenceisSequencedFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: isSequenced(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceisSequencedFacetDocument,
    "\n    query OccurrenceLicenseFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: license {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceLicenseFacetDocument,
    "\n    query OccurrenceBoRFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: basisOfRecord {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceBoRFacetDocument,
    "\n    query OccurrenceMediaFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: mediaType {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceMediaFacetDocument,
    "\n    query OccurrenceMonthFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: month(size: 12) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceMonthFacetDocument,
    "\n    query OccurrenceContinentFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: continent {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceContinentFacetDocument,
    "\n    query OccurrenceProtocolFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: protocol(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceProtocolFacetDocument,
    "\n    query OccurrenceDwcaExtensionFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: dwcaExtension(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceDwcaExtensionFacetDocument,
    "\n    query OccurrenceIucnFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: iucnRedListCategory(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceIucnFacetDocument,
    "\n    query OccurrenceIssueFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: issue(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceIssueFacetDocument,
    "\n    query OccurrenceOccurrenceStatusFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: occurrenceStatus(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceOccurrenceStatusFacetDocument,
    "\n    query OccurrenceTypeStatusFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: typeStatus(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceTypeStatusFacetDocument,
    "\n    query OccurrenceProjectIdFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: projectId(size: 50) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceProjectIdFacetDocument,
    "\n    query OccurrenceOrganismIdFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: organismId(size: 10) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrenceOrganismIdFacetDocument,
    "\n    query OccurrencehigherGeographyFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: higherGeography(size: 10) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.OccurrencehigherGeographyFacetDocument,
    "\n  query occurrenceMediaSearch($predicate: Predicate, $size: Int, $from: Int) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: $size, from: $from) {\n        total\n        size\n        from\n        results {\n          key\n          countryCode\n          locality\n          basisOfRecord\n          scientificName\n          typeStatus\n          eventDate\n          gbifClassification {\n            usage {\n              formattedName(useFallback: true)\n            }\n          }\n          primaryImage {\n            identifier: thumbor(height: 400)\n          }\n          formattedCoordinates\n          volatile {\n            features {\n              isSpecimen\n            }\n          }\n        }\n      }\n    }\n  }\n": types.OccurrenceMediaSearchDocument,
    "\n  query OccurrenceSearch(\n    $from: Int\n    $size: Int\n    $predicate: Predicate\n    $language: String\n    $sortBy: OccurrenceSortBy\n    $sortOrder: SortOrder\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(from: $from, size: $size, sortBy: $sortBy, sortOrder: $sortOrder) {\n        from\n        size\n        total\n        results {\n          key\n          taxonKey\n          hasTaxonIssues\n          gbifClassification {\n            verbatimScientificName\n            usage {\n              rank\n              formattedName(useFallback: true)\n              key\n            }\n          }\n          taxon {\n            canonicalName\n          }\n          primaryImage {\n            thumbor(width: 80)\n          }\n          eventDate\n          year\n          coordinates\n          formattedCoordinates\n          country\n          countryCode\n          basisOfRecord\n          datasetTitle\n          datasetKey\n          publishingOrgKey\n          publisherTitle\n          catalogNumber\n          recordedBy\n          identifiedBy\n          recordNumber\n          typeStatus\n          preparations\n          institutionCode\n          institutionKey\n          institution {\n            code\n            name\n          }\n          collectionCode\n          collectionKey\n          collection {\n            code\n            name\n          }\n          locality\n          higherGeography\n          stateProvince\n          establishmentMeans\n          iucnRedListCategory\n          stillImageCount\n          movingImageCount\n          soundCount\n          issues(types: [\"WARNING\", \"ERROR\"])\n          volatile {\n            features {\n              isSequenced\n              isTreament\n              isClustered\n              isSamplingEvent\n            }\n            vernacularNames(language: $language, limit: 1) {\n              results {\n                vernacularName\n                source\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.OccurrenceSearchDocument,
    "\n  query OmniSearch(\n    $resourcePredicate: Predicate\n    $resourceKeywordPredicate: Predicate\n    $taxonQuery: TaxonSearchInput\n    $datasetQuery: DatasetSearchInput\n    $q: String!\n  ) {\n    organizationSearch(isEndorsed: true, q: $q, limit: 3) {\n      limit\n      count\n      offset\n      results {\n        key\n        title\n        created\n        country\n        logoUrl\n        excerpt\n      }\n    }\n    datasetSearch(query: $datasetQuery) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n    taxonSearch(query: $taxonQuery, limit: 3) {\n      count\n      offset\n      endOfRecords\n      results {\n        ...TaxonResult\n        acceptedTaxon {\n          ...TaxonResult\n        }\n      }\n    }\n\n    resourceSearch(predicate: $resourcePredicate) {\n      documents(size: 5) {\n        from\n        size\n        total\n        results {\n          __typename\n          ... on Composition {\n            ...CompositionResult\n          }\n          ... on Article {\n            ...ArticleResult\n          }\n          ... on News {\n            ...NewsResult\n          }\n          ... on DataUse {\n            ...DataUseResult\n          }\n          ... on MeetingEvent {\n            ...EventResult\n          }\n          ... on GbifProject {\n            ...ProjectResult\n          }\n          ... on Programme {\n            ...ProgrammeResult\n          }\n          ... on Tool {\n            ...ToolResult\n          }\n          ... on Document {\n            ...DocumentResult\n          }\n          ... on NetworkProse {\n            ...NetworkProseResult\n          }\n        }\n      }\n    }\n\n    resourceKeywordSearch: resourceSearch(predicate: $resourceKeywordPredicate) {\n      documents(size: 5) {\n        from\n        size\n        total\n        results {\n          __typename\n          ... on Composition {\n            ...CompositionResult\n          }\n          ... on Article {\n            ...ArticleResult\n          }\n          ... on News {\n            ...NewsResult\n          }\n          ... on DataUse {\n            ...DataUseResult\n          }\n          ... on MeetingEvent {\n            ...EventResult\n          }\n          ... on GbifProject {\n            ...ProjectResult\n          }\n          ... on Programme {\n            ...ProgrammeResult\n          }\n          ... on Tool {\n            ...ToolResult\n          }\n          ... on Document {\n            ...DocumentResult\n          }\n          ... on NetworkProse {\n            ...NetworkProseResult\n          }\n        }\n      }\n    }\n  }\n": types.OmniSearchDocument,
    "\n  query PublisherCounts($key: ID!, $jsonKey: JSON!) {\n    occurrenceSearch(predicate: { type: equals, key: \"publishingOrg\", value: $jsonKey }) {\n      documents(size: 0) {\n        total\n      }\n    }\n    hostedDatasets: datasetSearch(hostingOrg: [$key]) {\n      count\n    }\n    literatureSearch(publishingOrganizationKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n": types.PublisherCountsDocument,
    "\n  query Publisher($key: ID!) {\n    publisher: organization(key: $key) {\n      key\n      title\n      description\n      deleted\n      created\n      homepage\n      numPublishedDatasets\n      logoUrl: thumborLogoUrl(height: 500, width: 500, fitIn: true)\n\n      latitude\n      longitude\n      address\n      city\n      country\n      email\n      phone\n      postalCode\n      province\n\n      endorsingNode {\n        title\n        participant {\n          id\n          name\n          type\n          countryCode\n        }\n      }\n      endorsingNodeKey\n      endorsementApproved\n\n      installation {\n        count\n        results {\n          key\n          title\n        }\n      }\n\n      contacts {\n        key\n        type\n        firstName\n        lastName\n        email\n        phone\n        homepage\n        organization\n        roles\n        userId\n      }\n    }\n  }\n": types.PublisherDocument,
    "\n  query PublisherStats($key: ID!, $jsonKey: JSON!) {\n    occurrenceSearch(predicate: { type: equals, key: \"publishingOrg\", value: $jsonKey }) {\n      documents(size: 0) {\n        total\n      }\n    }\n    hostedDatasets: datasetSearch(hostingOrg: [$key]) {\n      count\n    }\n    literatureSearch(publishingOrganizationKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n": types.PublisherStatsDocument,
    "\n  fragment PublisherResult on Organization {\n    key\n    title\n    created\n    country\n    logoUrl\n    excerpt\n  }\n": types.PublisherResultFragmentDoc,
    "\n  query PublisherSearch(\n    $country: Country\n    $q: String\n    $isEndorsed: Boolean\n    $limit: Int\n    $offset: Int\n  ) {\n    list: organizationSearch(\n      isEndorsed: $isEndorsed\n      country: $country\n      q: $q\n      offset: $offset\n      limit: $limit\n    ) {\n      limit\n      count\n      offset\n      results {\n        key\n        title\n        created\n        country\n        logoUrl\n        excerpt\n      }\n    }\n  }\n": types.PublisherSearchDocument,
    "\n  query AliasHandling($alias: String!) {\n    resource(alias: $alias) {\n      ...ResourceRedirectDetails\n    }\n  }\n": types.AliasHandlingDocument,
    "\n  fragment ArticlePage on Article {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    documents {\n      ...DocumentPreview\n    }\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n": types.ArticlePageFragmentDoc,
    "\n  fragment ArticleResult on Article {\n    id\n    title\n    excerpt\n    urlAlias\n    primaryImage {\n      ...ResultCardImage\n    }\n  }\n": types.ArticleResultFragmentDoc,
    "\n  fragment ArticleBanner on AssetImage {\n    description\n    title\n    file {\n      url\n      details {\n        image {\n          width\n          height\n        }\n      }\n      normal: thumbor(width: 1200, height: 500)\n      mobile: thumbor(width: 800, height: 400)\n    }\n  }\n": types.ArticleBannerFragmentDoc,
    "\n  fragment DocumentPreview on DocumentAsset {\n    title\n    file {\n      url\n      fileName\n      contentType\n      volatile_documentType\n      details {\n        size\n      }\n    }\n  }\n": types.DocumentPreviewFragmentDoc,
    "\n  fragment FundingOrganisationDetails on FundingOrganisation {\n    id\n    title\n    url\n    logo {\n      title\n      file {\n        url\n      }\n    }\n  }\n": types.FundingOrganisationDetailsFragmentDoc,
    "\n  fragment ProgrammeFundingBanner on Programme {\n    __typename\n    fundingOrganisations {\n      ...FundingOrganisationDetails\n    }\n  }\n": types.ProgrammeFundingBannerFragmentDoc,
    "\n  fragment ProjectFundingBanner on GbifProject {\n    __typename\n    fundsAllocated\n    programme {\n      ...ProgrammeFundingBanner\n    }\n    overrideProgrammeFunding {\n      ...FundingOrganisationDetails\n    }\n  }\n": types.ProjectFundingBannerFragmentDoc,
    "\n  fragment BlockItemDetails on BlockItem {\n    __typename\n    ... on HeaderBlock {\n      id\n      ...HeaderBlockDetails\n    }\n    ... on FeatureBlock {\n      id\n      ...FeatureBlockDetails\n    }\n    ... on FeaturedTextBlock {\n      id\n      ...FeaturedTextBlockDetails\n    }\n    ... on CarouselBlock {\n      id\n      ...CarouselBlockDetails\n    }\n    ... on MediaBlock {\n      id\n      ...MediaBlockDetails\n    }\n    ... on MediaCountBlock {\n      id\n      ...MediaCountBlockDetails\n    }\n    ... on CustomComponentBlock {\n      id\n      ...CustomComponentBlockDetails\n    }\n    ... on TextBlock {\n      id\n      ...TextBlockDetails\n    }\n  }\n": types.BlockItemDetailsFragmentDoc,
    "\n  fragment CarouselBlockDetails on CarouselBlock {\n    __typename\n    id\n    title\n    body\n    backgroundColour\n    features {\n      __typename\n      ... on MediaBlock {\n        ...MediaBlockDetails\n      }\n      ... on MediaCountBlock {\n        ...MediaCountBlockDetails\n      }\n    }\n  }\n": types.CarouselBlockDetailsFragmentDoc,
    "\n  fragment CustomComponentBlockDetails on CustomComponentBlock {\n    id\n    componentType\n    title\n    width\n    backgroundColour\n    settings\n  }\n": types.CustomComponentBlockDetailsFragmentDoc,
    "\n  query OrganizationPreview($key: ID!) {\n    organization(key: $key) {\n      title\n      created\n      contacts {\n        email\n        firstName\n        lastName\n      }\n      description\n    }\n  }\n": types.OrganizationPreviewDocument,
    "\n  query TaiwanNode($identifier: String!) {\n    nodeSearch(identifierType: GBIF_PARTICIPANT, identifier: $identifier) {\n      results {\n        key\n        participantTitle\n        participationStatus\n        title\n      }\n    }\n  }\n": types.TaiwanNodeDocument,
    "\n  query NodeCountry($countryCode: String!) {\n    nodeCountry(countryCode: $countryCode) {\n      key\n      participantTitle\n      participationStatus\n      title\n    }\n  }\n": types.NodeCountryDocument,
    "\n  query NonCountryNode($identifier: String!) {\n    nodeSearch(identifierType: GBIF_PARTICIPANT, identifier: $identifier) {\n      results {\n        key\n        participantTitle\n      }\n    }\n  }\n": types.NonCountryNodeDocument,
    "\n  query Participants {\n    participantSearch(limit: 1000, type: COUNTRY) {\n      endOfRecords\n      results {\n        id\n        name\n        countryCode\n        participationStatus\n      }\n    }\n  }\n": types.ParticipantsDocument,
    "\n  fragment FeatureBlockDetails on FeatureBlock {\n    __typename\n    maxPerRow\n    title\n    hideTitle\n    body\n    backgroundColour\n    features {\n      __typename\n      ... on Feature {\n        id\n        title\n        url\n        primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on News {\n        id\n        title\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on DataUse {\n        id\n        title\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on MeetingEvent {\n        id\n        title\n        start\n        end\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n    }\n  }\n": types.FeatureBlockDetailsFragmentDoc,
    "\n  fragment FeaturedTextBlockDetails on FeaturedTextBlock {\n    __typename\n    id\n    title\n    hideTitle\n    body\n    backgroundColour\n  }\n": types.FeaturedTextBlockDetailsFragmentDoc,
    "\n  fragment HeaderBlockDetails on HeaderBlock {\n    __typename\n    title\n    summary\n    hideTitle\n    primaryImage {\n      ...ArticleBanner\n    }\n  }\n": types.HeaderBlockDetailsFragmentDoc,
    "\n  fragment MediaBlockDetails on MediaBlock {\n    __typename\n    id\n    mediaTitle: title\n    body\n    optionalImg: primaryImage {\n      file {\n        url\n      }\n      title\n      description\n    }\n    reverse\n    subtitle\n    backgroundColour\n    roundImage\n    callToAction {\n      label\n      url\n    }\n  }\n": types.MediaBlockDetailsFragmentDoc,
    "\n  fragment MediaCountBlockDetails on MediaCountBlock {\n    __typename\n    id\n    mediaTitle: title\n    body\n    optionalImg: primaryImage {\n      file {\n        mobile: thumbor(width: 500, height: 400)\n      }\n      title\n      description\n    }\n    reverse\n    subtitle\n    titleCountPart\n    backgroundColour\n    roundImage\n    callToAction {\n      label\n      url\n    }\n  }\n": types.MediaCountBlockDetailsFragmentDoc,
    "\n  fragment TextBlockDetails on TextBlock {\n    title\n    body\n    hideTitle\n    id\n    backgroundColour\n  }\n": types.TextBlockDetailsFragmentDoc,
    "\n  fragment CompositionPage on Composition {\n    id\n    maybeTitle: title\n    summary\n    excerpt\n    blocks {\n      ...BlockItemDetails\n    }\n  }\n": types.CompositionPageFragmentDoc,
    "\n  fragment CompositionResult on Composition {\n    id\n    title\n    excerpt\n    urlAlias\n    primaryImage {\n      ...ResultCardImage\n    }\n  }\n": types.CompositionResultFragmentDoc,
    "\n  fragment ProseCardImg on AssetImage {\n    file {\n      mobile: thumbor(width: 500, height: 400)\n    }\n    title\n    description\n  }\n": types.ProseCardImgFragmentDoc,
    "\n  fragment ResourceRedirectDetails on Resource {\n    __typename\n    ... on Article {\n      id\n      title\n      urlAlias\n    }\n    ... on Composition {\n      id\n      maybeTitle: title\n      urlAlias\n    }\n    ... on DataUse {\n      id\n      title\n    }\n    ... on Document {\n      id\n      title\n    }\n    ... on MeetingEvent {\n      id\n      title\n    }\n    ... on News {\n      id\n      title\n    }\n    ... on Programme {\n      id\n      title\n    }\n    ... on GbifProject {\n      id\n      title\n    }\n    ... on Tool {\n      id\n      title\n    }\n  }\n": types.ResourceRedirectDetailsFragmentDoc,
    "\n  fragment DataUsePage on DataUse {\n    id\n    title\n    summary\n    resourceUsed\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    countriesOfCoverage\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n": types.DataUsePageFragmentDoc,
    "\n  fragment DataUseResult on DataUse {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n    createdAt\n  }\n": types.DataUseResultFragmentDoc,
    "\n  fragment DocumentPage on Document {\n    id\n    title\n    createdAt\n    excerpt\n    summary\n    primaryLink {\n      label\n      url\n    }\n    document {\n      title\n      description\n      file {\n        fileName\n        url\n      }\n    }\n    body\n    citation\n  }\n": types.DocumentPageFragmentDoc,
    "\n  fragment DocumentResult on Document {\n    id\n    title\n    excerpt\n  }\n": types.DocumentResultFragmentDoc,
    "\n  fragment EventPage on MeetingEvent {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    location\n    country\n    start\n    end\n    eventLanguage\n    venue\n    allDayEvent\n    documents {\n      ...DocumentPreview\n    }\n  }\n": types.EventPageFragmentDoc,
    "\n  fragment EventResult on MeetingEvent {\n    id\n    title\n    excerpt\n    country\n    location\n    venue\n    start\n    end\n    primaryLink {\n      url\n    }\n    gbifsAttendee\n    allDayEvent\n  }\n": types.EventResultFragmentDoc,
    "\n  fragment NewsPage on News {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    countriesOfCoverage\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n": types.NewsPageFragmentDoc,
    "\n  fragment NewsResult on News {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n    createdAt\n  }\n": types.NewsResultFragmentDoc,
    "\n  fragment ProgrammePage on Programme {\n    title\n    excerpt\n    blocks {\n      ...BlockItemDetails\n    }\n    ...ProgrammeFundingBanner\n  }\n": types.ProgrammePageFragmentDoc,
    "\n  fragment ProgrammeResult on Programme {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n  }\n": types.ProgrammeResultFragmentDoc,
    "\n  fragment ProjectPage on GbifProject {\n    # Define the values used by this page\n    title\n    excerpt\n    status\n    start\n    end\n    fundsAllocated\n    primaryLink {\n      label\n      url\n    }\n    ...ProjectFundingBanner\n    # The Project About tab uses the data from this loader and defines its own data needs in this fragment\n    ...ProjectAboutTab\n  }\n": types.ProjectPageFragmentDoc,
    "\n    query Project($key: String!) {\n      resource(id: $key) {\n        ...ResourceRedirectDetails\n        ... on GbifProject {\n          ...ProjectPage\n        }\n      }\n      # The Project Datasets tab also uses some data from this loader and defines its own data needs in this fragment\n      ...ProjectDatasetsTab\n    }\n  ": types.ProjectDocument,
    "\n  fragment ProjectAboutTab on GbifProject {\n    projectId\n    id\n    body\n    start\n    end\n    status\n    fundsAllocated\n    matchingFunds\n    grantType\n    purposes\n    leadPartner {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    additionalPartners {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    leadContact\n    fundingOrganisations {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    programme {\n      fundingOrganisations {\n        ...ParticipantOrFundingOrganisationDetails\n      }\n    }\n    overrideProgrammeFunding {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    programme {\n      id\n      title\n    }\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    documents {\n      ...DocumentPreview\n    }\n  }\n": types.ProjectAboutTabFragmentDoc,
    "\n  fragment ParticipantOrFundingOrganisationDetails on ParticipantOrFundingOrganisation {\n    __typename\n    ... on FundingOrganisation {\n      id\n      title\n      url\n    }\n    ... on Participant {\n      id\n      title\n    }\n  }\n": types.ParticipantOrFundingOrganisationDetailsFragmentDoc,
    "\n  fragment ProjectDatasetsTab on Query {\n    gbifProject(id: $key) {\n      projectId\n    }\n    datasetsHelp: help(identifier: \"how-to-link-datasets-to-my-project-page\") {\n      title\n    }\n  }\n": types.ProjectDatasetsTabFragmentDoc,
    "\n  query ProjectDatasets($projectId: ID!) {\n    datasetSearch(projectId: [$projectId], limit: 500) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n  }\n": types.ProjectDatasetsDocument,
    "\n  query ProjectNewsAndEvents($key: String!) {\n    gbifProject(id: $key) {\n      news {\n        __typename\n        createdAt\n        ...NewsResult\n      }\n      events {\n        __typename\n        start\n        ...EventResult\n      }\n    }\n    help(identifier: \"how-to-add-events-to-my-project-page\") {\n      title\n    }\n  }\n": types.ProjectNewsAndEventsDocument,
    "\n  fragment ProjectResult on GbifProject {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n    createdAt\n    programme {\n      id\n      title\n    }\n    purposes\n  }\n": types.ProjectResultFragmentDoc,
    "\n  query ResourceRedirect($id: String!) {\n    resource(id: $id) {\n      __typename\n    }\n  }\n": types.ResourceRedirectDocument,
    "\n  fragment ToolPage on Tool {\n    id\n    title\n    summary\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    citation\n    createdAt\n    author\n    rights\n    rightsHolder\n    publicationDate\n  }\n": types.ToolPageFragmentDoc,
    "\n  fragment ToolResult on Tool {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n  }\n": types.ToolResultFragmentDoc,
    "\n    query ResourceCoverageCountryFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: countriesOfCoverage {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.ResourceCoverageCountryFacetDocument,
    "\n    query ResourceTopicsFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: topics(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.ResourceTopicsFacetDocument,
    "\n    query ResourceResearcherCountryFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: countriesOfResearcher {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.ResourceResearcherCountryFacetDocument,
    "\n    query ResourceGbifProgrammeAcronymFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: gbifProgrammeAcronym(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.ResourceGbifProgrammeAcronymFacetDocument,
    "\n    query ResourcePurposesFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: purposes(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.ResourcePurposesFacetDocument,
    "\n    query ResourceContractCountryFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: contractCountry {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  ": types.ResourceContractCountryFacetDocument,
    "\n  query ResourceSearch(\n    $from: Int\n    $size: Int\n    $predicate: Predicate\n    $contentType: [ContentType!]\n  ) {\n    resourceSearch(predicate: $predicate, contentType: $contentType) {\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          __typename\n          ... on Composition {\n            ...CompositionResult\n          }\n          ... on News {\n            ...NewsResult\n          }\n          ... on Article {\n            ...ArticleResult\n          }\n          ... on DataUse {\n            ...DataUseResult\n          }\n          ... on MeetingEvent {\n            ...EventResult\n          }\n          ... on GbifProject {\n            ...ProjectResult\n          }\n          ... on Programme {\n            ...ProgrammeResult\n          }\n          ... on Tool {\n            ...ToolResult\n          }\n          ... on Document {\n            ...DocumentResult\n          }\n          ... on Document {\n            ...DocumentResult\n          }\n          ... on NetworkProse {\n            ...NetworkProseResult\n          }\n        }\n      }\n    }\n  }\n": types.ResourceSearchDocument,
    "\n  query TaxonDistributions($key: ID!, $limit: Int, $offset: Int) {\n    taxon(key: $key) {\n      distributions(limit: $limit, offset: $offset) {\n        endOfRecords\n        limit\n        offset\n        results {\n          threatStatus\n          establishmentMeans\n          status\n          locality\n          locationId\n          country\n        }\n      }\n    }\n  }\n": types.TaxonDistributionsDocument,
    "\n  query InvasiveTaxon($key: ID!) {\n    taxon(key: $key) {\n      key\n      invasiveInCountries {\n        country\n        isSubCountry\n        datasetKey\n        dataset\n        scientificName\n        nubKey\n        taxonKey\n        isInvasive\n      }\n    }\n  }\n": types.InvasiveTaxonDocument,
    "\n  query TaxonOccurrenceImages($imagePredicate: Predicate) {\n    images: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 25) {\n        total\n        results {\n          key\n          stillImages {\n            identifier: thumbor(height: 400)\n          }\n        }\n      }\n    }\n  }\n": types.TaxonOccurrenceImagesDocument,
    "\n  query Treatments($key: ID!) {\n    taxon(key: $key) {\n      key\n      rank\n      scientificName\n      treatments {\n        sourceTaxon {\n          key\n          nubKey\n        }\n        publisherKey\n        publisherTitle\n        publisherHomepage\n        datasetTitle\n        datasetKey\n        citation\n        link\n      }\n    }\n  }\n": types.TreatmentsDocument,
    "\n  query TaxonTypeSpecimens($from: Int, $size: Int, $predicate: Predicate) {\n    occurrenceSearch(predicate: $predicate) {\n      _meta\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          key\n          taxonKey\n          scientificName\n          typeStatus\n          typifiedName\n          catalogNumber\n          recordedBy\n          year\n          country\n          institutionCode\n          collectionCode\n          occurrenceID\n          dataset {\n            key\n            title\n          }\n          extensions {\n            dnaDerivedData\n          }\n        }\n      }\n    }\n  }\n": types.TaxonTypeSpecimensDocument,
    "\n  query VerbatimTaxon($key: ID!) {\n    taxon(key: $key) {\n      verbatim\n    }\n  }\n": types.VerbatimTaxonDocument,
    "\n  query TaxonVernacularNames($key: ID!, $limit: Int, $offset: Int) {\n    taxon(key: $key) {\n      vernacularNames(limit: $limit, offset: $offset) {\n        endOfRecords\n        results {\n          vernacularName\n          language\n          sourceTaxonKey\n          sourceTaxon {\n            datasetKey\n          }\n          source\n        }\n      }\n    }\n  }\n": types.TaxonVernacularNamesDocument,
    "\n  query TaxonBreakdown($key: ID!) {\n    taxon(key: $key) {\n      key\n      rank\n      scientificName\n      checklistBankBreakdown {\n        id\n        label\n        name\n        rank\n        species\n        children {\n          id\n          label\n          name\n          rank\n          species\n        }\n      }\n    }\n  }\n": types.TaxonBreakdownDocument,
    "\n  query SourceTaxon($sourceId: ID!, $datasetKey: ID!) {\n    taxonBySourceId(sourceId: $sourceId, datasetKey: $datasetKey) {\n      key\n      nubKey\n      scientificName\n      taxonID\n    }\n  }\n": types.SourceTaxonDocument,
    "\n  query TaxonKey($key: ID!, $imagePredicate: Predicate) {\n    taxon(key: $key) {\n      key\n      nubKey\n      sourceTaxon {\n        key\n        references\n        datasetKey\n        dataset {\n          title\n        }\n      }\n      issues\n      scientificName\n      canonicalName\n      origin\n      kingdom\n      formattedName(useFallback: true)\n      rank\n      taxonomicStatus\n      publishedIn\n      references\n      datasetKey\n      speciesCount\n      distributionsCount: distributions(limit: 10, offset: 0) {\n        results {\n          taxonKey\n        }\n      }\n      iucnStatus {\n        references\n        distribution {\n          taxonKey\n          threatStatus\n        }\n      }\n      dataset {\n        title\n        key\n        citation {\n          text\n          citationProvidedBySource\n        }\n      }\n      vernacularCount: vernacularNames(limit: 10, offset: 0) {\n        results {\n          taxonKey\n        }\n      }\n      parents {\n        rank\n        scientificName\n        canonicalName\n        formattedName\n        key\n      }\n      acceptedTaxon {\n        key\n        formattedName\n        scientificName\n      }\n      synonyms(limit: 10, offset: 0) {\n        results {\n          key\n        }\n      }\n    }\n\n    imagesCount: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n": types.TaxonKeyDocument,
    "\n  query SlowTaxon($key: ID!, $language: String) {\n    taxon(key: $key) {\n      key\n      basionymKey\n      vernacularNames(limit: 1, language: $language) {\n        results {\n          vernacularName\n          source\n        }\n      }\n      combinations {\n        key\n        nameKey\n        acceptedKey\n        canonicalName\n        authorship\n        scientificName\n        formattedName\n        rank\n        taxonomicStatus\n        numDescendants\n      }\n      synonyms(limit: 100, offset: 0) {\n        limit\n        offset\n        endOfRecords\n        results {\n          key\n          nameKey\n          acceptedKey\n          canonicalName\n          authorship\n          scientificName\n          formattedName\n          rank\n          taxonomicStatus\n          numDescendants\n        }\n      }\n      wikiData {\n        source {\n          id\n          url\n        }\n        identifiers {\n          id\n          label\n          description\n          url\n        }\n      }\n    }\n  }\n": types.SlowTaxonDocument,
    "\n  query NonBackboneSlowTaxon($key: ID!) {\n    taxon(key: $key) {\n      key\n      nubKey\n      scientificName\n      kingdom\n      formattedName(useFallback: true)\n      rank\n      taxonomicStatus\n      publishedIn\n      media {\n        limit\n        endOfRecords\n        results {\n          identifier\n          creator\n          rightsHolder\n        }\n      }\n      dataset {\n        citation {\n          text\n          citationProvidedBySource\n        }\n      }\n      vernacularCount: vernacularNames(limit: 10, offset: 0) {\n        results {\n          taxonKey\n        }\n      }\n      parents {\n        rank\n        scientificName\n        key\n      }\n      acceptedTaxon {\n        key\n        formattedName\n        scientificName\n      }\n      combinations {\n        key\n        nameKey\n        acceptedKey\n        canonicalName\n        authorship\n        scientificName\n        formattedName\n        rank\n        taxonomicStatus\n        numDescendants\n      }\n      synonyms(limit: 100, offset: 0) {\n        limit\n        offset\n        endOfRecords\n        results {\n          key\n          nameKey\n          acceptedKey\n          canonicalName\n          authorship\n          scientificName\n          formattedName\n          rank\n          taxonomicStatus\n          numDescendants\n        }\n      }\n    }\n  }\n": types.NonBackboneSlowTaxonDocument,
    "\n  query ToNubOrNotToNub($key: ID!) {\n    taxon(key: $key) {\n      nubKey\n      key\n      datasetKey\n    }\n  }\n": types.ToNubOrNotToNubDocument,
    "\n    query TaxonRankFacet($query: TaxonSearchInput) {\n      search: taxonSearch(query: $query) {\n        facet {\n          field: rank(limit: 100) {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.TaxonRankFacetDocument,
    "\n    query TaxonStatusFacet($query: TaxonSearchInput) {\n      search: taxonSearch(query: $query) {\n        facet {\n          field: status(limit: 100) {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.TaxonStatusFacetDocument,
    "\n    query TaxonIssueFacet($query: TaxonSearchInput) {\n      search: taxonSearch(query: $query) {\n        facet {\n          field: issue(limit: 100) {\n            name\n            count\n          }\n        }\n      }\n    }\n  ": types.TaxonIssueFacetDocument,
    "\n  query TaxonSearch($offset: Int, $limit: Int, $query: TaxonSearchInput) {\n    taxonSearch(query: $query, offset: $offset, limit: $limit) {\n      count\n      offset\n      endOfRecords\n      results {\n        key\n        nubKey\n        scientificName\n        formattedName(useFallback: true)\n        kingdom\n        phylum\n        class\n        order\n        family\n        genus\n        species\n        taxonomicStatus\n        rank\n        datasetKey\n        dataset {\n          title\n        }\n        accepted\n        acceptedKey\n        numDescendants\n        vernacularNames(limit: 2, language: \"eng\") {\n          results {\n            vernacularName\n            source\n            sourceTaxonKey\n          }\n        }\n      }\n    }\n  }\n": types.TaxonSearchDocument,
    "\n  query RootSearch($datasetKey: ID!, $offset: Int, $limit: Int) {\n    checklistRoots(datasetKey: $datasetKey, offset: $offset, limit: $limit) {\n      offset\n      endOfRecords\n      results {\n        key\n        nubKey\n        scientificName\n        formattedName(useFallback: true)\n        kingdom\n        phylum\n        class\n        order\n        family\n        genus\n        species\n        taxonomicStatus\n        rank\n        datasetKey\n        dataset {\n          title\n        }\n        accepted\n        acceptedKey\n        numDescendants\n        vernacularNames(limit: 2, language: \"eng\") {\n          results {\n            vernacularName\n            source\n            sourceTaxonKey\n          }\n        }\n      }\n    }\n  }\n": types.RootSearchDocument,
    "\n    query TaxonChildren($key: ID!, $limit: Int, $offset: Int) {\n      taxon(key: $key) {\n        key\n        scientificName\n        numDescendants\n        children(limit: $limit, offset: $offset) {\n          limit\n          endOfRecords\n          offset\n          results {\n            key\n            parentKey\n            numDescendants\n            scientificName\n            canonicalName\n            formattedName(useFallback: true)\n            rank\n          }\n        }\n      }\n    }\n  ": types.TaxonChildrenDocument,
    "\n    query TaxonParentKeys($key: ID!, $limit: Int, $offset: Int) {\n      taxon(key: $key) {\n        acceptedTaxon {\n          key\n          numDescendants\n          scientificName\n          formattedName(useFallback: true)\n          children(limit: $limit, offset: $offset) {\n            limit\n            endOfRecords\n            offset\n            results {\n              key\n              numDescendants\n              scientificName\n              formattedName(useFallback: true)\n            }\n          }\n        }\n        acceptedKey\n        key\n        numDescendants\n        scientificName\n        formattedName(useFallback: true)\n        children(limit: $limit, offset: $offset) {\n          limit\n          endOfRecords\n          offset\n          results {\n            key\n            numDescendants\n            scientificName\n            formattedName(useFallback: true)\n          }\n        }\n        parents {\n          key\n          numDescendants\n          scientificName\n          formattedName(useFallback: true)\n          children(limit: $limit, offset: $offset) {\n            limit\n            endOfRecords\n            offset\n            results {\n              key\n              numDescendants\n              scientificName\n              formattedName(useFallback: true)\n            }\n          }\n        }\n      }\n    }\n  ": types.TaxonParentKeysDocument,
    "\n  fragment TaxonResult on Taxon {\n    key\n    nubKey\n    scientificName\n    canonicalName\n    formattedName(useFallback: true)\n    kingdom\n    phylum\n    class\n    order\n    family\n    genus\n    rank\n    taxonomicStatus\n    parents {\n      key\n      name: canonicalName\n      rank\n    }\n    mapCapabilities {\n      total\n    }\n    accepted\n    acceptedKey\n    numDescendants\n    vernacularNames(limit: 1, language: \"eng\") {\n      results {\n        vernacularName\n        source\n        sourceTaxonKey\n      }\n    }\n  }\n": types.TaxonResultFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query vocabularyConcept($language: String, $vocabulary: ID!, $concept: ID!) {\n    concept: vocabularyConcept(vocabulary: $vocabulary, concept: $concept) {\n      uiLabel(language: $language)\n      uiDefinition(language: $language)\n      parents {\n        uiLabel(language: $language)\n      }\n    }\n  }\n"): (typeof documents)["\n  query vocabularyConcept($language: String, $vocabulary: ID!, $concept: ID!) {\n    concept: vocabularyConcept(vocabulary: $vocabulary, concept: $concept) {\n      uiLabel(language: $language)\n      uiDefinition(language: $language)\n      parents {\n        uiLabel(language: $language)\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query globe($lat: Float!, $lon: Float!) {\n    globe(cLat: $lat, cLon: $lon) {\n      svg\n    }\n  }\n"): (typeof documents)["\n  query globe($lat: Float!, $lon: Float!) {\n    globe(cLat: $lat, cLon: $lon) {\n      svg\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HelpText($identifier: String!, $locale: String) {\n    help(identifier: $identifier, locale: $locale) {\n      id\n      identifier\n      title\n      body\n    }\n  }\n"): (typeof documents)["\n  query HelpText($identifier: String!, $locale: String) {\n    help(identifier: $identifier, locale: $locale) {\n      id\n      identifier\n      title\n      body\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HelpTitle($identifier: String!, $locale: String) {\n    help(identifier: $identifier, locale: $locale) {\n      id\n      identifier\n      title\n    }\n  }\n"): (typeof documents)["\n  query HelpTitle($identifier: String!, $locale: String) {\n    help(identifier: $identifier, locale: $locale) {\n      id\n      identifier\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ResultCardImage on AssetImage {\n    file {\n      url: thumbor(width: 180, height: 120)\n    }\n  }\n"): (typeof documents)["\n  fragment ResultCardImage on AssetImage {\n    file {\n      url: thumbor(width: 180, height: 120)\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ParticipantSelect($type: NodeType, $participationStatus: ParticipationStatus, $limit: Int) {\n    participantSearch(type: $type, participationStatus: $participationStatus, limit: $limit) {\n      endOfRecords\n      count\n      results {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query ParticipantSelect($type: NodeType, $participationStatus: ParticipationStatus, $limit: Int) {\n    participantSearch(type: $type, participationStatus: $participationStatus, limit: $limit) {\n      endOfRecords\n      count\n      results {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Header {\n    gbifHome {\n      title\n      summary\n      children {\n        id\n        externalLink\n        link\n        title\n        children {\n          id\n          externalLink\n          link\n          title\n          children {\n            id\n            externalLink\n            link\n            title\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Header {\n    gbifHome {\n      title\n      summary\n      children {\n        id\n        externalLink\n        link\n        title\n        children {\n          id\n          externalLink\n          link\n          title\n          children {\n            id\n            externalLink\n            link\n            title\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CollectionResult on CollectionSearchEntity {\n    key\n    name\n    active\n    code\n    excerpt\n    numberSpecimens\n    occurrenceCount\n    institutionName\n    institutionKey\n    featuredImageUrl: thumbor(width: 300, height: 200)\n    featuredImageLicense\n    descriptorMatches {\n      key\n      usageName\n      country\n      individualCount\n      recordedBy\n      typeStatus\n      identifiedBy\n      taxon {\n        kingdom\n        phylum\n        class\n        order\n        family\n        genus\n        species\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CollectionResult on CollectionSearchEntity {\n    key\n    name\n    active\n    code\n    excerpt\n    numberSpecimens\n    occurrenceCount\n    institutionName\n    institutionKey\n    featuredImageUrl: thumbor(width: 300, height: 200)\n    featuredImageLicense\n    descriptorMatches {\n      key\n      usageName\n      country\n      individualCount\n      recordedBy\n      typeStatus\n      identifiedBy\n      taxon {\n        kingdom\n        phylum\n        class\n        order\n        family\n        genus\n        species\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DescriptorGroups($key: ID!) {\n    collection(key: $key) {\n      descriptorGroups(limit: 100) {\n        results {\n          key\n          title\n          description\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query DescriptorGroups($key: ID!) {\n    collection(key: $key) {\n      descriptorGroups(limit: 100) {\n        results {\n          key\n          title\n          description\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DescriptorGroup($key: ID!, $collectionKey: ID!, $limit: Int, $offset: Int) {\n    collectionDescriptorGroup(key: $key, collectionKey: $collectionKey) {\n      title\n      description\n      descriptors(limit: $limit, offset: $offset) {\n        count\n        offset\n        limit\n        results {\n          key\n          verbatim\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query DescriptorGroup($key: ID!, $collectionKey: ID!, $limit: Int, $offset: Int) {\n    collectionDescriptorGroup(key: $key, collectionKey: $collectionKey) {\n      title\n      description\n      descriptors(limit: $limit, offset: $offset) {\n        count\n        offset\n        limit\n        results {\n          key\n          verbatim\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Collection($key: ID!) {\n    collection(key: $key) {\n      key\n      active\n      code\n      name\n      description\n      taxonomicCoverage\n      geographicCoverage\n      temporalCoverage\n      notes\n      homepage\n\n      numberSpecimens\n      incorporatedCollections\n\n      contentTypes\n\n      personalCollection\n      email\n      phone\n\n      catalogUrls\n      apiUrls\n      preservationTypes\n      accessionStatus\n\n      featuredImageUrl: thumbor(width: 1000, height: 667)\n      featuredImageLicense\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile(onlyIfNoImageUrl: true, timeoutMs: 300)\n\n      created\n      deleted\n      modified\n      modifiedBy\n      replacedByCollection {\n        name\n        key\n      }\n\n      institutionKey\n      identifiers {\n        key\n        type\n        identifier\n        primary\n      }\n      contactPersons {\n        key\n        firstName\n        lastName\n        phone\n        email\n        taxonomicExpertise\n        primary\n        position\n        userIds {\n          type\n          id\n        }\n      }\n      alternativeCodes {\n        code\n        description\n      }\n      institution {\n        code\n        name\n        key\n      }\n\n      mailingAddress {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      address {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      descriptorGroups(limit: 0) {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query Collection($key: ID!) {\n    collection(key: $key) {\n      key\n      active\n      code\n      name\n      description\n      taxonomicCoverage\n      geographicCoverage\n      temporalCoverage\n      notes\n      homepage\n\n      numberSpecimens\n      incorporatedCollections\n\n      contentTypes\n\n      personalCollection\n      email\n      phone\n\n      catalogUrls\n      apiUrls\n      preservationTypes\n      accessionStatus\n\n      featuredImageUrl: thumbor(width: 1000, height: 667)\n      featuredImageLicense\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile(onlyIfNoImageUrl: true, timeoutMs: 300)\n\n      created\n      deleted\n      modified\n      modifiedBy\n      replacedByCollection {\n        name\n        key\n      }\n\n      institutionKey\n      identifiers {\n        key\n        type\n        identifier\n        primary\n      }\n      contactPersons {\n        key\n        firstName\n        lastName\n        phone\n        email\n        taxonomicExpertise\n        primary\n        position\n        userIds {\n          type\n          id\n        }\n      }\n      alternativeCodes {\n        code\n        description\n      }\n      institution {\n        code\n        name\n        key\n      }\n\n      mailingAddress {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      address {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      descriptorGroups(limit: 0) {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CollectionSummaryMetrics(\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n      cardinality {\n        recordedBy\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query CollectionSummaryMetrics(\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n      cardinality {\n        recordedBy\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CollectionFallbackImage($key: ID!) {\n    collection(key: $key) {\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile(\n        onlyIfNoImageUrl: true\n        timeoutMs: 3000\n      )\n    }\n  }\n"): (typeof documents)["\n  query CollectionFallbackImage($key: ID!) {\n    collection(key: $key) {\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile(\n        onlyIfNoImageUrl: true\n        timeoutMs: 3000\n      )\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CollectionSearch($query: CollectionSearchInput) {\n    collectionSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...CollectionResult\n      }\n    }\n  }\n"): (typeof documents)["\n  query CollectionSearch($query: CollectionSearchInput) {\n    collectionSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...CollectionResult\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CollectionRecordedByFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: recordedBy(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query CollectionRecordedByFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: recordedBy(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CollectionCityFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: city(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query CollectionCityFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: city(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CollectionContentTypeFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: contentType(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query CollectionContentTypeFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: contentType(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CollectionPreservationTypeFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: preservationType(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query CollectionPreservationTypeFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: preservationType(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CollectionTypeStatusFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: typeStatus(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query CollectionTypeStatusFacet($query: CollectionSearchInput) {\n      search: collectionSearch(query: $query) {\n        facet {\n          field: typeStatus(limit: 10) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment NodeContacts on Node {\n    contacts {\n      key\n      title\n      firstName\n      surname\n      lastName\n\n      organization\n      position\n      roles\n      type\n\n      address\n      city\n      postalCode\n      province\n      country\n\n      homepage\n      email\n      phone\n      userId\n    }\n  }\n"): (typeof documents)["\n  fragment NodeContacts on Node {\n    contacts {\n      key\n      title\n      firstName\n      surname\n      lastName\n\n      organization\n      position\n      roles\n      type\n\n      address\n      city\n      postalCode\n      province\n      country\n\n      homepage\n      email\n      phone\n      userId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CountryDetailAbout($isoCode: Country!) {\n    countryDetail(isoCode: $isoCode) {\n      aboutOccurrenceCount\n      aboutDatasetCount\n      aboutCountryCount\n      aboutPublisherCount\n    }\n  }\n"): (typeof documents)["\n  query CountryDetailAbout($isoCode: Country!) {\n    countryDetail(isoCode: $isoCode) {\n      aboutOccurrenceCount\n      aboutDatasetCount\n      aboutCountryCount\n      aboutPublisherCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CountryDetailFrom($isoCode: Country!) {\n    countryDetail(isoCode: $isoCode) {\n      fromOccurrenceCount\n      fromDatasetCount\n      fromCountryCount\n      fromPublisherCount\n    }\n  }\n"): (typeof documents)["\n  query CountryDetailFrom($isoCode: Country!) {\n    countryDetail(isoCode: $isoCode) {\n      fromOccurrenceCount\n      fromDatasetCount\n      fromCountryCount\n      fromPublisherCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OccurrencesPerKingdom($predicate: Predicate) {\n    occurrenceSearch(predicate: $predicate) {\n      facet {\n        kingdomKey {\n          key\n          count\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OccurrencesPerKingdom($predicate: Predicate) {\n    occurrenceSearch(predicate: $predicate) {\n      facet {\n        kingdomKey {\n          key\n          count\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ParticipantSummary on Node {\n    title\n    gbifRegion\n    homepage\n    participationStatus\n    participant {\n      membershipStart\n      nodeEstablishmentDate\n      participantUrl\n    }\n    headOfDelegation: contacts(type: \"HEAD_OF_DELEGATION\") {\n      key\n      firstName\n      lastName\n    }\n    participantNodeManager: contacts(type: \"NODE_MANAGER\") {\n      key\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  fragment ParticipantSummary on Node {\n    title\n    gbifRegion\n    homepage\n    participationStatus\n    participant {\n      membershipStart\n      nodeEstablishmentDate\n      participantUrl\n    }\n    headOfDelegation: contacts(type: \"HEAD_OF_DELEGATION\") {\n      key\n      firstName\n      lastName\n    }\n    participantNodeManager: contacts(type: \"NODE_MANAGER\") {\n      key\n      firstName\n      lastName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Participant($countryCode: String!) {\n    nodeCountry(countryCode: $countryCode) {\n      title\n      address\n      gbifRegion\n      participationStatus\n      participant {\n        membershipStart\n        nodeEstablishmentDate\n      }\n      ...ParticipantSummary\n      ...CountryKeyParticipation\n    }\n  }\n"): (typeof documents)["\n  query Participant($countryCode: String!) {\n    nodeCountry(countryCode: $countryCode) {\n      title\n      address\n      gbifRegion\n      participationStatus\n      participant {\n        membershipStart\n        nodeEstablishmentDate\n      }\n      ...ParticipantSummary\n      ...CountryKeyParticipation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CountProjects($countryCode: JSON!) {\n    resourceSearch(\n      contentType: PROJECT\n      predicate: { key: \"contractCountry\", type: equals, value: $countryCode }\n    ) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query CountProjects($countryCode: JSON!) {\n    resourceSearch(\n      contentType: PROJECT\n      predicate: { key: \"contractCountry\", type: equals, value: $countryCode }\n    ) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CountNews($countryCode: JSON!) {\n    resourceSearch(\n      contentType: NEWS\n      predicate: { key: \"countriesOfCoverage\", type: equals, value: $countryCode }\n    ) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query CountNews($countryCode: JSON!) {\n    resourceSearch(\n      contentType: NEWS\n      predicate: { key: \"countriesOfCoverage\", type: equals, value: $countryCode }\n    ) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CountryKeyParticipation on Node {\n    participant {\n      nodeMission\n      nodeFunding\n      nodeHistory\n      nodeStructure\n    }\n    ...NodeContacts\n  }\n"): (typeof documents)["\n  fragment CountryKeyParticipation on Node {\n    participant {\n      nodeMission\n      nodeFunding\n      nodeHistory\n      nodeStructure\n    }\n    ...NodeContacts\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BecomeAPublisherPage {\n    resource(alias: \"/become-a-publisher\") {\n      __typename\n      ... on Article {\n        id\n        title\n        summary\n        excerpt\n        body\n        primaryImage {\n          ...ArticleBanner\n        }\n        secondaryLinks {\n          label\n          url\n        }\n        documents {\n          ...DocumentPreview\n        }\n        topics\n        purposes\n        audiences\n        citation\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query BecomeAPublisherPage {\n    resource(alias: \"/become-a-publisher\") {\n      __typename\n      ... on Article {\n        id\n        title\n        summary\n        excerpt\n        body\n        primaryImage {\n          ...ArticleBanner\n        }\n        secondaryLinks {\n          label\n          url\n        }\n        documents {\n          ...DocumentPreview\n        }\n        topics\n        purposes\n        audiences\n        citation\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GbifNetworkPage {\n    resource(alias: \"/the-gbif-network/global\") {\n      __typename\n      ... on Article {\n        id\n        title\n        summary\n        excerpt\n        body\n        secondaryLinks {\n          label\n          url\n        }\n        documents {\n          ...DocumentPreview\n        }\n        topics\n        purposes\n        audiences\n        citation\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query GbifNetworkPage {\n    resource(alias: \"/the-gbif-network/global\") {\n      __typename\n      ... on Article {\n        id\n        title\n        summary\n        excerpt\n        body\n        secondaryLinks {\n          label\n          url\n        }\n        documents {\n          ...DocumentPreview\n        }\n        topics\n        purposes\n        audiences\n        citation\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GbifNetworkParticipants {\n    nodeSteeringGroup {\n      name\n      title\n      institutionName\n      address\n      addressCountry\n      email\n      role\n      contact {\n        participants {\n          id\n          name\n          gbifRegion\n        }\n      }\n    }\n    nodeSearch(limit: 1000) {\n      results {\n        type\n        country\n        identifiers {\n          type\n          identifier\n        }\n        participant {\n          id\n          participationStatus\n          membershipStart\n          name\n          gbifRegion\n          countryCode\n        }\n        contacts(type: [\"HEAD_OF_DELEGATION\", \"NODE_MANAGER\"]) {\n          firstName\n          lastName\n          type\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GbifNetworkParticipants {\n    nodeSteeringGroup {\n      name\n      title\n      institutionName\n      address\n      addressCountry\n      email\n      role\n      contact {\n        participants {\n          id\n          name\n          gbifRegion\n        }\n      }\n    }\n    nodeSearch(limit: 1000) {\n      results {\n        type\n        country\n        identifiers {\n          type\n          identifier\n        }\n        participant {\n          id\n          participationStatus\n          membershipStart\n          name\n          gbifRegion\n          countryCode\n        }\n        contacts(type: [\"HEAD_OF_DELEGATION\", \"NODE_MANAGER\"]) {\n          firstName\n          lastName\n          type\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DatasetStubResult on DatasetSearchStub {\n    key\n    title\n    excerpt\n    type\n    publishingOrganizationTitle\n  }\n"): (typeof documents)["\n  fragment DatasetStubResult on DatasetSearchStub {\n    key\n    title\n    excerpt\n    type\n    publishingOrganizationTitle\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DatasetResult on Dataset {\n    key\n    title\n    excerpt\n    type\n    publishingOrganizationTitle\n  }\n"): (typeof documents)["\n  fragment DatasetResult on Dataset {\n    key\n    title\n    excerpt\n    type\n    publishingOrganizationTitle\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DatasetInsights(\n    $datasetPredicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $taxonPredicate: Predicate\n    $yearPredicate: Predicate\n    $eventPredicate: Predicate\n    $sitePredicate: Predicate\n  ) {\n    siteOccurrences: occurrenceSearch(predicate: $sitePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    unfiltered: occurrenceSearch(predicate: $datasetPredicate) {\n      documents(size: 0) {\n        total\n      }\n      cardinality {\n        eventId\n      }\n      facet {\n        dwcaExtension {\n          key\n          count\n        }\n      }\n    }\n    images: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 10) {\n        total\n        results {\n          key\n          stillImages {\n            identifier: thumbor(height: 400)\n          }\n        }\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withTaxonMatch: occurrenceSearch(predicate: $taxonPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withYear: occurrenceSearch(predicate: $yearPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withEventId: occurrenceSearch(predicate: $eventPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query DatasetInsights(\n    $datasetPredicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $taxonPredicate: Predicate\n    $yearPredicate: Predicate\n    $eventPredicate: Predicate\n    $sitePredicate: Predicate\n  ) {\n    siteOccurrences: occurrenceSearch(predicate: $sitePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    unfiltered: occurrenceSearch(predicate: $datasetPredicate) {\n      documents(size: 0) {\n        total\n      }\n      cardinality {\n        eventId\n      }\n      facet {\n        dwcaExtension {\n          key\n          count\n        }\n      }\n    }\n    images: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 10) {\n        total\n        results {\n          key\n          stillImages {\n            identifier: thumbor(height: 400)\n          }\n        }\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withTaxonMatch: occurrenceSearch(predicate: $taxonPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withYear: occurrenceSearch(predicate: $yearPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n    withEventId: occurrenceSearch(predicate: $eventPredicate) {\n      documents(size: 10) {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Dataset($key: ID!) {\n    literatureSearch(gbifDatasetKey: [$key]) {\n      documents {\n        total\n      }\n    }\n    totalTaxa: taxonSearch(datasetKey: [$key], origin: [SOURCE]) {\n      count\n    }\n    accepted: taxonSearch(datasetKey: [$key], origin: [SOURCE], status: [ACCEPTED]) {\n      count\n    }\n    synonyms: taxonSearch(\n      datasetKey: [$key]\n      origin: [SOURCE]\n      status: [SYNONYM, HETEROTYPIC_SYNONYM, PROPARTE_SYNONYM, HOMOTYPIC_SYNONYM]\n    ) {\n      count\n    }\n    dataset(key: $key) {\n      key\n      checklistBankDataset {\n        key\n      }\n      type\n      title\n      created\n      modified\n      deleted\n      duplicateOfDataset {\n        key\n        title\n      }\n      metrics {\n        colCoveragePct\n        nubCoveragePct\n        nubMatchingCount\n        colMatchingCount\n      }\n      pubDate\n      description\n      purpose\n      temporalCoverages\n      logoUrl\n      publishingOrganizationKey\n      publishingOrganizationTitle\n      homepage\n      additionalInfo\n      installation {\n        key\n        title\n        organization {\n          key\n          title\n        }\n      }\n      volatileContributors {\n        key\n        firstName\n        lastName\n        position\n        organization\n        address\n        userId\n        email\n        phone\n        type\n        _highlighted\n        roles\n      }\n      contactsCitation {\n        key\n        abbreviatedName\n        firstName\n        lastName\n        userId\n        roles\n      }\n      geographicCoverages {\n        description\n        boundingBox {\n          minLatitude\n          maxLatitude\n          minLongitude\n          maxLongitude\n          globalCoverage\n        }\n      }\n      taxonomicCoverages {\n        description\n        coverages {\n          scientificName\n          commonName\n          rank {\n            interpreted\n          }\n        }\n      }\n      bibliographicCitations {\n        identifier\n        text\n      }\n      samplingDescription {\n        studyExtent\n        sampling\n        qualityControl\n        methodSteps\n      }\n      dataDescriptions {\n        charset\n        name\n        format\n        formatVersion\n        url\n      }\n      citation {\n        text\n      }\n      license\n      project {\n        title\n        abstract\n        studyAreaDescription\n        designDescription\n        funding\n        contacts {\n          firstName\n          lastName\n\n          organization\n          position\n          roles\n          type\n\n          address\n          city\n          postalCode\n          province\n          country\n\n          homepage\n          email\n          phone\n          userId\n        }\n        identifier\n      }\n      endpoints {\n        key\n        type\n        url\n      }\n      identifiers(limit: 50) {\n        key\n        type\n        identifier\n      }\n      doi\n      machineTags {\n        namespace\n        name\n        value\n      }\n      gridded {\n        percent\n      }\n    }\n  }\n"): (typeof documents)["\n  query Dataset($key: ID!) {\n    literatureSearch(gbifDatasetKey: [$key]) {\n      documents {\n        total\n      }\n    }\n    totalTaxa: taxonSearch(datasetKey: [$key], origin: [SOURCE]) {\n      count\n    }\n    accepted: taxonSearch(datasetKey: [$key], origin: [SOURCE], status: [ACCEPTED]) {\n      count\n    }\n    synonyms: taxonSearch(\n      datasetKey: [$key]\n      origin: [SOURCE]\n      status: [SYNONYM, HETEROTYPIC_SYNONYM, PROPARTE_SYNONYM, HOMOTYPIC_SYNONYM]\n    ) {\n      count\n    }\n    dataset(key: $key) {\n      key\n      checklistBankDataset {\n        key\n      }\n      type\n      title\n      created\n      modified\n      deleted\n      duplicateOfDataset {\n        key\n        title\n      }\n      metrics {\n        colCoveragePct\n        nubCoveragePct\n        nubMatchingCount\n        colMatchingCount\n      }\n      pubDate\n      description\n      purpose\n      temporalCoverages\n      logoUrl\n      publishingOrganizationKey\n      publishingOrganizationTitle\n      homepage\n      additionalInfo\n      installation {\n        key\n        title\n        organization {\n          key\n          title\n        }\n      }\n      volatileContributors {\n        key\n        firstName\n        lastName\n        position\n        organization\n        address\n        userId\n        email\n        phone\n        type\n        _highlighted\n        roles\n      }\n      contactsCitation {\n        key\n        abbreviatedName\n        firstName\n        lastName\n        userId\n        roles\n      }\n      geographicCoverages {\n        description\n        boundingBox {\n          minLatitude\n          maxLatitude\n          minLongitude\n          maxLongitude\n          globalCoverage\n        }\n      }\n      taxonomicCoverages {\n        description\n        coverages {\n          scientificName\n          commonName\n          rank {\n            interpreted\n          }\n        }\n      }\n      bibliographicCitations {\n        identifier\n        text\n      }\n      samplingDescription {\n        studyExtent\n        sampling\n        qualityControl\n        methodSteps\n      }\n      dataDescriptions {\n        charset\n        name\n        format\n        formatVersion\n        url\n      }\n      citation {\n        text\n      }\n      license\n      project {\n        title\n        abstract\n        studyAreaDescription\n        designDescription\n        funding\n        contacts {\n          firstName\n          lastName\n\n          organization\n          position\n          roles\n          type\n\n          address\n          city\n          postalCode\n          province\n          country\n\n          homepage\n          email\n          phone\n          userId\n        }\n        identifier\n      }\n      endpoints {\n        key\n        type\n        url\n      }\n      identifiers(limit: 50) {\n        key\n        type\n        identifier\n      }\n      doi\n      machineTags {\n        namespace\n        name\n        value\n      }\n      gridded {\n        percent\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DatasetOccurrenceSearch(\n    $from: Int\n    $size: Int\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          dynamicProperties\n        }\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query DatasetOccurrenceSearch(\n    $from: Int\n    $size: Int\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          dynamicProperties\n        }\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DatasetSearch($query: DatasetSearchInput) {\n    datasetSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n  }\n"): (typeof documents)["\n  query DatasetSearch($query: DatasetSearchInput) {\n    datasetSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query DatasetHostingFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: hostingOrg {\n            name\n            count\n            item: organization {\n              title\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query DatasetHostingFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: hostingOrg {\n            name\n            count\n            item: organization {\n              title\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query DatasetProjectFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: projectId {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query DatasetProjectFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: projectId {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query DatasetPublishingCountryFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: publishingCountry {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query DatasetPublishingCountryFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: publishingCountry {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query DatasetLicenceFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: license {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query DatasetLicenceFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: license {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query DatasetTypeFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: type {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query DatasetTypeFacet($query: DatasetSearchInput) {\n      search: datasetSearch(query: $query) {\n        facet {\n          field: type {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment HomePageCountIcons on Home {\n    occurrenceIcon {\n      file {\n        url\n      }\n    }\n    datasetIcon {\n      file {\n        url\n      }\n    }\n    publisherIcon {\n      file {\n        url\n      }\n    }\n    literatureIcon {\n      file {\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment HomePageCountIcons on Home {\n    occurrenceIcon {\n      file {\n        url\n      }\n    }\n    datasetIcon {\n      file {\n        url\n      }\n    }\n    publisherIcon {\n      file {\n        url\n      }\n    }\n    literatureIcon {\n      file {\n        url\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HomePage {\n    gbifHome {\n      title\n      summary\n      primaryImage {\n        file {\n          url\n          thumbor\n        }\n        title\n        description\n      }\n      ...HomePageCountIcons\n      blocks {\n        ...BlockItemDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  query HomePage {\n    gbifHome {\n      title\n      summary\n      primaryImage {\n        file {\n          url\n          thumbor\n        }\n        title\n        description\n      }\n      ...HomePageCountIcons\n      blocks {\n        ...BlockItemDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query InstallationDatasets($installation: ID!, $limit: Int!, $offset: Int!) {\n    installation(key: $installation) {\n      dataset(limit: $limit, offset: $offset) {\n        limit\n        offset\n        count\n        endOfRecords\n        results {\n          ...DatasetResult\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query InstallationDatasets($installation: ID!, $limit: Int!, $offset: Int!) {\n    installation(key: $installation) {\n      dataset(limit: $limit, offset: $offset) {\n        limit\n        offset\n        count\n        endOfRecords\n        results {\n          ...DatasetResult\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Installation($key: ID!) {\n    installation(key: $key) {\n      key\n      title\n      description\n      deleted\n      created\n      homepage\n      type\n      endpoints {\n        type\n        url\n      }\n      organization {\n        key\n        title\n      }\n      contacts {\n        key\n        type\n        firstName\n        lastName\n        email\n        phone\n        homepage\n        organization\n        roles\n        userId\n      }\n\n      dataset(limit: 0) {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query Installation($key: ID!) {\n    installation(key: $key) {\n      key\n      title\n      description\n      deleted\n      created\n      homepage\n      type\n      endpoints {\n        type\n        url\n      }\n      organization {\n        key\n        title\n      }\n      contacts {\n        key\n        type\n        firstName\n        lastName\n        email\n        phone\n        homepage\n        organization\n        roles\n        userId\n      }\n\n      dataset(limit: 0) {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query orphanCollectionCodesForInstitution($predicate: Predicate) {\n    orphaned: occurrenceSearch(predicate: $predicate) {\n      cardinality {\n        collectionCode\n      }\n      facet {\n        collectionCode(size: 10) {\n          key\n          count\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query orphanCollectionCodesForInstitution($predicate: Predicate) {\n    orphaned: occurrenceSearch(predicate: $predicate) {\n      cardinality {\n        collectionCode\n      }\n      facet {\n        collectionCode(size: 10) {\n          key\n          count\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Institution($key: ID!, $collectionScope: CollectionSearchInput) {\n    institution(key: $key) {\n      key\n      code\n      name\n      description\n      active\n      email\n      phone\n      homepage\n      catalogUrls\n      alternativeCodes {\n        code\n        description\n      }\n      types\n      apiUrls\n      institutionalGovernances\n      disciplines\n      latitude\n      longitude\n      additionalNames\n      foundingDate\n      numberSpecimens\n      logoUrl\n\n      featuredImageUrl: thumbor(width: 1000, height: 667)\n      featuredImageLicense\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile(onlyIfNoImageUrl: true, timeoutMs: 300)\n\n      masterSourceMetadata {\n        key\n        source\n        sourceId\n      }\n\n      created\n      deleted\n      modified\n      modifiedBy\n      replacedByInstitution {\n        name\n        key\n      }\n\n      identifiers {\n        identifier\n        type\n        primary\n      }\n      contactPersons {\n        key\n        firstName\n        lastName\n        phone\n        email\n        taxonomicExpertise\n        primary\n        position\n        userIds {\n          type\n          id\n        }\n      }\n      numberSpecimens\n\n      mailingAddress {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      address {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      collectionCount(query: $collectionScope)\n    }\n  }\n"): (typeof documents)["\n  query Institution($key: ID!, $collectionScope: CollectionSearchInput) {\n    institution(key: $key) {\n      key\n      code\n      name\n      description\n      active\n      email\n      phone\n      homepage\n      catalogUrls\n      alternativeCodes {\n        code\n        description\n      }\n      types\n      apiUrls\n      institutionalGovernances\n      disciplines\n      latitude\n      longitude\n      additionalNames\n      foundingDate\n      numberSpecimens\n      logoUrl\n\n      featuredImageUrl: thumbor(width: 1000, height: 667)\n      featuredImageLicense\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile(onlyIfNoImageUrl: true, timeoutMs: 300)\n\n      masterSourceMetadata {\n        key\n        source\n        sourceId\n      }\n\n      created\n      deleted\n      modified\n      modifiedBy\n      replacedByInstitution {\n        name\n        key\n      }\n\n      identifiers {\n        identifier\n        type\n        primary\n      }\n      contactPersons {\n        key\n        firstName\n        lastName\n        phone\n        email\n        taxonomicExpertise\n        primary\n        position\n        userIds {\n          type\n          id\n        }\n      }\n      numberSpecimens\n\n      mailingAddress {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      address {\n        address\n        city\n        province\n        postalCode\n        country\n      }\n      collectionCount(query: $collectionScope)\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query InstitutionSummaryMetrics(\n    $key: ID!\n    $collectionScope: CollectionSearchInput\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    institution(key: $key) {\n      key\n      collections(limit: 200, query: $collectionScope) {\n        key\n        excerpt\n        code\n        name\n        active\n        numberSpecimens\n        richness\n        occurrenceCount\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query InstitutionSummaryMetrics(\n    $key: ID!\n    $collectionScope: CollectionSearchInput\n    $predicate: Predicate\n    $imagePredicate: Predicate\n    $coordinatePredicate: Predicate\n    $clusterPredicate: Predicate\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    institution(key: $key) {\n      key\n      collections(limit: 200, query: $collectionScope) {\n        key\n        excerpt\n        code\n        name\n        active\n        numberSpecimens\n        richness\n        occurrenceCount\n      }\n    }\n    withImages: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    withClusters: occurrenceSearch(predicate: $clusterPredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query InstitutionFallbackImage($key: ID!) {\n    institution(key: $key) {\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile(\n        onlyIfNoImageUrl: true\n        timeoutMs: 3000\n      )\n    }\n  }\n"): (typeof documents)["\n  query InstitutionFallbackImage($key: ID!) {\n    institution(key: $key) {\n      featuredImageUrl_fallback: homepageOGImageUrl_volatile(\n        onlyIfNoImageUrl: true\n        timeoutMs: 3000\n      )\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query InstitutionCityFacet($query: InstitutionSearchInput, $limit: Int) {\n      search: institutionSearch(query: $query) {\n        facet {\n          field: city(limit: $limit) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query InstitutionCityFacet($query: InstitutionSearchInput, $limit: Int) {\n      search: institutionSearch(query: $query) {\n        facet {\n          field: city(limit: $limit) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query InstitutionDisciplineFacet($query: InstitutionSearchInput, $limit: Int) {\n      search: institutionSearch(query: $query) {\n        facet {\n          field: discipline(limit: $limit) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query InstitutionDisciplineFacet($query: InstitutionSearchInput, $limit: Int) {\n      search: institutionSearch(query: $query) {\n        facet {\n          field: discipline(limit: $limit) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query InstitutionTypeStatusFacet($query: InstitutionSearchInput, $limit: Int) {\n      search: institutionSearch(query: $query) {\n        facet {\n          field: type(limit: $limit) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query InstitutionTypeStatusFacet($query: InstitutionSearchInput, $limit: Int) {\n      search: institutionSearch(query: $query) {\n        facet {\n          field: type(limit: $limit) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment InstitutionResult on InstitutionSearchEntity {\n    key\n    name\n    active\n    code\n    excerpt\n    country\n    mailingCountry\n    collectionCount(query: $collectionScope)\n    numberSpecimens\n    occurrenceCount\n    featuredImageUrl: thumbor(width: 300, height: 200)\n    featuredImageLicense\n  }\n"): (typeof documents)["\n  fragment InstitutionResult on InstitutionSearchEntity {\n    key\n    name\n    active\n    code\n    excerpt\n    country\n    mailingCountry\n    collectionCount(query: $collectionScope)\n    numberSpecimens\n    occurrenceCount\n    featuredImageUrl: thumbor(width: 300, height: 200)\n    featuredImageLicense\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query InstitutionSearch($query: InstitutionSearchInput, $collectionScope: CollectionSearchInput) {\n    institutionSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...InstitutionResult\n      }\n    }\n  }\n"): (typeof documents)["\n  query InstitutionSearch($query: InstitutionSearchInput, $collectionScope: CollectionSearchInput) {\n    institutionSearch(query: $query) {\n      count\n      limit\n      offset\n      results {\n        ...InstitutionResult\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment LiteratureResult on Literature {\n    id\n    title\n    literatureType\n    year\n    relevance\n    topics\n    excerpt\n  }\n"): (typeof documents)["\n  fragment LiteratureResult on Literature {\n    id\n    title\n    literatureType\n    year\n    relevance\n    topics\n    excerpt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query LiteratureCoverageCountryFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: countriesOfCoverage {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query LiteratureCoverageCountryFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: countriesOfCoverage {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query LiteratureRelevanceFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: relevance(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query LiteratureRelevanceFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: relevance(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query LiteratureTopicsFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: topics(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query LiteratureTopicsFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: topics(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query LiteratureOpenAccessFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: openAccess {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query LiteratureOpenAccessFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: openAccess {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query LiteraturePeerReviewFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: peerReview {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query LiteraturePeerReviewFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: peerReview {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query LiteraturePublisherFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: publisher(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query LiteraturePublisherFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: publisher(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query LiteratureSourceFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: source(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query LiteratureSourceFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: source(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query LiteratureGbifProgrammeAcronymFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: gbifProgrammeAcronym(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query LiteratureGbifProgrammeAcronymFacet($predicate: Predicate) {\n      search: literatureSearch(predicate: $predicate) {\n        facet {\n          field: gbifProgrammeAcronym(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LiteratureListSearch($predicate: Predicate, $size: Int, $from: Int) {\n    literatureSearch(predicate: $predicate, size: $size, from: $from) {\n      documents {\n        size\n        from\n        total\n        results {\n          id\n          title\n          excerpt\n          countriesOfResearcher\n          countriesOfCoverage\n          year\n          identifiers {\n            doi\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query LiteratureListSearch($predicate: Predicate, $size: Int, $from: Int) {\n    literatureSearch(predicate: $predicate, size: $size, from: $from) {\n      documents {\n        size\n        from\n        total\n        results {\n          id\n          title\n          excerpt\n          countriesOfResearcher\n          countriesOfCoverage\n          year\n          identifiers {\n            doi\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LiteratureTableSearch($from: Int, $size: Int, $predicate: Predicate) {\n    literatureSearch(predicate: $predicate) {\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          id\n          title\n          abstract\n          authors {\n            firstName\n            lastName\n          }\n          countriesOfCoverage\n          countriesOfResearcher\n          day\n          month\n          year\n          gbifRegion\n          identifiers {\n            doi\n          }\n          keywords\n          language\n          literatureType\n          openAccess\n          peerReview\n          publisher\n          relevance\n          source\n          tags\n          topics\n          websites\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query LiteratureTableSearch($from: Int, $size: Int, $predicate: Predicate) {\n    literatureSearch(predicate: $predicate) {\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          id\n          title\n          abstract\n          authors {\n            firstName\n            lastName\n          }\n          countriesOfCoverage\n          countriesOfResearcher\n          day\n          month\n          year\n          gbifRegion\n          identifiers {\n            doi\n          }\n          keywords\n          language\n          literatureType\n          openAccess\n          peerReview\n          publisher\n          relevance\n          source\n          tags\n          topics\n          websites\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment NetworkAboutTab on NetworkProse {\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment NetworkAboutTab on NetworkProse {\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NetworkDatasets($network: ID!, $limit: Int!, $offset: Int!) {\n    network(key: $network) {\n      constituents(limit: $limit, offset: $offset) {\n        limit\n        offset\n        count\n        endOfRecords\n        results {\n          ...DatasetResult\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query NetworkDatasets($network: ID!, $limit: Int!, $offset: Int!) {\n    network(key: $network) {\n      constituents(limit: $limit, offset: $offset) {\n        limit\n        offset\n        count\n        endOfRecords\n        results {\n          ...DatasetResult\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Network($key: ID!, $predicate: Predicate) {\n    network(key: $key) {\n      key\n      title\n      deleted\n      created\n      homepage\n      prose {\n        ...NetworkAboutTab\n      }\n      numConstituents\n    }\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    literatureSearch(gbifNetworkKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query Network($key: ID!, $predicate: Predicate) {\n    network(key: $key) {\n      key\n      title\n      deleted\n      created\n      homepage\n      prose {\n        ...NetworkAboutTab\n      }\n      numConstituents\n    }\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n    literatureSearch(gbifNetworkKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NetworkPublishers($network: ID!, $limit: Int!, $offset: Int!) {\n    network(key: $network) {\n      organizations(limit: $limit, offset: $offset) {\n        limit\n        count\n        offset\n        results {\n          key\n          title\n          created\n          country\n          logoUrl\n          excerpt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query NetworkPublishers($network: ID!, $limit: Int!, $offset: Int!) {\n    network(key: $network) {\n      organizations(limit: $limit, offset: $offset) {\n        limit\n        count\n        offset\n        results {\n          key\n          title\n          created\n          country\n          logoUrl\n          excerpt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment NetworkProseResult on NetworkProse {\n    id\n    title\n    excerpt\n    networkKey\n    primaryImage {\n      ...ResultCardImage\n    }\n    createdAt\n  }\n"): (typeof documents)["\n  fragment NetworkProseResult on NetworkProse {\n    id\n    title\n    excerpt\n    networkKey\n    primaryImage {\n      ...ResultCardImage\n    }\n    createdAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DownloadKey($key: ID!) {\n    download(key: $key) {\n      created\n      doi\n      downloadLink\n      eraseAfter\n      key\n      license\n      modified\n      numberDatasets\n      numberOrganizations\n      numberPublishingCountries\n      request {\n        predicate\n        sql: sqlFormatted\n        format\n        description\n        gbifMachineDescription\n      }\n      size\n      status\n      totalRecords\n    }\n    datasetsByDownload(key: $key, limit: 50, offset: 0) {\n      limit\n      offset\n      endOfRecords\n      count\n      results {\n        datasetKey\n        datasetTitle\n        numberRecords\n      }\n    }\n  }\n"): (typeof documents)["\n  query DownloadKey($key: ID!) {\n    download(key: $key) {\n      created\n      doi\n      downloadLink\n      eraseAfter\n      key\n      license\n      modified\n      numberDatasets\n      numberOrganizations\n      numberPublishingCountries\n      request {\n        predicate\n        sql: sqlFormatted\n        format\n        description\n        gbifMachineDescription\n      }\n      size\n      status\n      totalRecords\n    }\n    datasetsByDownload(key: $key, limit: 50, offset: 0) {\n      limit\n      offset\n      endOfRecords\n      count\n      results {\n        datasetKey\n        datasetTitle\n        numberRecords\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SlowDownloadKey($key: ID!) {\n    literatureSearch(gbifDownloadKey: [$key], size: 0) {\n      documents {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query SlowDownloadKey($key: ID!) {\n    literatureSearch(gbifDownloadKey: [$key], size: 0) {\n      documents {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DownloadKeyDatasets($key: ID!, $limit: Int, $offset: Int) {\n    datasetsByDownload(key: $key, limit: $limit, offset: $offset) {\n      limit\n      offset\n      endOfRecords\n      count\n      results {\n        datasetKey\n        datasetTitle\n        numberRecords\n      }\n    }\n  }\n"): (typeof documents)["\n  query DownloadKeyDatasets($key: ID!, $limit: Int, $offset: Int) {\n    datasetsByDownload(key: $key, limit: $limit, offset: $offset) {\n      limit\n      offset\n      endOfRecords\n      count\n      results {\n        datasetKey\n        datasetTitle\n        numberRecords\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PersonKey($type: String!, $value: String!) {\n    person(type: $type, value: $value) {\n      name\n      birthDate\n      deathDate\n      image\n    }\n  }\n"): (typeof documents)["\n  query PersonKey($type: String!, $value: String!) {\n    person(type: $type, value: $value) {\n      name\n      birthDate\n      deathDate\n      image\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OccurrenceCluster($key: ID!) {\n    occurrence(key: $key) {\n      related {\n        count\n        currentOccurrence {\n          stub {\n            ...RelatedOccurrenceStub\n          }\n          occurrence {\n            ...RelatedOccurrenceDetails\n          }\n        }\n        relatedOccurrences {\n          reasons\n          stub {\n            ...RelatedOccurrenceStub\n          }\n          occurrence {\n            ...RelatedOccurrenceDetails\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OccurrenceCluster($key: ID!) {\n    occurrence(key: $key) {\n      related {\n        count\n        currentOccurrence {\n          stub {\n            ...RelatedOccurrenceStub\n          }\n          occurrence {\n            ...RelatedOccurrenceDetails\n          }\n        }\n        relatedOccurrences {\n          reasons\n          stub {\n            ...RelatedOccurrenceStub\n          }\n          occurrence {\n            ...RelatedOccurrenceDetails\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RelatedOccurrenceStub on RelatedOccurrenceStub {\n    gbifId\n    occurrenceID\n    catalogNumber\n    publishingOrgKey\n    publishingOrgName\n    datasetKey\n    scientificName\n  }\n"): (typeof documents)["\n  fragment RelatedOccurrenceStub on RelatedOccurrenceStub {\n    gbifId\n    occurrenceID\n    catalogNumber\n    publishingOrgKey\n    publishingOrgName\n    datasetKey\n    scientificName\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RelatedOccurrenceDetails on Occurrence {\n    key\n    basisOfRecord\n    datasetTitle\n    publisherTitle\n    coordinates\n    typeStatus\n    soundCount\n    stillImageCount\n    movingImageCount\n    formattedCoordinates\n    eventDate\n    primaryImage {\n      identifier\n    }\n    gbifClassification {\n      usage {\n        formattedName(useFallback: true)\n      }\n    }\n    volatile {\n      features {\n        isSequenced\n        isSamplingEvent\n        isTreament\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment RelatedOccurrenceDetails on Occurrence {\n    key\n    basisOfRecord\n    datasetTitle\n    publisherTitle\n    coordinates\n    typeStatus\n    soundCount\n    stillImageCount\n    movingImageCount\n    formattedCoordinates\n    eventDate\n    primaryImage {\n      identifier\n    }\n    gbifClassification {\n      usage {\n        formattedName(useFallback: true)\n      }\n    }\n    volatile {\n      features {\n        isSequenced\n        isSamplingEvent\n        isTreament\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OccurrenceExists($key: ID!) {\n    occurrence(key: $key) {\n      key\n    }\n  }\n"): (typeof documents)["\n  query OccurrenceExists($key: ID!) {\n    occurrence(key: $key) {\n      key\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Occurrence($key: ID!) {\n    occurrence(key: $key) {\n      key\n      coordinates\n      organismName\n      lastCrawled\n      countryCode\n      stateProvince\n      locality\n      eventDate\n      typeStatus\n      references\n      issues\n      basisOfRecord\n      dynamicProperties\n      institutionKey\n      collectionKey\n      isInCluster\n      volatile {\n        globe(sphere: false, land: false, graticule: false) {\n          svg\n          lat\n          lon\n        }\n        features {\n          isSpecimen\n          isTreament\n          isSequenced\n          isClustered\n          isSamplingEvent\n          firstIIIF\n        }\n      }\n      datasetKey\n      datasetTitle\n      publishingOrgKey\n      publisherTitle\n      dataset {\n        citation {\n          text\n        }\n      }\n      institutionCode\n\n      extensions {\n        audubon\n        amplification\n        germplasmAccession\n        germplasmMeasurementScore\n        germplasmMeasurementTrait\n        germplasmMeasurementTrial\n        identification\n        identifier\n        image\n        measurementOrFact\n        multimedia\n        reference\n        eolReference\n        resourceRelationship\n        cloning\n        gelImage\n        loan\n        materialSample\n        permit\n        preparation\n        preservation\n        extendedMeasurementOrFact\n        chronometricAge\n        dnaDerivedData\n      }\n\n      gadm\n\n      stillImageCount\n      movingImageCount\n      soundCount\n      stillImages {\n        ...OccurrenceMediaDetails\n      }\n      sounds {\n        ...OccurrenceMediaDetails\n      }\n      movingImages {\n        ...OccurrenceMediaDetails\n      }\n\n      gbifClassification {\n        kingdom\n        kingdomKey\n        phylum\n        phylumKey\n        class\n        classKey\n        order\n        orderKey\n        family\n        familyKey\n        genus\n        genusKey\n        species\n        speciesKey\n        synonym\n        classification {\n          key\n          rank\n          name\n        }\n        usage {\n          rank\n          formattedName(useFallback: true)\n          key\n        }\n        acceptedUsage {\n          formattedName(useFallback: true)\n          key\n        }\n      }\n      primaryImage {\n        identifier\n      }\n      terms {\n        ...OccurrenceTerm\n      }\n      scientificName\n      recordedByIDs {\n        type\n        value\n      }\n      identifiedByIDs {\n        type\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query Occurrence($key: ID!) {\n    occurrence(key: $key) {\n      key\n      coordinates\n      organismName\n      lastCrawled\n      countryCode\n      stateProvince\n      locality\n      eventDate\n      typeStatus\n      references\n      issues\n      basisOfRecord\n      dynamicProperties\n      institutionKey\n      collectionKey\n      isInCluster\n      volatile {\n        globe(sphere: false, land: false, graticule: false) {\n          svg\n          lat\n          lon\n        }\n        features {\n          isSpecimen\n          isTreament\n          isSequenced\n          isClustered\n          isSamplingEvent\n          firstIIIF\n        }\n      }\n      datasetKey\n      datasetTitle\n      publishingOrgKey\n      publisherTitle\n      dataset {\n        citation {\n          text\n        }\n      }\n      institutionCode\n\n      extensions {\n        audubon\n        amplification\n        germplasmAccession\n        germplasmMeasurementScore\n        germplasmMeasurementTrait\n        germplasmMeasurementTrial\n        identification\n        identifier\n        image\n        measurementOrFact\n        multimedia\n        reference\n        eolReference\n        resourceRelationship\n        cloning\n        gelImage\n        loan\n        materialSample\n        permit\n        preparation\n        preservation\n        extendedMeasurementOrFact\n        chronometricAge\n        dnaDerivedData\n      }\n\n      gadm\n\n      stillImageCount\n      movingImageCount\n      soundCount\n      stillImages {\n        ...OccurrenceMediaDetails\n      }\n      sounds {\n        ...OccurrenceMediaDetails\n      }\n      movingImages {\n        ...OccurrenceMediaDetails\n      }\n\n      gbifClassification {\n        kingdom\n        kingdomKey\n        phylum\n        phylumKey\n        class\n        classKey\n        order\n        orderKey\n        family\n        familyKey\n        genus\n        genusKey\n        species\n        speciesKey\n        synonym\n        classification {\n          key\n          rank\n          name\n        }\n        usage {\n          rank\n          formattedName(useFallback: true)\n          key\n        }\n        acceptedUsage {\n          formattedName(useFallback: true)\n          key\n        }\n      }\n      primaryImage {\n        identifier\n      }\n      terms {\n        ...OccurrenceTerm\n      }\n      scientificName\n      recordedByIDs {\n        type\n        value\n      }\n      identifiedByIDs {\n        type\n        value\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SlowOccurrenceKey($key: ID!, $language: String!, $source: String) {\n    occurrence(key: $key) {\n      key\n      institution {\n        name\n      }\n      collection {\n        name\n      }\n\n      acceptedTaxon {\n        vernacularNames(limit: 1, language: $language, source: $source) {\n          results {\n            vernacularName\n            source\n          }\n        }\n      }\n    }\n    literatureSearch(gbifOccurrenceKey: [$key]) {\n      documents(size: 100) {\n        results {\n          title\n          abstract\n          authors {\n            firstName\n            lastName\n          }\n          literatureType\n          year\n          identifiers {\n            doi\n          }\n          websites\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SlowOccurrenceKey($key: ID!, $language: String!, $source: String) {\n    occurrence(key: $key) {\n      key\n      institution {\n        name\n      }\n      collection {\n        name\n      }\n\n      acceptedTaxon {\n        vernacularNames(limit: 1, language: $language, source: $source) {\n          results {\n            vernacularName\n            source\n          }\n        }\n      }\n    }\n    literatureSearch(gbifOccurrenceKey: [$key]) {\n      documents(size: 100) {\n        results {\n          title\n          abstract\n          authors {\n            firstName\n            lastName\n          }\n          literatureType\n          year\n          identifiers {\n            doi\n          }\n          websites\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OccurrenceMediaDetails on MultimediaItem {\n    title\n    type\n    format\n    identifier\n    created\n    creator\n    license\n    publisher\n    references\n    rightsHolder\n    description\n    thumbor(height: 800)\n  }\n"): (typeof documents)["\n  fragment OccurrenceMediaDetails on MultimediaItem {\n    title\n    type\n    format\n    identifier\n    created\n    creator\n    license\n    publisher\n    references\n    rightsHolder\n    description\n    thumbor(height: 800)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OccurrenceTerm on Term {\n    simpleName\n    verbatim\n    value\n    htmlValue\n    remarks\n    issues\n  }\n"): (typeof documents)["\n  fragment OccurrenceTerm on Term {\n    simpleName\n    verbatim\n    value\n    htmlValue\n    remarks\n    issues\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceIsInClusterFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: isInCluster(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceIsInClusterFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: isInCluster(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceisSequencedFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: isSequenced(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceisSequencedFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: isSequenced(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceLicenseFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: license {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceLicenseFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: license {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceBoRFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: basisOfRecord {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceBoRFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: basisOfRecord {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceMediaFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: mediaType {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceMediaFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: mediaType {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceMonthFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: month(size: 12) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceMonthFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: month(size: 12) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceContinentFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: continent {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceContinentFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: continent {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceProtocolFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: protocol(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceProtocolFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: protocol(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceDwcaExtensionFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: dwcaExtension(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceDwcaExtensionFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: dwcaExtension(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceIucnFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: iucnRedListCategory(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceIucnFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: iucnRedListCategory(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceIssueFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: issue(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceIssueFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: issue(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceOccurrenceStatusFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: occurrenceStatus(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceOccurrenceStatusFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: occurrenceStatus(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceTypeStatusFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: typeStatus(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceTypeStatusFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: typeStatus(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceProjectIdFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: projectId(size: 50) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceProjectIdFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: projectId(size: 50) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrenceOrganismIdFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: organismId(size: 10) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrenceOrganismIdFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: organismId(size: 10) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query OccurrencehigherGeographyFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: higherGeography(size: 10) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query OccurrencehigherGeographyFacet($predicate: Predicate) {\n      search: occurrenceSearch(predicate: $predicate) {\n        facet {\n          field: higherGeography(size: 10) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query occurrenceMediaSearch($predicate: Predicate, $size: Int, $from: Int) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: $size, from: $from) {\n        total\n        size\n        from\n        results {\n          key\n          countryCode\n          locality\n          basisOfRecord\n          scientificName\n          typeStatus\n          eventDate\n          gbifClassification {\n            usage {\n              formattedName(useFallback: true)\n            }\n          }\n          primaryImage {\n            identifier: thumbor(height: 400)\n          }\n          formattedCoordinates\n          volatile {\n            features {\n              isSpecimen\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query occurrenceMediaSearch($predicate: Predicate, $size: Int, $from: Int) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(size: $size, from: $from) {\n        total\n        size\n        from\n        results {\n          key\n          countryCode\n          locality\n          basisOfRecord\n          scientificName\n          typeStatus\n          eventDate\n          gbifClassification {\n            usage {\n              formattedName(useFallback: true)\n            }\n          }\n          primaryImage {\n            identifier: thumbor(height: 400)\n          }\n          formattedCoordinates\n          volatile {\n            features {\n              isSpecimen\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OccurrenceSearch(\n    $from: Int\n    $size: Int\n    $predicate: Predicate\n    $language: String\n    $sortBy: OccurrenceSortBy\n    $sortOrder: SortOrder\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(from: $from, size: $size, sortBy: $sortBy, sortOrder: $sortOrder) {\n        from\n        size\n        total\n        results {\n          key\n          taxonKey\n          hasTaxonIssues\n          gbifClassification {\n            verbatimScientificName\n            usage {\n              rank\n              formattedName(useFallback: true)\n              key\n            }\n          }\n          taxon {\n            canonicalName\n          }\n          primaryImage {\n            thumbor(width: 80)\n          }\n          eventDate\n          year\n          coordinates\n          formattedCoordinates\n          country\n          countryCode\n          basisOfRecord\n          datasetTitle\n          datasetKey\n          publishingOrgKey\n          publisherTitle\n          catalogNumber\n          recordedBy\n          identifiedBy\n          recordNumber\n          typeStatus\n          preparations\n          institutionCode\n          institutionKey\n          institution {\n            code\n            name\n          }\n          collectionCode\n          collectionKey\n          collection {\n            code\n            name\n          }\n          locality\n          higherGeography\n          stateProvince\n          establishmentMeans\n          iucnRedListCategory\n          stillImageCount\n          movingImageCount\n          soundCount\n          issues(types: [\"WARNING\", \"ERROR\"])\n          volatile {\n            features {\n              isSequenced\n              isTreament\n              isClustered\n              isSamplingEvent\n            }\n            vernacularNames(language: $language, limit: 1) {\n              results {\n                vernacularName\n                source\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OccurrenceSearch(\n    $from: Int\n    $size: Int\n    $predicate: Predicate\n    $language: String\n    $sortBy: OccurrenceSortBy\n    $sortOrder: SortOrder\n  ) {\n    occurrenceSearch(predicate: $predicate) {\n      documents(from: $from, size: $size, sortBy: $sortBy, sortOrder: $sortOrder) {\n        from\n        size\n        total\n        results {\n          key\n          taxonKey\n          hasTaxonIssues\n          gbifClassification {\n            verbatimScientificName\n            usage {\n              rank\n              formattedName(useFallback: true)\n              key\n            }\n          }\n          taxon {\n            canonicalName\n          }\n          primaryImage {\n            thumbor(width: 80)\n          }\n          eventDate\n          year\n          coordinates\n          formattedCoordinates\n          country\n          countryCode\n          basisOfRecord\n          datasetTitle\n          datasetKey\n          publishingOrgKey\n          publisherTitle\n          catalogNumber\n          recordedBy\n          identifiedBy\n          recordNumber\n          typeStatus\n          preparations\n          institutionCode\n          institutionKey\n          institution {\n            code\n            name\n          }\n          collectionCode\n          collectionKey\n          collection {\n            code\n            name\n          }\n          locality\n          higherGeography\n          stateProvince\n          establishmentMeans\n          iucnRedListCategory\n          stillImageCount\n          movingImageCount\n          soundCount\n          issues(types: [\"WARNING\", \"ERROR\"])\n          volatile {\n            features {\n              isSequenced\n              isTreament\n              isClustered\n              isSamplingEvent\n            }\n            vernacularNames(language: $language, limit: 1) {\n              results {\n                vernacularName\n                source\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OmniSearch(\n    $resourcePredicate: Predicate\n    $resourceKeywordPredicate: Predicate\n    $taxonQuery: TaxonSearchInput\n    $datasetQuery: DatasetSearchInput\n    $q: String!\n  ) {\n    organizationSearch(isEndorsed: true, q: $q, limit: 3) {\n      limit\n      count\n      offset\n      results {\n        key\n        title\n        created\n        country\n        logoUrl\n        excerpt\n      }\n    }\n    datasetSearch(query: $datasetQuery) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n    taxonSearch(query: $taxonQuery, limit: 3) {\n      count\n      offset\n      endOfRecords\n      results {\n        ...TaxonResult\n        acceptedTaxon {\n          ...TaxonResult\n        }\n      }\n    }\n\n    resourceSearch(predicate: $resourcePredicate) {\n      documents(size: 5) {\n        from\n        size\n        total\n        results {\n          __typename\n          ... on Composition {\n            ...CompositionResult\n          }\n          ... on Article {\n            ...ArticleResult\n          }\n          ... on News {\n            ...NewsResult\n          }\n          ... on DataUse {\n            ...DataUseResult\n          }\n          ... on MeetingEvent {\n            ...EventResult\n          }\n          ... on GbifProject {\n            ...ProjectResult\n          }\n          ... on Programme {\n            ...ProgrammeResult\n          }\n          ... on Tool {\n            ...ToolResult\n          }\n          ... on Document {\n            ...DocumentResult\n          }\n          ... on NetworkProse {\n            ...NetworkProseResult\n          }\n        }\n      }\n    }\n\n    resourceKeywordSearch: resourceSearch(predicate: $resourceKeywordPredicate) {\n      documents(size: 5) {\n        from\n        size\n        total\n        results {\n          __typename\n          ... on Composition {\n            ...CompositionResult\n          }\n          ... on Article {\n            ...ArticleResult\n          }\n          ... on News {\n            ...NewsResult\n          }\n          ... on DataUse {\n            ...DataUseResult\n          }\n          ... on MeetingEvent {\n            ...EventResult\n          }\n          ... on GbifProject {\n            ...ProjectResult\n          }\n          ... on Programme {\n            ...ProgrammeResult\n          }\n          ... on Tool {\n            ...ToolResult\n          }\n          ... on Document {\n            ...DocumentResult\n          }\n          ... on NetworkProse {\n            ...NetworkProseResult\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OmniSearch(\n    $resourcePredicate: Predicate\n    $resourceKeywordPredicate: Predicate\n    $taxonQuery: TaxonSearchInput\n    $datasetQuery: DatasetSearchInput\n    $q: String!\n  ) {\n    organizationSearch(isEndorsed: true, q: $q, limit: 3) {\n      limit\n      count\n      offset\n      results {\n        key\n        title\n        created\n        country\n        logoUrl\n        excerpt\n      }\n    }\n    datasetSearch(query: $datasetQuery) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n    taxonSearch(query: $taxonQuery, limit: 3) {\n      count\n      offset\n      endOfRecords\n      results {\n        ...TaxonResult\n        acceptedTaxon {\n          ...TaxonResult\n        }\n      }\n    }\n\n    resourceSearch(predicate: $resourcePredicate) {\n      documents(size: 5) {\n        from\n        size\n        total\n        results {\n          __typename\n          ... on Composition {\n            ...CompositionResult\n          }\n          ... on Article {\n            ...ArticleResult\n          }\n          ... on News {\n            ...NewsResult\n          }\n          ... on DataUse {\n            ...DataUseResult\n          }\n          ... on MeetingEvent {\n            ...EventResult\n          }\n          ... on GbifProject {\n            ...ProjectResult\n          }\n          ... on Programme {\n            ...ProgrammeResult\n          }\n          ... on Tool {\n            ...ToolResult\n          }\n          ... on Document {\n            ...DocumentResult\n          }\n          ... on NetworkProse {\n            ...NetworkProseResult\n          }\n        }\n      }\n    }\n\n    resourceKeywordSearch: resourceSearch(predicate: $resourceKeywordPredicate) {\n      documents(size: 5) {\n        from\n        size\n        total\n        results {\n          __typename\n          ... on Composition {\n            ...CompositionResult\n          }\n          ... on Article {\n            ...ArticleResult\n          }\n          ... on News {\n            ...NewsResult\n          }\n          ... on DataUse {\n            ...DataUseResult\n          }\n          ... on MeetingEvent {\n            ...EventResult\n          }\n          ... on GbifProject {\n            ...ProjectResult\n          }\n          ... on Programme {\n            ...ProgrammeResult\n          }\n          ... on Tool {\n            ...ToolResult\n          }\n          ... on Document {\n            ...DocumentResult\n          }\n          ... on NetworkProse {\n            ...NetworkProseResult\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PublisherCounts($key: ID!, $jsonKey: JSON!) {\n    occurrenceSearch(predicate: { type: equals, key: \"publishingOrg\", value: $jsonKey }) {\n      documents(size: 0) {\n        total\n      }\n    }\n    hostedDatasets: datasetSearch(hostingOrg: [$key]) {\n      count\n    }\n    literatureSearch(publishingOrganizationKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query PublisherCounts($key: ID!, $jsonKey: JSON!) {\n    occurrenceSearch(predicate: { type: equals, key: \"publishingOrg\", value: $jsonKey }) {\n      documents(size: 0) {\n        total\n      }\n    }\n    hostedDatasets: datasetSearch(hostingOrg: [$key]) {\n      count\n    }\n    literatureSearch(publishingOrganizationKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Publisher($key: ID!) {\n    publisher: organization(key: $key) {\n      key\n      title\n      description\n      deleted\n      created\n      homepage\n      numPublishedDatasets\n      logoUrl: thumborLogoUrl(height: 500, width: 500, fitIn: true)\n\n      latitude\n      longitude\n      address\n      city\n      country\n      email\n      phone\n      postalCode\n      province\n\n      endorsingNode {\n        title\n        participant {\n          id\n          name\n          type\n          countryCode\n        }\n      }\n      endorsingNodeKey\n      endorsementApproved\n\n      installation {\n        count\n        results {\n          key\n          title\n        }\n      }\n\n      contacts {\n        key\n        type\n        firstName\n        lastName\n        email\n        phone\n        homepage\n        organization\n        roles\n        userId\n      }\n    }\n  }\n"): (typeof documents)["\n  query Publisher($key: ID!) {\n    publisher: organization(key: $key) {\n      key\n      title\n      description\n      deleted\n      created\n      homepage\n      numPublishedDatasets\n      logoUrl: thumborLogoUrl(height: 500, width: 500, fitIn: true)\n\n      latitude\n      longitude\n      address\n      city\n      country\n      email\n      phone\n      postalCode\n      province\n\n      endorsingNode {\n        title\n        participant {\n          id\n          name\n          type\n          countryCode\n        }\n      }\n      endorsingNodeKey\n      endorsementApproved\n\n      installation {\n        count\n        results {\n          key\n          title\n        }\n      }\n\n      contacts {\n        key\n        type\n        firstName\n        lastName\n        email\n        phone\n        homepage\n        organization\n        roles\n        userId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PublisherStats($key: ID!, $jsonKey: JSON!) {\n    occurrenceSearch(predicate: { type: equals, key: \"publishingOrg\", value: $jsonKey }) {\n      documents(size: 0) {\n        total\n      }\n    }\n    hostedDatasets: datasetSearch(hostingOrg: [$key]) {\n      count\n    }\n    literatureSearch(publishingOrganizationKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query PublisherStats($key: ID!, $jsonKey: JSON!) {\n    occurrenceSearch(predicate: { type: equals, key: \"publishingOrg\", value: $jsonKey }) {\n      documents(size: 0) {\n        total\n      }\n    }\n    hostedDatasets: datasetSearch(hostingOrg: [$key]) {\n      count\n    }\n    literatureSearch(publishingOrganizationKey: [$key]) {\n      documents {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PublisherResult on Organization {\n    key\n    title\n    created\n    country\n    logoUrl\n    excerpt\n  }\n"): (typeof documents)["\n  fragment PublisherResult on Organization {\n    key\n    title\n    created\n    country\n    logoUrl\n    excerpt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PublisherSearch(\n    $country: Country\n    $q: String\n    $isEndorsed: Boolean\n    $limit: Int\n    $offset: Int\n  ) {\n    list: organizationSearch(\n      isEndorsed: $isEndorsed\n      country: $country\n      q: $q\n      offset: $offset\n      limit: $limit\n    ) {\n      limit\n      count\n      offset\n      results {\n        key\n        title\n        created\n        country\n        logoUrl\n        excerpt\n      }\n    }\n  }\n"): (typeof documents)["\n  query PublisherSearch(\n    $country: Country\n    $q: String\n    $isEndorsed: Boolean\n    $limit: Int\n    $offset: Int\n  ) {\n    list: organizationSearch(\n      isEndorsed: $isEndorsed\n      country: $country\n      q: $q\n      offset: $offset\n      limit: $limit\n    ) {\n      limit\n      count\n      offset\n      results {\n        key\n        title\n        created\n        country\n        logoUrl\n        excerpt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AliasHandling($alias: String!) {\n    resource(alias: $alias) {\n      ...ResourceRedirectDetails\n    }\n  }\n"): (typeof documents)["\n  query AliasHandling($alias: String!) {\n    resource(alias: $alias) {\n      ...ResourceRedirectDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArticlePage on Article {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    documents {\n      ...DocumentPreview\n    }\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n"): (typeof documents)["\n  fragment ArticlePage on Article {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    documents {\n      ...DocumentPreview\n    }\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArticleResult on Article {\n    id\n    title\n    excerpt\n    urlAlias\n    primaryImage {\n      ...ResultCardImage\n    }\n  }\n"): (typeof documents)["\n  fragment ArticleResult on Article {\n    id\n    title\n    excerpt\n    urlAlias\n    primaryImage {\n      ...ResultCardImage\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArticleBanner on AssetImage {\n    description\n    title\n    file {\n      url\n      details {\n        image {\n          width\n          height\n        }\n      }\n      normal: thumbor(width: 1200, height: 500)\n      mobile: thumbor(width: 800, height: 400)\n    }\n  }\n"): (typeof documents)["\n  fragment ArticleBanner on AssetImage {\n    description\n    title\n    file {\n      url\n      details {\n        image {\n          width\n          height\n        }\n      }\n      normal: thumbor(width: 1200, height: 500)\n      mobile: thumbor(width: 800, height: 400)\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DocumentPreview on DocumentAsset {\n    title\n    file {\n      url\n      fileName\n      contentType\n      volatile_documentType\n      details {\n        size\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment DocumentPreview on DocumentAsset {\n    title\n    file {\n      url\n      fileName\n      contentType\n      volatile_documentType\n      details {\n        size\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FundingOrganisationDetails on FundingOrganisation {\n    id\n    title\n    url\n    logo {\n      title\n      file {\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment FundingOrganisationDetails on FundingOrganisation {\n    id\n    title\n    url\n    logo {\n      title\n      file {\n        url\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProgrammeFundingBanner on Programme {\n    __typename\n    fundingOrganisations {\n      ...FundingOrganisationDetails\n    }\n  }\n"): (typeof documents)["\n  fragment ProgrammeFundingBanner on Programme {\n    __typename\n    fundingOrganisations {\n      ...FundingOrganisationDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProjectFundingBanner on GbifProject {\n    __typename\n    fundsAllocated\n    programme {\n      ...ProgrammeFundingBanner\n    }\n    overrideProgrammeFunding {\n      ...FundingOrganisationDetails\n    }\n  }\n"): (typeof documents)["\n  fragment ProjectFundingBanner on GbifProject {\n    __typename\n    fundsAllocated\n    programme {\n      ...ProgrammeFundingBanner\n    }\n    overrideProgrammeFunding {\n      ...FundingOrganisationDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment BlockItemDetails on BlockItem {\n    __typename\n    ... on HeaderBlock {\n      id\n      ...HeaderBlockDetails\n    }\n    ... on FeatureBlock {\n      id\n      ...FeatureBlockDetails\n    }\n    ... on FeaturedTextBlock {\n      id\n      ...FeaturedTextBlockDetails\n    }\n    ... on CarouselBlock {\n      id\n      ...CarouselBlockDetails\n    }\n    ... on MediaBlock {\n      id\n      ...MediaBlockDetails\n    }\n    ... on MediaCountBlock {\n      id\n      ...MediaCountBlockDetails\n    }\n    ... on CustomComponentBlock {\n      id\n      ...CustomComponentBlockDetails\n    }\n    ... on TextBlock {\n      id\n      ...TextBlockDetails\n    }\n  }\n"): (typeof documents)["\n  fragment BlockItemDetails on BlockItem {\n    __typename\n    ... on HeaderBlock {\n      id\n      ...HeaderBlockDetails\n    }\n    ... on FeatureBlock {\n      id\n      ...FeatureBlockDetails\n    }\n    ... on FeaturedTextBlock {\n      id\n      ...FeaturedTextBlockDetails\n    }\n    ... on CarouselBlock {\n      id\n      ...CarouselBlockDetails\n    }\n    ... on MediaBlock {\n      id\n      ...MediaBlockDetails\n    }\n    ... on MediaCountBlock {\n      id\n      ...MediaCountBlockDetails\n    }\n    ... on CustomComponentBlock {\n      id\n      ...CustomComponentBlockDetails\n    }\n    ... on TextBlock {\n      id\n      ...TextBlockDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CarouselBlockDetails on CarouselBlock {\n    __typename\n    id\n    title\n    body\n    backgroundColour\n    features {\n      __typename\n      ... on MediaBlock {\n        ...MediaBlockDetails\n      }\n      ... on MediaCountBlock {\n        ...MediaCountBlockDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CarouselBlockDetails on CarouselBlock {\n    __typename\n    id\n    title\n    body\n    backgroundColour\n    features {\n      __typename\n      ... on MediaBlock {\n        ...MediaBlockDetails\n      }\n      ... on MediaCountBlock {\n        ...MediaCountBlockDetails\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CustomComponentBlockDetails on CustomComponentBlock {\n    id\n    componentType\n    title\n    width\n    backgroundColour\n    settings\n  }\n"): (typeof documents)["\n  fragment CustomComponentBlockDetails on CustomComponentBlock {\n    id\n    componentType\n    title\n    width\n    backgroundColour\n    settings\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OrganizationPreview($key: ID!) {\n    organization(key: $key) {\n      title\n      created\n      contacts {\n        email\n        firstName\n        lastName\n      }\n      description\n    }\n  }\n"): (typeof documents)["\n  query OrganizationPreview($key: ID!) {\n    organization(key: $key) {\n      title\n      created\n      contacts {\n        email\n        firstName\n        lastName\n      }\n      description\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TaiwanNode($identifier: String!) {\n    nodeSearch(identifierType: GBIF_PARTICIPANT, identifier: $identifier) {\n      results {\n        key\n        participantTitle\n        participationStatus\n        title\n      }\n    }\n  }\n"): (typeof documents)["\n  query TaiwanNode($identifier: String!) {\n    nodeSearch(identifierType: GBIF_PARTICIPANT, identifier: $identifier) {\n      results {\n        key\n        participantTitle\n        participationStatus\n        title\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NodeCountry($countryCode: String!) {\n    nodeCountry(countryCode: $countryCode) {\n      key\n      participantTitle\n      participationStatus\n      title\n    }\n  }\n"): (typeof documents)["\n  query NodeCountry($countryCode: String!) {\n    nodeCountry(countryCode: $countryCode) {\n      key\n      participantTitle\n      participationStatus\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NonCountryNode($identifier: String!) {\n    nodeSearch(identifierType: GBIF_PARTICIPANT, identifier: $identifier) {\n      results {\n        key\n        participantTitle\n      }\n    }\n  }\n"): (typeof documents)["\n  query NonCountryNode($identifier: String!) {\n    nodeSearch(identifierType: GBIF_PARTICIPANT, identifier: $identifier) {\n      results {\n        key\n        participantTitle\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Participants {\n    participantSearch(limit: 1000, type: COUNTRY) {\n      endOfRecords\n      results {\n        id\n        name\n        countryCode\n        participationStatus\n      }\n    }\n  }\n"): (typeof documents)["\n  query Participants {\n    participantSearch(limit: 1000, type: COUNTRY) {\n      endOfRecords\n      results {\n        id\n        name\n        countryCode\n        participationStatus\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FeatureBlockDetails on FeatureBlock {\n    __typename\n    maxPerRow\n    title\n    hideTitle\n    body\n    backgroundColour\n    features {\n      __typename\n      ... on Feature {\n        id\n        title\n        url\n        primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on News {\n        id\n        title\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on DataUse {\n        id\n        title\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on MeetingEvent {\n        id\n        title\n        start\n        end\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment FeatureBlockDetails on FeatureBlock {\n    __typename\n    maxPerRow\n    title\n    hideTitle\n    body\n    backgroundColour\n    features {\n      __typename\n      ... on Feature {\n        id\n        title\n        url\n        primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on News {\n        id\n        title\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on DataUse {\n        id\n        title\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n      ... on MeetingEvent {\n        id\n        title\n        start\n        end\n        optionalImg: primaryImage {\n          ...ProseCardImg\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FeaturedTextBlockDetails on FeaturedTextBlock {\n    __typename\n    id\n    title\n    hideTitle\n    body\n    backgroundColour\n  }\n"): (typeof documents)["\n  fragment FeaturedTextBlockDetails on FeaturedTextBlock {\n    __typename\n    id\n    title\n    hideTitle\n    body\n    backgroundColour\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment HeaderBlockDetails on HeaderBlock {\n    __typename\n    title\n    summary\n    hideTitle\n    primaryImage {\n      ...ArticleBanner\n    }\n  }\n"): (typeof documents)["\n  fragment HeaderBlockDetails on HeaderBlock {\n    __typename\n    title\n    summary\n    hideTitle\n    primaryImage {\n      ...ArticleBanner\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MediaBlockDetails on MediaBlock {\n    __typename\n    id\n    mediaTitle: title\n    body\n    optionalImg: primaryImage {\n      file {\n        url\n      }\n      title\n      description\n    }\n    reverse\n    subtitle\n    backgroundColour\n    roundImage\n    callToAction {\n      label\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment MediaBlockDetails on MediaBlock {\n    __typename\n    id\n    mediaTitle: title\n    body\n    optionalImg: primaryImage {\n      file {\n        url\n      }\n      title\n      description\n    }\n    reverse\n    subtitle\n    backgroundColour\n    roundImage\n    callToAction {\n      label\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MediaCountBlockDetails on MediaCountBlock {\n    __typename\n    id\n    mediaTitle: title\n    body\n    optionalImg: primaryImage {\n      file {\n        mobile: thumbor(width: 500, height: 400)\n      }\n      title\n      description\n    }\n    reverse\n    subtitle\n    titleCountPart\n    backgroundColour\n    roundImage\n    callToAction {\n      label\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment MediaCountBlockDetails on MediaCountBlock {\n    __typename\n    id\n    mediaTitle: title\n    body\n    optionalImg: primaryImage {\n      file {\n        mobile: thumbor(width: 500, height: 400)\n      }\n      title\n      description\n    }\n    reverse\n    subtitle\n    titleCountPart\n    backgroundColour\n    roundImage\n    callToAction {\n      label\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TextBlockDetails on TextBlock {\n    title\n    body\n    hideTitle\n    id\n    backgroundColour\n  }\n"): (typeof documents)["\n  fragment TextBlockDetails on TextBlock {\n    title\n    body\n    hideTitle\n    id\n    backgroundColour\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CompositionPage on Composition {\n    id\n    maybeTitle: title\n    summary\n    excerpt\n    blocks {\n      ...BlockItemDetails\n    }\n  }\n"): (typeof documents)["\n  fragment CompositionPage on Composition {\n    id\n    maybeTitle: title\n    summary\n    excerpt\n    blocks {\n      ...BlockItemDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CompositionResult on Composition {\n    id\n    title\n    excerpt\n    urlAlias\n    primaryImage {\n      ...ResultCardImage\n    }\n  }\n"): (typeof documents)["\n  fragment CompositionResult on Composition {\n    id\n    title\n    excerpt\n    urlAlias\n    primaryImage {\n      ...ResultCardImage\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProseCardImg on AssetImage {\n    file {\n      mobile: thumbor(width: 500, height: 400)\n    }\n    title\n    description\n  }\n"): (typeof documents)["\n  fragment ProseCardImg on AssetImage {\n    file {\n      mobile: thumbor(width: 500, height: 400)\n    }\n    title\n    description\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ResourceRedirectDetails on Resource {\n    __typename\n    ... on Article {\n      id\n      title\n      urlAlias\n    }\n    ... on Composition {\n      id\n      maybeTitle: title\n      urlAlias\n    }\n    ... on DataUse {\n      id\n      title\n    }\n    ... on Document {\n      id\n      title\n    }\n    ... on MeetingEvent {\n      id\n      title\n    }\n    ... on News {\n      id\n      title\n    }\n    ... on Programme {\n      id\n      title\n    }\n    ... on GbifProject {\n      id\n      title\n    }\n    ... on Tool {\n      id\n      title\n    }\n  }\n"): (typeof documents)["\n  fragment ResourceRedirectDetails on Resource {\n    __typename\n    ... on Article {\n      id\n      title\n      urlAlias\n    }\n    ... on Composition {\n      id\n      maybeTitle: title\n      urlAlias\n    }\n    ... on DataUse {\n      id\n      title\n    }\n    ... on Document {\n      id\n      title\n    }\n    ... on MeetingEvent {\n      id\n      title\n    }\n    ... on News {\n      id\n      title\n    }\n    ... on Programme {\n      id\n      title\n    }\n    ... on GbifProject {\n      id\n      title\n    }\n    ... on Tool {\n      id\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DataUsePage on DataUse {\n    id\n    title\n    summary\n    resourceUsed\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    countriesOfCoverage\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n"): (typeof documents)["\n  fragment DataUsePage on DataUse {\n    id\n    title\n    summary\n    resourceUsed\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    countriesOfCoverage\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DataUseResult on DataUse {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n    createdAt\n  }\n"): (typeof documents)["\n  fragment DataUseResult on DataUse {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n    createdAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DocumentPage on Document {\n    id\n    title\n    createdAt\n    excerpt\n    summary\n    primaryLink {\n      label\n      url\n    }\n    document {\n      title\n      description\n      file {\n        fileName\n        url\n      }\n    }\n    body\n    citation\n  }\n"): (typeof documents)["\n  fragment DocumentPage on Document {\n    id\n    title\n    createdAt\n    excerpt\n    summary\n    primaryLink {\n      label\n      url\n    }\n    document {\n      title\n      description\n      file {\n        fileName\n        url\n      }\n    }\n    body\n    citation\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DocumentResult on Document {\n    id\n    title\n    excerpt\n  }\n"): (typeof documents)["\n  fragment DocumentResult on Document {\n    id\n    title\n    excerpt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment EventPage on MeetingEvent {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    location\n    country\n    start\n    end\n    eventLanguage\n    venue\n    allDayEvent\n    documents {\n      ...DocumentPreview\n    }\n  }\n"): (typeof documents)["\n  fragment EventPage on MeetingEvent {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    location\n    country\n    start\n    end\n    eventLanguage\n    venue\n    allDayEvent\n    documents {\n      ...DocumentPreview\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment EventResult on MeetingEvent {\n    id\n    title\n    excerpt\n    country\n    location\n    venue\n    start\n    end\n    primaryLink {\n      url\n    }\n    gbifsAttendee\n    allDayEvent\n  }\n"): (typeof documents)["\n  fragment EventResult on MeetingEvent {\n    id\n    title\n    excerpt\n    country\n    location\n    venue\n    start\n    end\n    primaryLink {\n      url\n    }\n    gbifsAttendee\n    allDayEvent\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment NewsPage on News {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    countriesOfCoverage\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n"): (typeof documents)["\n  fragment NewsPage on News {\n    id\n    title\n    summary\n    excerpt\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    countriesOfCoverage\n    topics\n    purposes\n    audiences\n    citation\n    createdAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment NewsResult on News {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n    createdAt\n  }\n"): (typeof documents)["\n  fragment NewsResult on News {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n    createdAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProgrammePage on Programme {\n    title\n    excerpt\n    blocks {\n      ...BlockItemDetails\n    }\n    ...ProgrammeFundingBanner\n  }\n"): (typeof documents)["\n  fragment ProgrammePage on Programme {\n    title\n    excerpt\n    blocks {\n      ...BlockItemDetails\n    }\n    ...ProgrammeFundingBanner\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProgrammeResult on Programme {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n  }\n"): (typeof documents)["\n  fragment ProgrammeResult on Programme {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProjectPage on GbifProject {\n    # Define the values used by this page\n    title\n    excerpt\n    status\n    start\n    end\n    fundsAllocated\n    primaryLink {\n      label\n      url\n    }\n    ...ProjectFundingBanner\n    # The Project About tab uses the data from this loader and defines its own data needs in this fragment\n    ...ProjectAboutTab\n  }\n"): (typeof documents)["\n  fragment ProjectPage on GbifProject {\n    # Define the values used by this page\n    title\n    excerpt\n    status\n    start\n    end\n    fundsAllocated\n    primaryLink {\n      label\n      url\n    }\n    ...ProjectFundingBanner\n    # The Project About tab uses the data from this loader and defines its own data needs in this fragment\n    ...ProjectAboutTab\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query Project($key: String!) {\n      resource(id: $key) {\n        ...ResourceRedirectDetails\n        ... on GbifProject {\n          ...ProjectPage\n        }\n      }\n      # The Project Datasets tab also uses some data from this loader and defines its own data needs in this fragment\n      ...ProjectDatasetsTab\n    }\n  "): (typeof documents)["\n    query Project($key: String!) {\n      resource(id: $key) {\n        ...ResourceRedirectDetails\n        ... on GbifProject {\n          ...ProjectPage\n        }\n      }\n      # The Project Datasets tab also uses some data from this loader and defines its own data needs in this fragment\n      ...ProjectDatasetsTab\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProjectAboutTab on GbifProject {\n    projectId\n    id\n    body\n    start\n    end\n    status\n    fundsAllocated\n    matchingFunds\n    grantType\n    purposes\n    leadPartner {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    additionalPartners {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    leadContact\n    fundingOrganisations {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    programme {\n      fundingOrganisations {\n        ...ParticipantOrFundingOrganisationDetails\n      }\n    }\n    overrideProgrammeFunding {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    programme {\n      id\n      title\n    }\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    documents {\n      ...DocumentPreview\n    }\n  }\n"): (typeof documents)["\n  fragment ProjectAboutTab on GbifProject {\n    projectId\n    id\n    body\n    start\n    end\n    status\n    fundsAllocated\n    matchingFunds\n    grantType\n    purposes\n    leadPartner {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    additionalPartners {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    leadContact\n    fundingOrganisations {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    programme {\n      fundingOrganisations {\n        ...ParticipantOrFundingOrganisationDetails\n      }\n    }\n    overrideProgrammeFunding {\n      ...ParticipantOrFundingOrganisationDetails\n    }\n    programme {\n      id\n      title\n    }\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    documents {\n      ...DocumentPreview\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ParticipantOrFundingOrganisationDetails on ParticipantOrFundingOrganisation {\n    __typename\n    ... on FundingOrganisation {\n      id\n      title\n      url\n    }\n    ... on Participant {\n      id\n      title\n    }\n  }\n"): (typeof documents)["\n  fragment ParticipantOrFundingOrganisationDetails on ParticipantOrFundingOrganisation {\n    __typename\n    ... on FundingOrganisation {\n      id\n      title\n      url\n    }\n    ... on Participant {\n      id\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProjectDatasetsTab on Query {\n    gbifProject(id: $key) {\n      projectId\n    }\n    datasetsHelp: help(identifier: \"how-to-link-datasets-to-my-project-page\") {\n      title\n    }\n  }\n"): (typeof documents)["\n  fragment ProjectDatasetsTab on Query {\n    gbifProject(id: $key) {\n      projectId\n    }\n    datasetsHelp: help(identifier: \"how-to-link-datasets-to-my-project-page\") {\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProjectDatasets($projectId: ID!) {\n    datasetSearch(projectId: [$projectId], limit: 500) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProjectDatasets($projectId: ID!) {\n    datasetSearch(projectId: [$projectId], limit: 500) {\n      count\n      limit\n      offset\n      results {\n        ...DatasetStubResult\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProjectNewsAndEvents($key: String!) {\n    gbifProject(id: $key) {\n      news {\n        __typename\n        createdAt\n        ...NewsResult\n      }\n      events {\n        __typename\n        start\n        ...EventResult\n      }\n    }\n    help(identifier: \"how-to-add-events-to-my-project-page\") {\n      title\n    }\n  }\n"): (typeof documents)["\n  query ProjectNewsAndEvents($key: String!) {\n    gbifProject(id: $key) {\n      news {\n        __typename\n        createdAt\n        ...NewsResult\n      }\n      events {\n        __typename\n        start\n        ...EventResult\n      }\n    }\n    help(identifier: \"how-to-add-events-to-my-project-page\") {\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProjectResult on GbifProject {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n    createdAt\n    programme {\n      id\n      title\n    }\n    purposes\n  }\n"): (typeof documents)["\n  fragment ProjectResult on GbifProject {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n    createdAt\n    programme {\n      id\n      title\n    }\n    purposes\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ResourceRedirect($id: String!) {\n    resource(id: $id) {\n      __typename\n    }\n  }\n"): (typeof documents)["\n  query ResourceRedirect($id: String!) {\n    resource(id: $id) {\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ToolPage on Tool {\n    id\n    title\n    summary\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    citation\n    createdAt\n    author\n    rights\n    rightsHolder\n    publicationDate\n  }\n"): (typeof documents)["\n  fragment ToolPage on Tool {\n    id\n    title\n    summary\n    body\n    primaryImage {\n      ...ArticleBanner\n    }\n    primaryLink {\n      label\n      url\n    }\n    secondaryLinks {\n      label\n      url\n    }\n    citation\n    createdAt\n    author\n    rights\n    rightsHolder\n    publicationDate\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ToolResult on Tool {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n  }\n"): (typeof documents)["\n  fragment ToolResult on Tool {\n    id\n    title\n    excerpt\n    primaryImage {\n      ...ResultCardImage\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ResourceCoverageCountryFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: countriesOfCoverage {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ResourceCoverageCountryFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: countriesOfCoverage {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ResourceTopicsFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: topics(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ResourceTopicsFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: topics(size: 100) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ResourceResearcherCountryFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: countriesOfResearcher {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ResourceResearcherCountryFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: countriesOfResearcher {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ResourceGbifProgrammeAcronymFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: gbifProgrammeAcronym(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ResourceGbifProgrammeAcronymFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: gbifProgrammeAcronym(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ResourcePurposesFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: purposes(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ResourcePurposesFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: purposes(size: 20) {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ResourceContractCountryFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: contractCountry {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ResourceContractCountryFacet($predicate: Predicate) {\n      search: resourceSearch(predicate: $predicate) {\n        facet {\n          field: contractCountry {\n            name: key\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ResourceSearch(\n    $from: Int\n    $size: Int\n    $predicate: Predicate\n    $contentType: [ContentType!]\n  ) {\n    resourceSearch(predicate: $predicate, contentType: $contentType) {\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          __typename\n          ... on Composition {\n            ...CompositionResult\n          }\n          ... on News {\n            ...NewsResult\n          }\n          ... on Article {\n            ...ArticleResult\n          }\n          ... on DataUse {\n            ...DataUseResult\n          }\n          ... on MeetingEvent {\n            ...EventResult\n          }\n          ... on GbifProject {\n            ...ProjectResult\n          }\n          ... on Programme {\n            ...ProgrammeResult\n          }\n          ... on Tool {\n            ...ToolResult\n          }\n          ... on Document {\n            ...DocumentResult\n          }\n          ... on Document {\n            ...DocumentResult\n          }\n          ... on NetworkProse {\n            ...NetworkProseResult\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ResourceSearch(\n    $from: Int\n    $size: Int\n    $predicate: Predicate\n    $contentType: [ContentType!]\n  ) {\n    resourceSearch(predicate: $predicate, contentType: $contentType) {\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          __typename\n          ... on Composition {\n            ...CompositionResult\n          }\n          ... on News {\n            ...NewsResult\n          }\n          ... on Article {\n            ...ArticleResult\n          }\n          ... on DataUse {\n            ...DataUseResult\n          }\n          ... on MeetingEvent {\n            ...EventResult\n          }\n          ... on GbifProject {\n            ...ProjectResult\n          }\n          ... on Programme {\n            ...ProgrammeResult\n          }\n          ... on Tool {\n            ...ToolResult\n          }\n          ... on Document {\n            ...DocumentResult\n          }\n          ... on Document {\n            ...DocumentResult\n          }\n          ... on NetworkProse {\n            ...NetworkProseResult\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TaxonDistributions($key: ID!, $limit: Int, $offset: Int) {\n    taxon(key: $key) {\n      distributions(limit: $limit, offset: $offset) {\n        endOfRecords\n        limit\n        offset\n        results {\n          threatStatus\n          establishmentMeans\n          status\n          locality\n          locationId\n          country\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TaxonDistributions($key: ID!, $limit: Int, $offset: Int) {\n    taxon(key: $key) {\n      distributions(limit: $limit, offset: $offset) {\n        endOfRecords\n        limit\n        offset\n        results {\n          threatStatus\n          establishmentMeans\n          status\n          locality\n          locationId\n          country\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query InvasiveTaxon($key: ID!) {\n    taxon(key: $key) {\n      key\n      invasiveInCountries {\n        country\n        isSubCountry\n        datasetKey\n        dataset\n        scientificName\n        nubKey\n        taxonKey\n        isInvasive\n      }\n    }\n  }\n"): (typeof documents)["\n  query InvasiveTaxon($key: ID!) {\n    taxon(key: $key) {\n      key\n      invasiveInCountries {\n        country\n        isSubCountry\n        datasetKey\n        dataset\n        scientificName\n        nubKey\n        taxonKey\n        isInvasive\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TaxonOccurrenceImages($imagePredicate: Predicate) {\n    images: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 25) {\n        total\n        results {\n          key\n          stillImages {\n            identifier: thumbor(height: 400)\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TaxonOccurrenceImages($imagePredicate: Predicate) {\n    images: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 25) {\n        total\n        results {\n          key\n          stillImages {\n            identifier: thumbor(height: 400)\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Treatments($key: ID!) {\n    taxon(key: $key) {\n      key\n      rank\n      scientificName\n      treatments {\n        sourceTaxon {\n          key\n          nubKey\n        }\n        publisherKey\n        publisherTitle\n        publisherHomepage\n        datasetTitle\n        datasetKey\n        citation\n        link\n      }\n    }\n  }\n"): (typeof documents)["\n  query Treatments($key: ID!) {\n    taxon(key: $key) {\n      key\n      rank\n      scientificName\n      treatments {\n        sourceTaxon {\n          key\n          nubKey\n        }\n        publisherKey\n        publisherTitle\n        publisherHomepage\n        datasetTitle\n        datasetKey\n        citation\n        link\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TaxonTypeSpecimens($from: Int, $size: Int, $predicate: Predicate) {\n    occurrenceSearch(predicate: $predicate) {\n      _meta\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          key\n          taxonKey\n          scientificName\n          typeStatus\n          typifiedName\n          catalogNumber\n          recordedBy\n          year\n          country\n          institutionCode\n          collectionCode\n          occurrenceID\n          dataset {\n            key\n            title\n          }\n          extensions {\n            dnaDerivedData\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TaxonTypeSpecimens($from: Int, $size: Int, $predicate: Predicate) {\n    occurrenceSearch(predicate: $predicate) {\n      _meta\n      documents(from: $from, size: $size) {\n        from\n        size\n        total\n        results {\n          key\n          taxonKey\n          scientificName\n          typeStatus\n          typifiedName\n          catalogNumber\n          recordedBy\n          year\n          country\n          institutionCode\n          collectionCode\n          occurrenceID\n          dataset {\n            key\n            title\n          }\n          extensions {\n            dnaDerivedData\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query VerbatimTaxon($key: ID!) {\n    taxon(key: $key) {\n      verbatim\n    }\n  }\n"): (typeof documents)["\n  query VerbatimTaxon($key: ID!) {\n    taxon(key: $key) {\n      verbatim\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TaxonVernacularNames($key: ID!, $limit: Int, $offset: Int) {\n    taxon(key: $key) {\n      vernacularNames(limit: $limit, offset: $offset) {\n        endOfRecords\n        results {\n          vernacularName\n          language\n          sourceTaxonKey\n          sourceTaxon {\n            datasetKey\n          }\n          source\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TaxonVernacularNames($key: ID!, $limit: Int, $offset: Int) {\n    taxon(key: $key) {\n      vernacularNames(limit: $limit, offset: $offset) {\n        endOfRecords\n        results {\n          vernacularName\n          language\n          sourceTaxonKey\n          sourceTaxon {\n            datasetKey\n          }\n          source\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TaxonBreakdown($key: ID!) {\n    taxon(key: $key) {\n      key\n      rank\n      scientificName\n      checklistBankBreakdown {\n        id\n        label\n        name\n        rank\n        species\n        children {\n          id\n          label\n          name\n          rank\n          species\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TaxonBreakdown($key: ID!) {\n    taxon(key: $key) {\n      key\n      rank\n      scientificName\n      checklistBankBreakdown {\n        id\n        label\n        name\n        rank\n        species\n        children {\n          id\n          label\n          name\n          rank\n          species\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SourceTaxon($sourceId: ID!, $datasetKey: ID!) {\n    taxonBySourceId(sourceId: $sourceId, datasetKey: $datasetKey) {\n      key\n      nubKey\n      scientificName\n      taxonID\n    }\n  }\n"): (typeof documents)["\n  query SourceTaxon($sourceId: ID!, $datasetKey: ID!) {\n    taxonBySourceId(sourceId: $sourceId, datasetKey: $datasetKey) {\n      key\n      nubKey\n      scientificName\n      taxonID\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TaxonKey($key: ID!, $imagePredicate: Predicate) {\n    taxon(key: $key) {\n      key\n      nubKey\n      sourceTaxon {\n        key\n        references\n        datasetKey\n        dataset {\n          title\n        }\n      }\n      issues\n      scientificName\n      canonicalName\n      origin\n      kingdom\n      formattedName(useFallback: true)\n      rank\n      taxonomicStatus\n      publishedIn\n      references\n      datasetKey\n      speciesCount\n      distributionsCount: distributions(limit: 10, offset: 0) {\n        results {\n          taxonKey\n        }\n      }\n      iucnStatus {\n        references\n        distribution {\n          taxonKey\n          threatStatus\n        }\n      }\n      dataset {\n        title\n        key\n        citation {\n          text\n          citationProvidedBySource\n        }\n      }\n      vernacularCount: vernacularNames(limit: 10, offset: 0) {\n        results {\n          taxonKey\n        }\n      }\n      parents {\n        rank\n        scientificName\n        canonicalName\n        formattedName\n        key\n      }\n      acceptedTaxon {\n        key\n        formattedName\n        scientificName\n      }\n      synonyms(limit: 10, offset: 0) {\n        results {\n          key\n        }\n      }\n    }\n\n    imagesCount: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query TaxonKey($key: ID!, $imagePredicate: Predicate) {\n    taxon(key: $key) {\n      key\n      nubKey\n      sourceTaxon {\n        key\n        references\n        datasetKey\n        dataset {\n          title\n        }\n      }\n      issues\n      scientificName\n      canonicalName\n      origin\n      kingdom\n      formattedName(useFallback: true)\n      rank\n      taxonomicStatus\n      publishedIn\n      references\n      datasetKey\n      speciesCount\n      distributionsCount: distributions(limit: 10, offset: 0) {\n        results {\n          taxonKey\n        }\n      }\n      iucnStatus {\n        references\n        distribution {\n          taxonKey\n          threatStatus\n        }\n      }\n      dataset {\n        title\n        key\n        citation {\n          text\n          citationProvidedBySource\n        }\n      }\n      vernacularCount: vernacularNames(limit: 10, offset: 0) {\n        results {\n          taxonKey\n        }\n      }\n      parents {\n        rank\n        scientificName\n        canonicalName\n        formattedName\n        key\n      }\n      acceptedTaxon {\n        key\n        formattedName\n        scientificName\n      }\n      synonyms(limit: 10, offset: 0) {\n        results {\n          key\n        }\n      }\n    }\n\n    imagesCount: occurrenceSearch(predicate: $imagePredicate) {\n      documents(size: 0) {\n        total\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SlowTaxon($key: ID!, $language: String) {\n    taxon(key: $key) {\n      key\n      basionymKey\n      vernacularNames(limit: 1, language: $language) {\n        results {\n          vernacularName\n          source\n        }\n      }\n      combinations {\n        key\n        nameKey\n        acceptedKey\n        canonicalName\n        authorship\n        scientificName\n        formattedName\n        rank\n        taxonomicStatus\n        numDescendants\n      }\n      synonyms(limit: 100, offset: 0) {\n        limit\n        offset\n        endOfRecords\n        results {\n          key\n          nameKey\n          acceptedKey\n          canonicalName\n          authorship\n          scientificName\n          formattedName\n          rank\n          taxonomicStatus\n          numDescendants\n        }\n      }\n      wikiData {\n        source {\n          id\n          url\n        }\n        identifiers {\n          id\n          label\n          description\n          url\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SlowTaxon($key: ID!, $language: String) {\n    taxon(key: $key) {\n      key\n      basionymKey\n      vernacularNames(limit: 1, language: $language) {\n        results {\n          vernacularName\n          source\n        }\n      }\n      combinations {\n        key\n        nameKey\n        acceptedKey\n        canonicalName\n        authorship\n        scientificName\n        formattedName\n        rank\n        taxonomicStatus\n        numDescendants\n      }\n      synonyms(limit: 100, offset: 0) {\n        limit\n        offset\n        endOfRecords\n        results {\n          key\n          nameKey\n          acceptedKey\n          canonicalName\n          authorship\n          scientificName\n          formattedName\n          rank\n          taxonomicStatus\n          numDescendants\n        }\n      }\n      wikiData {\n        source {\n          id\n          url\n        }\n        identifiers {\n          id\n          label\n          description\n          url\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NonBackboneSlowTaxon($key: ID!) {\n    taxon(key: $key) {\n      key\n      nubKey\n      scientificName\n      kingdom\n      formattedName(useFallback: true)\n      rank\n      taxonomicStatus\n      publishedIn\n      media {\n        limit\n        endOfRecords\n        results {\n          identifier\n          creator\n          rightsHolder\n        }\n      }\n      dataset {\n        citation {\n          text\n          citationProvidedBySource\n        }\n      }\n      vernacularCount: vernacularNames(limit: 10, offset: 0) {\n        results {\n          taxonKey\n        }\n      }\n      parents {\n        rank\n        scientificName\n        key\n      }\n      acceptedTaxon {\n        key\n        formattedName\n        scientificName\n      }\n      combinations {\n        key\n        nameKey\n        acceptedKey\n        canonicalName\n        authorship\n        scientificName\n        formattedName\n        rank\n        taxonomicStatus\n        numDescendants\n      }\n      synonyms(limit: 100, offset: 0) {\n        limit\n        offset\n        endOfRecords\n        results {\n          key\n          nameKey\n          acceptedKey\n          canonicalName\n          authorship\n          scientificName\n          formattedName\n          rank\n          taxonomicStatus\n          numDescendants\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query NonBackboneSlowTaxon($key: ID!) {\n    taxon(key: $key) {\n      key\n      nubKey\n      scientificName\n      kingdom\n      formattedName(useFallback: true)\n      rank\n      taxonomicStatus\n      publishedIn\n      media {\n        limit\n        endOfRecords\n        results {\n          identifier\n          creator\n          rightsHolder\n        }\n      }\n      dataset {\n        citation {\n          text\n          citationProvidedBySource\n        }\n      }\n      vernacularCount: vernacularNames(limit: 10, offset: 0) {\n        results {\n          taxonKey\n        }\n      }\n      parents {\n        rank\n        scientificName\n        key\n      }\n      acceptedTaxon {\n        key\n        formattedName\n        scientificName\n      }\n      combinations {\n        key\n        nameKey\n        acceptedKey\n        canonicalName\n        authorship\n        scientificName\n        formattedName\n        rank\n        taxonomicStatus\n        numDescendants\n      }\n      synonyms(limit: 100, offset: 0) {\n        limit\n        offset\n        endOfRecords\n        results {\n          key\n          nameKey\n          acceptedKey\n          canonicalName\n          authorship\n          scientificName\n          formattedName\n          rank\n          taxonomicStatus\n          numDescendants\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ToNubOrNotToNub($key: ID!) {\n    taxon(key: $key) {\n      nubKey\n      key\n      datasetKey\n    }\n  }\n"): (typeof documents)["\n  query ToNubOrNotToNub($key: ID!) {\n    taxon(key: $key) {\n      nubKey\n      key\n      datasetKey\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query TaxonRankFacet($query: TaxonSearchInput) {\n      search: taxonSearch(query: $query) {\n        facet {\n          field: rank(limit: 100) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query TaxonRankFacet($query: TaxonSearchInput) {\n      search: taxonSearch(query: $query) {\n        facet {\n          field: rank(limit: 100) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query TaxonStatusFacet($query: TaxonSearchInput) {\n      search: taxonSearch(query: $query) {\n        facet {\n          field: status(limit: 100) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query TaxonStatusFacet($query: TaxonSearchInput) {\n      search: taxonSearch(query: $query) {\n        facet {\n          field: status(limit: 100) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query TaxonIssueFacet($query: TaxonSearchInput) {\n      search: taxonSearch(query: $query) {\n        facet {\n          field: issue(limit: 100) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query TaxonIssueFacet($query: TaxonSearchInput) {\n      search: taxonSearch(query: $query) {\n        facet {\n          field: issue(limit: 100) {\n            name\n            count\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TaxonSearch($offset: Int, $limit: Int, $query: TaxonSearchInput) {\n    taxonSearch(query: $query, offset: $offset, limit: $limit) {\n      count\n      offset\n      endOfRecords\n      results {\n        key\n        nubKey\n        scientificName\n        formattedName(useFallback: true)\n        kingdom\n        phylum\n        class\n        order\n        family\n        genus\n        species\n        taxonomicStatus\n        rank\n        datasetKey\n        dataset {\n          title\n        }\n        accepted\n        acceptedKey\n        numDescendants\n        vernacularNames(limit: 2, language: \"eng\") {\n          results {\n            vernacularName\n            source\n            sourceTaxonKey\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TaxonSearch($offset: Int, $limit: Int, $query: TaxonSearchInput) {\n    taxonSearch(query: $query, offset: $offset, limit: $limit) {\n      count\n      offset\n      endOfRecords\n      results {\n        key\n        nubKey\n        scientificName\n        formattedName(useFallback: true)\n        kingdom\n        phylum\n        class\n        order\n        family\n        genus\n        species\n        taxonomicStatus\n        rank\n        datasetKey\n        dataset {\n          title\n        }\n        accepted\n        acceptedKey\n        numDescendants\n        vernacularNames(limit: 2, language: \"eng\") {\n          results {\n            vernacularName\n            source\n            sourceTaxonKey\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RootSearch($datasetKey: ID!, $offset: Int, $limit: Int) {\n    checklistRoots(datasetKey: $datasetKey, offset: $offset, limit: $limit) {\n      offset\n      endOfRecords\n      results {\n        key\n        nubKey\n        scientificName\n        formattedName(useFallback: true)\n        kingdom\n        phylum\n        class\n        order\n        family\n        genus\n        species\n        taxonomicStatus\n        rank\n        datasetKey\n        dataset {\n          title\n        }\n        accepted\n        acceptedKey\n        numDescendants\n        vernacularNames(limit: 2, language: \"eng\") {\n          results {\n            vernacularName\n            source\n            sourceTaxonKey\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query RootSearch($datasetKey: ID!, $offset: Int, $limit: Int) {\n    checklistRoots(datasetKey: $datasetKey, offset: $offset, limit: $limit) {\n      offset\n      endOfRecords\n      results {\n        key\n        nubKey\n        scientificName\n        formattedName(useFallback: true)\n        kingdom\n        phylum\n        class\n        order\n        family\n        genus\n        species\n        taxonomicStatus\n        rank\n        datasetKey\n        dataset {\n          title\n        }\n        accepted\n        acceptedKey\n        numDescendants\n        vernacularNames(limit: 2, language: \"eng\") {\n          results {\n            vernacularName\n            source\n            sourceTaxonKey\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query TaxonChildren($key: ID!, $limit: Int, $offset: Int) {\n      taxon(key: $key) {\n        key\n        scientificName\n        numDescendants\n        children(limit: $limit, offset: $offset) {\n          limit\n          endOfRecords\n          offset\n          results {\n            key\n            parentKey\n            numDescendants\n            scientificName\n            canonicalName\n            formattedName(useFallback: true)\n            rank\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query TaxonChildren($key: ID!, $limit: Int, $offset: Int) {\n      taxon(key: $key) {\n        key\n        scientificName\n        numDescendants\n        children(limit: $limit, offset: $offset) {\n          limit\n          endOfRecords\n          offset\n          results {\n            key\n            parentKey\n            numDescendants\n            scientificName\n            canonicalName\n            formattedName(useFallback: true)\n            rank\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query TaxonParentKeys($key: ID!, $limit: Int, $offset: Int) {\n      taxon(key: $key) {\n        acceptedTaxon {\n          key\n          numDescendants\n          scientificName\n          formattedName(useFallback: true)\n          children(limit: $limit, offset: $offset) {\n            limit\n            endOfRecords\n            offset\n            results {\n              key\n              numDescendants\n              scientificName\n              formattedName(useFallback: true)\n            }\n          }\n        }\n        acceptedKey\n        key\n        numDescendants\n        scientificName\n        formattedName(useFallback: true)\n        children(limit: $limit, offset: $offset) {\n          limit\n          endOfRecords\n          offset\n          results {\n            key\n            numDescendants\n            scientificName\n            formattedName(useFallback: true)\n          }\n        }\n        parents {\n          key\n          numDescendants\n          scientificName\n          formattedName(useFallback: true)\n          children(limit: $limit, offset: $offset) {\n            limit\n            endOfRecords\n            offset\n            results {\n              key\n              numDescendants\n              scientificName\n              formattedName(useFallback: true)\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query TaxonParentKeys($key: ID!, $limit: Int, $offset: Int) {\n      taxon(key: $key) {\n        acceptedTaxon {\n          key\n          numDescendants\n          scientificName\n          formattedName(useFallback: true)\n          children(limit: $limit, offset: $offset) {\n            limit\n            endOfRecords\n            offset\n            results {\n              key\n              numDescendants\n              scientificName\n              formattedName(useFallback: true)\n            }\n          }\n        }\n        acceptedKey\n        key\n        numDescendants\n        scientificName\n        formattedName(useFallback: true)\n        children(limit: $limit, offset: $offset) {\n          limit\n          endOfRecords\n          offset\n          results {\n            key\n            numDescendants\n            scientificName\n            formattedName(useFallback: true)\n          }\n        }\n        parents {\n          key\n          numDescendants\n          scientificName\n          formattedName(useFallback: true)\n          children(limit: $limit, offset: $offset) {\n            limit\n            endOfRecords\n            offset\n            results {\n              key\n              numDescendants\n              scientificName\n              formattedName(useFallback: true)\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TaxonResult on Taxon {\n    key\n    nubKey\n    scientificName\n    canonicalName\n    formattedName(useFallback: true)\n    kingdom\n    phylum\n    class\n    order\n    family\n    genus\n    rank\n    taxonomicStatus\n    parents {\n      key\n      name: canonicalName\n      rank\n    }\n    mapCapabilities {\n      total\n    }\n    accepted\n    acceptedKey\n    numDescendants\n    vernacularNames(limit: 1, language: \"eng\") {\n      results {\n        vernacularName\n        source\n        sourceTaxonKey\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TaxonResult on Taxon {\n    key\n    nubKey\n    scientificName\n    canonicalName\n    formattedName(useFallback: true)\n    kingdom\n    phylum\n    class\n    order\n    family\n    genus\n    rank\n    taxonomicStatus\n    parents {\n      key\n      name: canonicalName\n      rank\n    }\n    mapCapabilities {\n      total\n    }\n    accepted\n    acceptedKey\n    numDescendants\n    vernacularNames(limit: 1, language: \"eng\") {\n      results {\n        vernacularName\n        source\n        sourceTaxonKey\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;